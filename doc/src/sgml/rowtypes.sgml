<!-- doc/src/sgml/rowtypes.sgml -->

<sect1 id="rowtypes">
<!--
 <title>Composite Types</title>
-->
 <title>複合型</title>

 <indexterm>
<!--
  <primary>composite type</primary>
-->
  <primary>複合型</primary>
 </indexterm>

 <indexterm>
<!--
  <primary>row type</primary>
-->
  <primary>行型</primary>
 </indexterm>

 <para>
<!--
  A <firstterm>composite type</> represents the structure of a row or record;
  it is essentially just a list of field names and their data types.
  <productname>PostgreSQL</productname> allows  composite types to be
  used in many of the same ways that simple types can be used.  For example, a
  column of a table can be declared to be of a composite type.
-->
<firstterm>複合型</>は、行もしくはレコードの構造を表現します。
本質的には、これは単なるフィールド名とそのデータ型のリストです。
<productname>PostgreSQL</productname>では、単純な型において使用される方法と多くは同じ方法で複合型を使用できます。
例えば、テーブルの列は複合型の型のものとして宣言することができます。
 </para>

 <sect2 id="rowtypes-declaring">
<!--
  <title>Declaration of Composite Types</title>
-->
  <title>複合型の宣言</title>

 <para>
<!--
  Here are two simple examples of defining composite types:
-->
複合型の宣言の例を以下に2つ示します。
<programlisting>
CREATE TYPE complex AS (
    r       double precision,
    i       double precision
);

CREATE TYPE inventory_item AS (
    name            text,
    supplier_id     integer,
    price           numeric
);
</programlisting>
<!--
  The syntax is comparable to <command>CREATE TABLE</>, except that only
  field names and types can be specified; no constraints (such as <literal>NOT
  NULL</>) can presently be included.  Note that the <literal>AS</> keyword
  is essential; without it, the system will think a different kind
  of <command>CREATE TYPE</> command is meant, and you will get odd syntax
  errors.
-->
この構文は、フィールド名とその型のみを指定できるという点を除き、<command>CREATE TABLE</>と同等です。
現在は、制約（<literal>NOT NULL</>など）を含めることはできません。
<literal>AS</>キーワードが重要であることに注意してください。
これがないと、システムは<command>CREATE TYPE</>の意味を異なって解釈し、おかしな構文エラーを引き起こします。
 </para>

 <para>
<!--
  Having defined the types, we can use them to create tables:
-->
定義済みの型を使用して、以下のようにテーブルや関数を生成することができます。

<programlisting>
CREATE TABLE on_hand (
    item      inventory_item,
    count     integer
);

INSERT INTO on_hand VALUES (ROW('fuzzy dice', 42, 1.99), 1000);
</programlisting>

<!--
  or functions:
-->
また、関数においては以下のように利用できます。

<programlisting>
CREATE FUNCTION price_extension(inventory_item, integer) RETURNS numeric
AS 'SELECT $1.price * $2' LANGUAGE SQL;

SELECT price_extension(item, 10) FROM on_hand;
</programlisting>

 </para>

 <para>
<!--
  Whenever you create a table, a composite type is also automatically
  created, with the same name as the table, to represent the table's
  row type.  For example, had we said:
-->
テーブルを生成する時には、テーブルの行型を表現するために、テーブル名と同じ名前の複合型も自動的に生成されます。
例えば、以下のように
<programlisting>
CREATE TABLE inventory_item (
    name            text,
    supplier_id     integer REFERENCES suppliers,
    price           numeric CHECK (price &gt; 0)
);
</programlisting>
<!--
  then the same <literal>inventory_item</> composite type shown above would
  come into being as a
  byproduct, and could be used just as above.  Note however an important
  restriction of the current implementation: since no constraints are
  associated with a composite type, the constraints shown in the table
  definition <emphasis>do not apply</> to values of the composite type
  outside the table.  (A partial workaround is to use domain
  types as members of composite types.)
-->
テーブルを作成すると、上述のものと同じ<literal>inventory_item</>という複合型が副次的に作成され、同様に使用することができるようになります。
しかし、現在の実装には、次のような重要な制限があることに注意してください。
複合型には制約が関連付けられませんので、テーブル定義に含まれる制約は、テーブルの外部に作成される複合型には<emphasis>適用されません</>。
（部分的な回避方法は、複合型のメンバとしてドメイン型を使用することです。）
 </para>
 </sect2>

 <sect2>
<!--
  <title>Constructing Composite Values</title>
-->
  <title>複合型の値の入力</title>

  <indexterm>
<!--
   <primary>composite type</primary>
   <secondary>constant</secondary>
-->
   <primary>複合型</primary>
   <secondary>の定数</secondary>
  </indexterm>

  <para>
<!--
   To write a composite value as a literal constant, enclose the field
   values within parentheses and separate them by commas.  You can put double
   quotes around any field value, and must do so if it contains commas or
   parentheses.  (More details appear <link
   linkend="rowtypes-io-syntax">below</link>.)  Thus, the general format of
   a composite constant is the following:
-->
複合型をリテラル定数として記述するには、フィールド値をカンマで区切り、それらを括弧で括ります。
フィールド値を二重引用符で括ることができ、また、値にカンマや括弧を含む場合は二重引用符で括らなければなりません
（より詳細については後で説明します）。
したがって、複合型の一般的な書式は以下のようになります。 ★変更あり
<synopsis>
'( <replaceable>val1</replaceable> , <replaceable>val2</replaceable> , ... )'
</synopsis>
<!--
   An example is:
-->
以下に例を示します。
<programlisting>
'("fuzzy dice",42,1.99)'
</programlisting>
<!--
   which would be a valid value of the <literal>inventory_item</> type
   defined above.  To make a field be NULL, write no characters at all
   in its position in the list.  For example, this constant specifies
   a NULL third field:
-->
これは、上述の<literal>inventory_item</>型の値として有効なものです。
フィールドをNULLにするには、リスト中の該当位置を空にします。
例えば、以下の定数は3番目のフィールドにNULLを指定しています。
<programlisting>
'("fuzzy dice",42,)'
</programlisting>
<!--
   If you want an empty string rather than NULL, write double quotes:
-->
NULLではなく空文字列にしたいのであれば、以下のように引用符を二重に記述します。
<programlisting>
'("",42,)'
</programlisting>
<!--
   Here the first field is a non-NULL empty string, the third is NULL.
-->
これにより、最初のフィールドは非NULLの空文字列に、3番目のフィールドはNULLになります。
  </para>

  <para>
<!--
   (These constants are actually only a special case of
   the generic type constants discussed in <xref
   linkend="sql-syntax-constants-generic">.  The constant is initially
   treated as a string and passed to the composite-type input conversion
   routine.  An explicit type specification might be necessary to tell
   which type to convert the constant to.)
-->
（実際には、こうした定数は<xref linkend="sql-syntax-constants-generic">で説明した、一般的な型の定数の特殊な場合に過ぎません。
定数はまず、文字列として扱われ、複合型の入力変換処理に渡されます。
明示的な型指定が必要になることもあります。） ★変更あり
  </para>

 <para>
<!--
  The <literal>ROW</literal> expression syntax can also be used to
  construct composite values.  In most cases this is considerably
  simpler to use than the string-literal syntax since you don't have
  to worry about multiple layers of quoting.  We already used this
  method above:
-->
また、<literal>ROW</literal>式構文も、複合値を生成する際に使用することができます。
複数の階層に渡る引用符について考慮する必要がないため、おそらくほとんどの場合、これは文字列リテラル構文よりも簡単に使用できます。
上記において、既にこの方法を使用しています。
<programlisting>
ROW('fuzzy dice', 42, 1.99)
ROW('', 42, NULL)
</programlisting>
<!--
  The ROW keyword is actually optional as long as you have more than one
  field in the expression, so these can be simplified to:
-->
式の中に2つ以上のフィールドがある場合には、ROWキーワードは実際には省略することができます。
ですので、以下のように簡略化することができます。 ★変更あり
<programlisting>
('fuzzy dice', 42, 1.99)
('', 42, NULL)
</programlisting>
<!--
  The <literal>ROW</> expression syntax is discussed in more detail in <xref
  linkend="sql-syntax-row-constructors">.
-->
<literal>ROW</literal>構文については<xref linkend="sql-syntax-row-constructors">でより詳細に説明します。
 </para>
 </sect2>

 <sect2 id="rowtypes-accessing">
<!--
  <title>Accessing Composite Types</title>
-->
  <title>複合型へのアクセス</title>

 <para>
<!--
  To access a field of a composite column, one writes a dot and the field
  name, much like selecting a field from a table name.  In fact, it's so
  much like selecting from a table name that you often have to use parentheses
  to keep from confusing the parser.  For example, you might try to select
  some subfields from our <literal>on_hand</> example table with something
  like:
-->
複合型の列のフィールドにアクセスするには、テーブル名からフィールドを選択する場合とほぼ同様に、ドットとフィールド名を記述します。
実際、テーブル名からの選択とかなり似ていますので、パーサを混乱させないように括弧を使用しなければならないことがしばしばあります。
例えば、<literal>on_hand</>というテーブルの例からサブフィールドを選択しようとした場合、以下のように書くかもしれません。

<programlisting>
SELECT item.name FROM on_hand WHERE item.price &gt; 9.99;
</programlisting>

<!--
  This will not work since the name <literal>item</> is taken to be a table
  name, not a column name of <literal>on_hand</>, per SQL syntax rules.
  You must write it like this:
-->
これは、SQLの構文規則に従って<literal>item</>が<literal>on_hand</>の列名ではなくテーブル名として解釈されるため、動作しません。
以下のように記述しなければなりません。

<programlisting>
SELECT (item).name FROM on_hand WHERE (item).price &gt; 9.99;
</programlisting>

<!--
  or if you need to use the table name as well (for instance in a multitable
  query), like this:
-->
また、テーブル名も使用しなければならない場合（例えば複数テーブルに対する問い合わせ）、以下のようになります。

<programlisting>
SELECT (on_hand.item).name FROM on_hand WHERE (on_hand.item).price &gt; 9.99;
</programlisting>

<!--
  Now the parenthesized object is correctly interpreted as a reference to
  the <literal>item</> column, and then the subfield can be selected from it.
-->
これで、括弧で括られたオブジェクトは正しく<literal>item</>列への参照として解釈され、サブフィールドはそこから選択できるようになります。
 </para>

 <para>
<!--
  Similar syntactic issues apply whenever you select a field from a composite
  value.  For instance, to select just one field from the result of a function
  that returns a composite value, you'd need to write something like:
-->
似たような構文上の問題は、複合型からフィールドを選択する時、常に発生します。
例えば、複合型の値を返す関数の結果から1つだけフィールドを選択する場合、以下のように記述しなければなりません。

<programlisting>
SELECT (my_func(...)).field FROM ...
</programlisting>

<!--
  Without the extra parentheses, this will generate a syntax error.
-->
追加の括弧がないと、これは構文エラーを生成します。
 </para>

 <para>
  The special field name <literal>*</> means <quote>all fields</>, as
  further explained in <xref linkend="rowtypes-usage">.
 </para>
 </sect2>

 <sect2>
<!--
  <title>Modifying Composite Types</title>
-->
  <title>複合型の変更</title>

 <para>
<!--
  Here are some examples of the proper syntax for inserting and updating
  composite columns.
  First, inserting or updating a whole column:
-->
複合型の列への挿入と更新についての適切な構文の例をいくつか示します。
まず、列全体を挿入、更新する例です。

<programlisting>
INSERT INTO mytab (complex_col) VALUES((1.1,2.2));

UPDATE mytab SET complex_col = ROW(1.1,2.2) WHERE ...;
</programlisting>

<!--
  The first example omits <literal>ROW</>, the second uses it; we
  could have done it either way.
-->
最初の例では<literal>ROW</>を省略し、2番目の例では<literal>ROW</>を使用しています。
どちらの方法でも行うことができます。
 </para>

 <para>
<!--
  We can update an individual subfield of a composite column:
-->
以下のようにして、複合型の列の個々のサブフィールドを更新することができます。

<programlisting>
UPDATE mytab SET complex_col.r = (complex_col).r + 1 WHERE ...;
</programlisting>

<!--
  Notice here that we don't need to (and indeed cannot)
  put parentheses around the column name appearing just after
  <literal>SET</>, but we do need parentheses when referencing the same
  column in the expression to the right of the equal sign.
-->
ここで、<literal>SET</>直後の列名の周りに括弧を記述する必要がないこと（実際には記述できないこと）、しかし、等号の右で同じ列を参照する場合には括弧が必要なことに注意してください。
 </para>

 <para>
<!--
  And we can specify subfields as targets for <command>INSERT</>, too:
-->
また、<command>INSERT</>の対象としてサブフィールドを指定することもできます。

<programlisting>
INSERT INTO mytab (complex_col.r, complex_col.i) VALUES(1.1, 2.2);
</programlisting>

<!--
  Had we not supplied values for all the subfields of the column, the
  remaining subfields would have been filled with null values.
-->
列のサブフィールド全ての値を与えていなければ、残りのサブフィールドはNULL値になります。
 </para>
 </sect2>

 <sect2 id="rowtypes-usage">
  <title>Using Composite Types in Queries</title>

  <para>
   There are various special syntax rules and behaviors associated with
   composite types in queries.  These rules provide useful shortcuts,
   but can be confusing if you don't know the logic behind them.
  </para>

  <para>
   In <productname>PostgreSQL</>, a reference to a table name (or alias)
   in a query is effectively a reference to the composite value of the
   table's current row.  For example, if we had a table
   <structname>inventory_item</> as shown
   <link linkend="rowtypes-declaring">above</link>, we could write:
<programlisting>
SELECT c FROM inventory_item c;
</programlisting>
   This query produces a single composite-valued column, so we might get
   output like:
<programlisting>
           c
------------------------
 ("fuzzy dice",42,1.99)
(1 row)
</programlisting>
   Note however that simple names are matched to column names before table
   names, so this example works only because there is no column
   named <structfield>c</> in the query's tables.
  </para>

  <para>
   The ordinary qualified-column-name
   syntax <replaceable>table_name</><literal>.</><replaceable>column_name</>
   can be understood as applying <link linkend="field-selection">field
   selection</link> to the composite value of the table's current row.
   (For efficiency reasons, it's not actually implemented that way.)
  </para>

  <para>
   When we write
<programlisting>
SELECT c.* FROM inventory_item c;
</programlisting>
   then, according to the SQL standard, we should get the contents of the
   table expanded into separate columns:
<programlisting>
    name    | supplier_id | price
------------+-------------+-------
 fuzzy dice |          42 |  1.99
(1 row)
</programlisting>
   as if the query were
<programlisting>
SELECT c.name, c.supplier_id, c.price FROM inventory_item c;
</programlisting>
   <productname>PostgreSQL</> will apply this expansion behavior to
   any composite-valued expression, although as shown <link
   linkend="rowtypes-accessing">above</link>, you need to write parentheses
   around the value that <literal>.*</> is applied to whenever it's not a
   simple table name.  For example, if <function>myfunc()</> is a function
   returning a composite type with columns <structfield>a</>,
   <structfield>b</>, and <structfield>c</>, then these two queries have the
   same result:
<programlisting>
SELECT (myfunc(x)).* FROM some_table;
SELECT (myfunc(x)).a, (myfunc(x)).b, (myfunc(x)).c FROM some_table;
</programlisting>
  </para>

  <tip>
   <para>
    <productname>PostgreSQL</> handles column expansion by
    actually transforming the first form into the second.  So, in this
    example, <function>myfunc()</> would get invoked three times per row
    with either syntax.  If it's an expensive function you may wish to
    avoid that, which you can do with a query like:
<programlisting>
SELECT (m).* FROM (SELECT myfunc(x) AS m FROM some_table OFFSET 0) ss;
</programlisting>
    The <literal>OFFSET 0</> clause keeps the optimizer
    from <quote>flattening</> the sub-select to arrive at the form with
    multiple calls of <function>myfunc()</>.
   </para>
  </tip>

  <para>
   The <replaceable>composite_value</><literal>.*</> syntax results in
   column expansion of this kind when it appears at the top level of
   a <link linkend="queries-select-lists"><command>SELECT</> output
   list</link>, a <link linkend="dml-returning"><literal>RETURNING</>
   list</link> in <command>INSERT</>/<command>UPDATE</>/<command>DELETE</>,
   a <link linkend="queries-values"><literal>VALUES</> clause</link>, or
   a <link linkend="sql-syntax-row-constructors">row constructor</link>.
   In all other contexts (including when nested inside one of those
   constructs), attaching <literal>.*</> to a composite value does not
   change the value, since it means <quote>all columns</> and so the
   same composite value is produced again.  For example,
   if <function>somefunc()</> accepts a composite-valued argument,
   these queries are the same:

<programlisting>
SELECT somefunc(c.*) FROM inventory_item c;
SELECT somefunc(c) FROM inventory_item c;
</programlisting>

   In both cases, the current row of <structname>inventory_item</> is
   passed to the function as a single composite-valued argument.
   Even though <literal>.*</> does nothing in such cases, using it is good
   style, since it makes clear that a composite value is intended.  In
   particular, the parser will consider <literal>c</> in <literal>c.*</> to
   refer to a table name or alias, not to a column name, so that there is
   no ambiguity; whereas without <literal>.*</>, it is not clear
   whether <literal>c</> means a table name or a column name, and in fact
   the column-name interpretation will be preferred if there is a column
   named <literal>c</>.
  </para>

  <para>
   Another example demonstrating these concepts is that all these queries
   mean the same thing:
<programlisting>
SELECT * FROM inventory_item c ORDER BY c;
SELECT * FROM inventory_item c ORDER BY c.*;
SELECT * FROM inventory_item c ORDER BY ROW(c.*);
</programlisting>
   All of these <literal>ORDER BY</> clauses specify the row's composite
   value, resulting in sorting the rows according to the rules described
   in <xref linkend="composite-type-comparison">.  However,
   if <structname>inventory_item</> contained a column
   named <structfield>c</>, the first case would be different from the
   others, as it would mean to sort by that column only.  Given the column
   names previously shown, these queries are also equivalent to those above:
<programlisting>
SELECT * FROM inventory_item c ORDER BY ROW(c.name, c.supplier_id, c.price);
SELECT * FROM inventory_item c ORDER BY (c.name, c.supplier_id, c.price);
</programlisting>
   (The last case uses a row constructor with the key word <literal>ROW</>
   omitted.)
  </para>

  <para>
   Another special syntactical behavior associated with composite values is
   that we can use <firstterm>functional notation</> for extracting a field
   of a composite value.  The simple way to explain this is that
   the notations <literal><replaceable>field</>(<replaceable>table</>)</>
   and <literal><replaceable>table</>.<replaceable>field</></>
   are interchangeable.  For example, these queries are equivalent:

<programlisting>
SELECT c.name FROM inventory_item c WHERE c.price &gt; 1000;
SELECT name(c) FROM inventory_item c WHERE price(c) &gt; 1000;
</programlisting>

   Moreover, if we have a function that accepts a single argument of a
   composite type, we can call it with either notation.  These queries are
   all equivalent:

<programlisting>
SELECT somefunc(c) FROM inventory_item c;
SELECT somefunc(c.*) FROM inventory_item c;
SELECT c.somefunc FROM inventory_item c;
</programlisting>
  </para>

  <para>
   This equivalence between functional notation and field notation
   makes it possible to use functions on composite types to implement
   <quote>computed fields</>.
   <indexterm>
    <primary>computed field</primary>
   </indexterm>
   <indexterm>
    <primary>field</primary>
    <secondary>computed</secondary>
   </indexterm>
   An application using the last query above wouldn't need to be directly
   aware that <literal>somefunc</> isn't a real column of the table.
  </para>

  <tip>
   <para>
    Because of this behavior, it's unwise to give a function that takes a
    single composite-type argument the same name as any of the fields of
    that composite type.  If there is ambiguity, the field-name
    interpretation will be preferred, so that such a function could not be
    called without tricks.  One way to force the function interpretation is
    to schema-qualify the function name, that is, write
    <literal><replaceable>schema</>.<replaceable>func</>(<replaceable>compositevalue</>)</literal>.
   </para>
  </tip>
 </sect2>

 <sect2 id="rowtypes-io-syntax">
<!--
  <title>Composite Type Input and Output Syntax</title>
-->
  <title>複合型の入出力構文</title>

  <para>
<!--
   The external text representation of a composite value consists of items that
   are interpreted according to the I/O conversion rules for the individual
   field types, plus decoration that indicates the composite structure.
   The decoration consists of parentheses (<literal>(</> and <literal>)</>)
   around the whole value, plus commas (<literal>,</>) between adjacent
   items.  Whitespace outside the parentheses is ignored, but within the
   parentheses it is considered part of the field value, and might or might not be
   significant depending on the input conversion rules for the field data type.
   For example, in:
-->
複合型の外部テキスト表現は、個々のフィールド用のI/O変換規則に従って解釈される項目群と、複合構造を意味する修飾から構成されます。
この修飾は、値全体を括る括弧（<literal>(</>および<literal>)</>）と隣接した項目間のカンマ（<literal>,</>）で構成されます。
括弧の外側の空白文字は無視されますが、括弧の内部ではフィールド値の一部とみなされます。
ただし、空白に意味があるかないかについては、そのフィールドのデータ型用の入力変換規則に従います。
例えば、
<programlisting>
'(  42)'
</programlisting>
<!--
   the whitespace will be ignored if the field type is integer, but not if
   it is text.
-->
括弧内の空白文字は、そのフィールド型が整数の場合は無視されますが、テキストの場合は無視されません。
  </para>

  <para>
<!--
   As shown previously, when writing a composite value you can write double
   quotes around any individual field value.
   You <emphasis>must</> do so if the field value would otherwise
   confuse the composite-value parser.  In particular, fields containing
   parentheses, commas, double quotes, or backslashes must be double-quoted.
   To put a double quote or backslash in a quoted composite field value,
   precede it with a backslash.  (Also, a pair of double quotes within a
   double-quoted field value is taken to represent a double quote character,
   analogously to the rules for single quotes in SQL literal strings.)
   Alternatively, you can avoid quoting and use backslash-escaping to
   protect all data characters
   that would otherwise be taken as composite syntax.
-->
前述の通り、複合型の値を記述する時には、個々のフィールド値を二重引用符で括ることができます。
もし、フィールド値が複合型値用のパーサを混乱させる場合には、これは<emphasis>必須</>です。
具体的には、括弧、カンマ、二重引用符、バックスラッシュを含むフィールドの場合、二重引用符で括る必要があります。
引用符で括った複合型のフィールド値内に二重引用符やバックスラッシュが存在する場合、その前にバックスラッシュを付けてください
（また、引用符で括った複合型のフィールド値内に二重の引用符の組み合わせがあると、これは二重引用符を表す文字として解釈されます。
これは、SQLリテラル文字列内の単一引用符の規則と同じです）。
そのままでは複合型に対する構文として解釈されてしまう、全てのデータ文字を保護する他の方法として、引用符付けをせずにバックスラッシュによるエスケープを使用することができます。
  </para>

  <para>
<!--
   A completely empty field value (no characters at all between the commas
   or parentheses) represents a NULL.  To write a value that is an empty
   string rather than NULL, write <literal>""</>.
-->
完全な空フィールド値（カンマや括弧の間にまったく文字がないもの）はNULLを表します。
NULLではなく空文字列を値として記述するには <literal>""</> と記述してください。
  </para>

  <para>
<!--
   The composite output routine will put double quotes around field values
   if they are empty strings or contain parentheses, commas,
   double quotes, backslashes, or white space.  (Doing so for white space
   is not essential, but aids legibility.)  Double quotes and backslashes
   embedded in field values will be doubled.
-->
複合型の出力処理では、もしフィールド値が空文字列の場合や括弧、カンマ、二重引用符、バックスラッシュ、空白文字を含む場合には、そのフィールド値を二重引用符で括って出力します
（空白文字に対するこの処理は重要ではありませんが、可読性を高めます）。
フィールド値内に埋め込まれた二重引用符やバックスラッシュは二重化されます。
  </para>

 <note>
  <para>
<!--
   Remember that what you write in an SQL command will first be interpreted
   as a string literal, and then as a composite.  This doubles the number of
   backslashes you need (assuming escape string syntax is used).
   For example, to insert a <type>text</> field
   containing a double quote and a backslash in a composite
   value, you'd need to write:
-->
SQLコマンド内部に記述したものは、まず文字列リテラルとして、その後、複合型として解釈されることを覚えておいてください。
これは必要なバックスラッシュの数を倍にします（エスケープ文字列構文が使用されることを仮定しています）。
例えば、複合型の値の中に二重引用符とバックスラッシュを持つ<type>text</>フィールドに挿入するには、以下のように書かなければなりません。
<programlisting>
INSERT ... VALUES (E'("\\"\\\\")');
</programlisting>
<!--
   The string-literal processor removes one level of backslashes, so that
   what arrives at the composite-value parser looks like
   <literal>("\"\\")</>.  In turn, the string
   fed to the <type>text</> data type's input routine
   becomes <literal>"\</>.  (If we were working
   with a data type whose input routine also treated backslashes specially,
   <type>bytea</> for example, we might need as many as eight backslashes
   in the command to get one backslash into the stored composite field.)
   Dollar quoting (see <xref linkend="sql-syntax-dollar-quoting">) can be
   used to avoid the need to double backslashes.
-->
文字列リテラルプロセッサが第1レベルのバックスラッシュを取り除くため、複合型値のパーサに渡されるものは <literal>("\"\\")</> のようになります。
そして、<type>text</>データ型の入力関数に渡される文字列は<literal>"\</>になります
（もし、例えば<type>bytea</>といった、その入力関数もバックスラッシュを特別に扱うデータ型を扱っている場合、1つのバックスラッシュを複合型のフィールドに格納するためにコマンド内に8個ものバックスラッシュが必要になります）。
ドル引用符付け（<xref linkend="sql-syntax-dollar-quoting">を参照）を使用して、このバックスラッシュの二重化を防ぐことができます。
  </para>
 </note>

 <tip>
  <para>
<!--
   The <literal>ROW</> constructor syntax is usually easier to work with
   than the composite-literal syntax when writing composite values in SQL
   commands.
   In <literal>ROW</>, individual field values are written the same way
   they would be written when not members of a composite.
-->
SQLコマンド内に複合型の値を書く時、通常、<literal>ROW</>生成構文の方が複合型のリテラル構文より作業が簡単です。
<literal>ROW</>による記述では、複合型のメンバ以外の記述方法と同じ方法で個々のフィールド値を記述することができます。
  </para>
 </tip>
 </sect2>

</sect1>
