<!-- doc/src/sgml/ddl.sgml -->

<chapter id="ddl">
<!--
 <title>Data Definition</title>
-->
 <title>データ定義</title>

 <para>
<!--
  This chapter covers how one creates the database structures that
  will hold one's data.  In a relational database, the raw data is
  stored in tables, so the majority of this chapter is devoted to
  explaining how tables are created and modified and what features are
  available to control what data is stored in the tables.
  Subsequently, we discuss how tables can be organized into
  schemas, and how privileges can be assigned to tables.  Finally,
  we will briefly look at other features that affect the data storage,
  such as inheritance, views, functions, and triggers.
-->
本章では、データを保持するためのデータベース構造を作成する方法を説明します。
リレーショナルデータベースでは生データはテーブルに格納されます。
したがって、本章ではテーブルの作成と変更の方法や、テーブルにどのようなデータを格納するかを制御するための機能について重点的に解説します。
さらに、テーブルをスキーマに編成する方法、およびテーブルへの権限の割り当てについても説明します。
そして最後に、継承、ビュー、関数、およびトリガなど、データの格納に影響する機能について簡単に説明します。
 </para>

 <sect1 id="ddl-basics">
<!--
  <title>Table Basics</title>
-->
  <title>テーブルの基本</title>

  <indexterm zone="ddl-basics">
<!--
   <primary>table</primary>
-->
   <primary>テーブル</primary>
  </indexterm>

  <indexterm>
<!--
   <primary>row</primary>
-->
   <primary>行</primary>
  </indexterm>

  <indexterm>
<!--
   <primary>column</primary>
-->
   <primary>列</primary>
  </indexterm>

  <para>
<!--
   A table in a relational database is much like a table on paper: It
   consists of rows and columns.  The number and order of the columns
   is fixed, and each column has a name.  The number of rows is
   variable &mdash; it reflects how much data is stored at a given moment.
   SQL does not make any guarantees about the order of the rows in a
   table.  When a table is read, the rows will appear in an unspecified order,
   unless sorting is explicitly requested.  This is covered in <xref
   linkend="queries">.  Furthermore, SQL does not assign unique
   identifiers to rows, so it is possible to have several completely
   identical rows in a table.  This is a consequence of the
   mathematical model that underlies SQL but is usually not desirable.
   Later in this chapter we will see how to deal with this issue.
-->
リレーショナルデータベースのテーブルは、紙に書く表によく似ています。
テーブルは行と列からできています。
列の数と順序は固定されており、それぞれの列に名前が付けられています。
行の数は可変です。
つまり行の数とは、その時点でどれだけのデータが格納されているのかを示すものです。
SQLではテーブル内の行の順序は保証されません。
テーブルを読み込むと、明示的に並び替えが要求されない限り、行は不特定な順序で返されます。
これについては<xref linkend="queries">を参照してください。
さらに、SQLでは行に固有の識別子が割り当てられないので、テーブル内にまったく同一の行がいくつも存在することがあり得ます。
これは、SQLの基礎をなす算術モデルの結果ですが、通常は好ましいことではありません。
この問題の対処法については、本章で後述します。
  </para>

  <para>
<!--
   Each column has a data type.  The data type constrains the set of
   possible values that can be assigned to a column and assigns
   semantics to the data stored in the column so that it can be used
   for computations.  For instance, a column declared to be of a
   numerical type will not accept arbitrary text strings, and the data
   stored in such a column can be used for mathematical computations.
   By contrast, a column declared to be of a character string type
   will accept almost any kind of data but it does not lend itself to
   mathematical calculations, although other operations such as string
   concatenation are available.
-->
それぞれの列にデータ型があります。
データ型によって、列に割り当てられる値が制限されます。
また、列に格納されているデータに意味が割り当てられ、データを計算に使用できるようになります。
例えば、数値型と宣言された列は任意のテキスト文字列は受け付けません。
そして、数値型の列に格納されているデータは算術計算に使用できます。
これに対して、文字列型と宣言された列はほとんど全ての種類のデータを受け付けます。
しかし、文字列の結合といった演算には使用できますが、算術計算には使用できません。 
  </para>

  <para>
<!--
   <productname>PostgreSQL</productname> includes a sizable set of
   built-in data types that fit many applications.  Users can also
   define their own data types.  Most built-in data types have obvious
   names and semantics, so we defer a detailed explanation to <xref
   linkend="datatype">.  Some of the frequently used data types are
   <type>integer</type> for whole numbers, <type>numeric</type> for
   possibly fractional numbers, <type>text</type> for character
   strings, <type>date</type> for dates, <type>time</type> for
   time-of-day values, and <type>timestamp</type> for values
   containing both date and time.
-->
<productname>PostgreSQL</productname>には、様々なアプリケーションに対応した多数のデータ型の集合が組み込まれています。
またユーザが独自のデータ型を定義することも可能です。
組み込みデータ型のほとんどにはわかりやすい名前と意味が付けれられているので、詳しい説明はここでは行わず、<xref linkend="datatype">で行います。
よく使用されるデータ型としては、整数を表す<type>integer</type>、小数も表すことができる<type>numeric</type>、文字列を表す<type>text</type>、日付を表す<type>date</type>、時刻を表す<type>time</type>、そして日付と時間の両方を含む<type>timestamp</type>があります。 
  </para>

  <indexterm>
<!--
   <primary>table</primary>
   <secondary>creating</secondary>
-->
   <primary>テーブル</primary>
   <secondary>の作成</secondary>
  </indexterm>

  <para>
<!--
   To create a table, you use the aptly named <xref
   linkend="sql-createtable"> command.
   In this command you specify at least a name for the new table, the
   names of the columns and the data type of each column.  For
   example:
-->
テーブルを作成するには、その名の通り<xref linkend="sql-createtable">コマンドを使用します。
このコマンドで最低限指定する必要があるのは、新規テーブル名、列名、各列のデータ型です。
例を示します。
<programlisting>
CREATE TABLE my_first_table (
    first_column text,
    second_column integer
);
</programlisting>
<!--
   This creates a table named <literal>my_first_table</literal> with
   two columns.  The first column is named
   <literal>first_column</literal> and has a data type of
   <type>text</type>; the second column has the name
   <literal>second_column</literal> and the type <type>integer</type>.
   The table and column names follow the identifier syntax explained
   in <xref linkend="sql-syntax-identifiers">.  The type names are
   usually also identifiers, but there are some exceptions.  Note that the
   column list is comma-separated and surrounded by parentheses.
-->
これで2列からなる<literal>my_first_table</literal>という名前のテーブルが作成されます。
最初の列の名前は<literal>first_column</literal>で、そのデータ型は<type>text</type>です。
2番目の列の名前は<literal>second_column</literal>で、そのデータ型は<type>integer</type>です。
テーブル名および列名は、<xref linkend="sql-syntax-identifiers">で説明した識別子の構文に従います。
通常、型名は識別子でもありますが、例外もあります。
列リストはカンマで区切り、括弧で囲むことに注意してください。
  </para>

  <para>
<!--
   Of course, the previous example was heavily contrived.  Normally,
   you would give names to your tables and columns that convey what
   kind of data they store.  So let's look at a more realistic
   example:
-->
先ほどの例は、説明が目的であるため現実的ではありません。
通常、テーブルおよび列の名前は、どのようなデータが格納されているかわかるような名前にします。
以下に、より現実的な例を示します。
<programlisting>
CREATE TABLE products (
    product_no integer,
    name text,
    price numeric
);
</programlisting>
<!--
   (The <type>numeric</type> type can store fractional components, as
   would be typical of monetary amounts.)
-->
（<type>numeric</type>型は小数を格納することができ、金額を扱う場合はこれが一般的です。）
  </para>

  <tip>
   <para>
<!--
    When you create many interrelated tables it is wise to choose a
    consistent naming pattern for the tables and columns.  For
    instance, there is a choice of using singular or plural nouns for
    table names, both of which are favored by some theorist or other.
-->
相関するテーブルを数多く作成する場合は、テーブルと列の名前を一貫させるのが賢明です。
例えば、テーブル名に単数形あるいは複数形どちらの名詞を使用するかという選択肢があります（これは論者によって好みが分かれています）。
   </para>
  </tip>

  <para>
<!--
   There is a limit on how many columns a table can contain.
   Depending on the column types, it is between 250 and 1600.
   However, defining a table with anywhere near this many columns is
   highly unusual and often a questionable design.
-->
テーブルに含めることができる列の数には制限があります。
制限は、列の型に応じて250〜1600の間となります。
しかし、これほど多くの列を使用することは稀ですし、そのような場合は設計に問題があることも多いのです。
  </para>

  <indexterm>
<!--
   <primary>table</primary>
   <secondary>removing</secondary>
-->
   <primary>テーブル</primary>
   <secondary>の削除</secondary>
  </indexterm>

  <para>
<!--
   If you no longer need a table, you can remove it using the <xref
   linkend="sql-droptable"> command.
   For example:
-->
必要のないテーブルができた場合は、<xref linkend="sql-droptable">コマンドを使用してそのテーブルを削除できます。
例を示します。
<programlisting>
DROP TABLE my_first_table;
DROP TABLE products;
</programlisting>
<!--
   Attempting to drop a table that does not exist is an error.
   Nevertheless, it is common in SQL script files to unconditionally
   try to drop each table before creating it, ignoring any error
   messages, so that the script works whether or not the table exists.
   (If you like, you can use the <literal>DROP TABLE IF EXISTS</> variant
   to avoid the error messages, but this is not standard SQL.)
-->
存在しないテーブルを削除しようとすると、エラーになります。
もっともテーブルが存在するかどうか関係なくスクリプト全体を動作させることができるように、テーブルを作成する前に、エラーメッセージを無視して無条件に削除操作を行うことは、SQLスクリプトファイルではよく行われることです。
（この操作を行いたければ、エラーメッセージの出力を防ぐ<literal>DROP TABLE IF EXISTS</>という構文を使用することができます。
しかし、これは標準SQLではありません。）
  </para>

  <para>
<!--
   If you need to modify a table that already exists, see <xref
   linkend="ddl-alter"> later in this chapter.
-->
既に存在するテーブルを変更する方法については、本章で後述する<xref linkend="ddl-alter">を参照してください。
  </para>

  <para>
<!--
   With the tools discussed so far you can create fully functional
   tables.  The remainder of this chapter is concerned with adding
   features to the table definition to ensure data integrity,
   security, or convenience.  If you are eager to fill your tables with
   data now you can skip ahead to <xref linkend="dml"> and read the
   rest of this chapter later.
-->
これまでに説明したツールを使用して、十分に機能するテーブルを作成できます。
本章の残りでは、テーブル定義に機能を追加して、データの整合性、安全性、利便性を確実にする方法について述べていきます。
この時点でテーブルにデータを入力したければ、本章の残りを後回しにして<xref linkend="dml">に進んでも構いません。
  </para>
 </sect1>

 <sect1 id="ddl-default">
<!--
  <title>Default Values</title>
-->
  <title>デフォルト値</title>

  <indexterm zone="ddl-default">
<!--
   <primary>default value</primary>
-->
   <primary>デフォルト値</primary>
  </indexterm>

  <para>
<!--
   A column can be assigned a default value.  When a new row is
   created and no values are specified for some of the columns, those
   columns will be filled with their respective default values.  A
   data manipulation command can also request explicitly that a column
   be set to its default value, without having to know what that value is.
   (Details about data manipulation commands are in <xref linkend="dml">.)
-->
列にはデフォルトの値を割り当てることができます。
新しく作成された行のいくつかの列に値が指定されていない場合、そうした空欄にはそれぞれの列のデフォルト値が入ります。
データ操作コマンドを使用して、列を（どのような値かを把握する必要なく）デフォルト値に設定するように明示的に要求することもできます。
（データ操作コマンドの詳細については<xref linkend="dml">を参照してください。）
  </para>

  <para>
<!--
   <indexterm><primary>null value</primary><secondary>default value</secondary></indexterm>
   If no default value is declared explicitly, the default value is the
   null value.  This usually makes sense because a null value can
   be considered to represent unknown data.
-->
   <indexterm><primary>NULL値</primary><secondary>デフォルト値</secondary></indexterm>
明示的に宣言されたデフォルト値がない場合は、デフォルト値はNULL値になります。
NULL値は不明のデータを表すものとみなすことができるので、通常はこの方法で問題ありません。
  </para>

  <para>
<!--
   In a table definition, default values are listed after the column
   data type.  For example:
-->
テーブル定義では、デフォルト値は列データ型の後に列挙されています。
例を示します。
<programlisting>
CREATE TABLE products (
    product_no integer,
    name text,
    price numeric <emphasis>DEFAULT 9.99</emphasis>
);
</programlisting>
  </para>

  <para>
<!--
   The default value can be an expression, which will be
   evaluated whenever the default value is inserted
   (<emphasis>not</emphasis> when the table is created).  A common example
   is for a <type>timestamp</type> column to have a default of <literal>CURRENT_TIMESTAMP</>,
   so that it gets set to the time of row insertion.  Another common
   example is generating a <quote>serial number</> for each row.
   In <productname>PostgreSQL</productname> this is typically done by
   something like:
-->
デフォルト値を式にすることが可能で、それはデフォルト値が挿入される時はいつでも（テーブルが作成されたときでは<emphasis>ありません</emphasis>）評価されます。よくある例として、<type>timestamp</type>列が挿入時の時刻に設定されるように、その列はデフォルトの<literal>CURRENT_TIMESTAMP</>を持つことができます。もう1つの例としては、各行に<quote>通番</>を割り振る場合です。
<productname>PostgreSQL</productname>では、典型的に以下のように記述することにより生成されます。
<programlisting>
CREATE TABLE products (
    product_no integer <emphasis>DEFAULT nextval('products_product_no_seq')</emphasis>,
    ...
);
</programlisting>
<!--
   where the <literal>nextval()</> function supplies successive values
   from a <firstterm>sequence object</> (see <xref
   linkend="functions-sequence">). This arrangement is sufficiently common
   that there's a special shorthand for it:
-->
ここで、<literal>nextval()</>関数が、<firstterm>シーケンスオブジェクト</>から連続した値を生成します（<xref linkend="functions-sequence">を参照してください）。特に省略した形として以下のようにも記述できます。
<programlisting>
CREATE TABLE products (
    product_no <emphasis>SERIAL</emphasis>,
    ...
);
</programlisting>
<!--
   The <literal>SERIAL</> shorthand is discussed further in <xref
   linkend="datatype-serial">.
-->
省略形である<literal>SERIAL</>は<xref linkend="datatype-serial">で詳しく述べられています。
  </para>
 </sect1>

 <sect1 id="ddl-constraints">
<!--
  <title>Constraints</title>
-->
  <title>制約</title>

  <indexterm zone="ddl-constraints">
<!--
   <primary>constraint</primary>
-->
   <primary>制約</primary>
  </indexterm>

  <para>
<!--
   Data types are a way to limit the kind of data that can be stored
   in a table.  For many applications, however, the constraint they
   provide is too coarse.  For example, a column containing a product
   price should probably only accept positive values.  But there is no
   standard data type that accepts only positive numbers.  Another issue is
   that you might want to constrain column data with respect to other
   columns or rows.  For example, in a table containing product
   information, there should be only one row for each product number.
-->
データ型は、テーブルに格納するデータの種類を限定するための方法です。
しかし、多くのアプリケーションでは、型が提供する制約では精密さに欠けます。
例えば、製品の価格が入る列には、おそらく正数のみを受け入れるようにする必要があります。
しかし、正数のみを受け入れるという標準のデータ型はありません。
また、他の列や行に関連して列データを制約したい場合もあります。
例えば、製品の情報が入っているテーブルでは、1つの製品番号についての行が2行以上あってはなりません。
  </para>

  <para>
<!--
   To that end, SQL allows you to define constraints on columns and
   tables.  Constraints give you as much control over the data in your
   tables as you wish.  If a user attempts to store data in a column
   that would violate a constraint, an error is raised.  This applies
   even if the value came from the default value definition.
-->
このような問題を解決するため、SQLでは列およびテーブルに対する制約を定義することができます。
制約によってテーブル内のデータを自由に制御することができます。
制約に違反するデータを列に格納しようとすると、エラーとなります。
このことは、デフォルト値として定義された値を格納する場合にも適用されます。
  </para>

  <sect2 id="ddl-constraints-check-constraints">
<!--
   <title>Check Constraints</title>
-->
   <title>検査制約</title>

   <indexterm>
<!--
    <primary>check constraint</primary>
-->
    <primary>検査制約</primary>
   </indexterm>

   <indexterm>
<!--
    <primary>constraint</primary>
    <secondary>check</secondary>
-->
    <primary>制約</primary>
    <secondary>検査</secondary>
   </indexterm>

   <para>
<!--
    A check constraint is the most generic constraint type.  It allows
    you to specify that the value in a certain column must satisfy a
    Boolean (truth-value) expression.  For instance, to require positive
    product prices, you could use:
-->
検査制約は最も一般的な制約の種類です。
これを使用して、特定の列の値が論理値の式を満たす（真の値）ように指定できます。
例えば、製品価格を必ず正数にするには以下のようにします。
<programlisting>
CREATE TABLE products (
    product_no integer,
    name text,
    price numeric <emphasis>CHECK (price &gt; 0)</emphasis>
);
</programlisting>
   </para>

   <para>
<!--
    As you see, the constraint definition comes after the data type,
    just like default value definitions.  Default values and
    constraints can be listed in any order.  A check constraint
    consists of the key word <literal>CHECK</literal> followed by an
    expression in parentheses.  The check constraint expression should
    involve the column thus constrained, otherwise the constraint
    would not make too much sense.
-->
このように、制約の定義はデフォルト値の定義と同様に、データ型の後にきます。
デフォルト値と制約は任意の順序で列挙できます。
検査制約は<literal>CHECK</literal>キーワードの後に続く括弧で囲まれた式で構成されます。
検査制約式には、制約される列を含む必要があります。
そうしないと、制約はあまり意味のないものになります。
   </para>

   <indexterm>
<!--
    <primary>constraint</primary>
    <secondary>name</secondary>
-->
    <primary>制約</primary>
    <secondary>の名前</secondary>
   </indexterm>

   <para>
<!--
    You can also give the constraint a separate name.  This clarifies
    error messages and allows you to refer to the constraint when you
    need to change it.  The syntax is:
-->
制約に個別に名前を付けることもできます。
名前を付けることで、エラーメッセージがわかりやすくなりますし、変更したい制約を参照できるようになります。
構文は以下の通りです。
<programlisting>
CREATE TABLE products (
    product_no integer,
    name text,
    price numeric <emphasis>CONSTRAINT positive_price</emphasis> CHECK (price &gt; 0)
);
</programlisting>
<!--
    So, to specify a named constraint, use the key word
    <literal>CONSTRAINT</literal> followed by an identifier followed
    by the constraint definition.  (If you don't specify a constraint
    name in this way, the system chooses a name for you.)
-->
上記のように、名前付き制約の指定は<literal>CONSTRAINT</literal>キーワードで始め、これに識別子、制約定義と続きます。
（この方法で制約名を指定しない場合は、システムにより名前が付けられます。）
   </para>

   <para>
<!--
    A check constraint can also refer to several columns.  Say you
    store a regular price and a discounted price, and you want to
    ensure that the discounted price is lower than the regular price:
-->
検査制約では複数の列を参照することもできます。
例えば、通常価格と割引価格を格納する場合に、必ず割引価格が通常価格よりも低くなるようにしたいとします。
<programlisting>
CREATE TABLE products (
    product_no integer,
    name text,
    price numeric CHECK (price &gt; 0),
    discounted_price numeric CHECK (discounted_price &gt; 0),
    <emphasis>CHECK (price &gt; discounted_price)</emphasis>
);
</programlisting>
   </para>

   <para>
<!--
    The first two constraints should look familiar.  The third one
    uses a new syntax.  It is not attached to a particular column,
    instead it appears as a separate item in the comma-separated
    column list.  Column definitions and these constraint
    definitions can be listed in mixed order.
-->
最初の2つの制約は上で説明した通りです。
3つ目の制約では新しい構文を使っています。
これは特定の列に付加されるのではなく、カンマで区切られた列リスト内の別個の項目として現れます。
列定義およびこれらの制約定義は、任意の順序で列挙することができます。
   </para>

   <para>
<!--
    We say that the first two constraints are column constraints, whereas the
    third one is a table constraint because it is written separately
    from any one column definition.  Column constraints can also be
    written as table constraints, while the reverse is not necessarily
    possible, since a column constraint is supposed to refer to only the
    column it is attached to.  (<productname>PostgreSQL</productname> doesn't
    enforce that rule, but you should follow it if you want your table
    definitions to work with other database systems.)  The above example could
    also be written as:
-->
最初の2つの制約を列制約と言います。これに対し、3つ目の制約は列定義とは別個に書かれるので、テーブル制約と言います。
列制約をテーブル制約として書くことはできますが、その逆はできる場合とできない場合があります。なぜなら列制約は、制約に関連付けられている列のみを参照するためです（<productname>PostgreSQL</productname>はこの規則を強制しません。しかし他のデータベースシステムと協調して稼動させたい場合はこの規則に従ってください）。
上の例は、以下のように書くこともできます。
<programlisting>
CREATE TABLE products (
    product_no integer,
    name text,
    price numeric,
    CHECK (price &gt; 0),
    discounted_price numeric,
    CHECK (discounted_price &gt; 0),
    CHECK (price &gt; discounted_price)
);
</programlisting>
<!--
    or even:
-->
あるいは、次のようにもできます。
<programlisting>
CREATE TABLE products (
    product_no integer,
    name text,
    price numeric CHECK (price &gt; 0),
    discounted_price numeric,
    CHECK (discounted_price &gt; 0 AND price &gt; discounted_price)
);
</programlisting>
<!--
    It's a matter of taste.
-->
どのようにするかは好みの問題です。
   </para>

   <para>
<!--
    Names can be assigned to table constraints in the same way as
    column constraints:
-->
列制約と同様に、テーブル制約に名前を割り当てることができます。
<programlisting>
CREATE TABLE products (
    product_no integer,
    name text,
    price numeric,
    CHECK (price &gt; 0),
    discounted_price numeric,
    CHECK (discounted_price &gt; 0),
    <emphasis>CONSTRAINT valid_discount</> CHECK (price &gt; discounted_price)
);
</programlisting>
   </para>

   <indexterm>
<!--
    <primary>null value</primary>
    <secondary sortas="check constraints">with check constraints</secondary>
-->
    <primary>NULL値</primary>
    <secondary sortas="check constraints">検査制約</secondary>
   </indexterm>

   <para>
<!--
    It should be noted that a check constraint is satisfied if the
    check expression evaluates to true or the null value.  Since most
    expressions will evaluate to the null value if any operand is null,
    they will not prevent null values in the constrained columns.  To
    ensure that a column does not contain null values, the not-null
    constraint described in the next section can be used.
-->
検査制約では、検査式が真またはNULL値と評価された場合に、条件が満たされることに注意して下さい。
ほとんどの式は、演算項目に一つでもNULLがあればNULLと評価されるので、検査制約では制約対象の列にNULL値が入るのを防げません。
列がNULL値を含まないようにするために、次節で説明する非NULL制約を使用することができます。

   </para>
  </sect2>

  <sect2>
<!--
   <title>Not-Null Constraints</title>
-->
   <title>非NULL制約</title>

   <indexterm>
<!--
    <primary>not-null constraint</primary>
-->
    <primary>非NULL制約</primary>
   </indexterm>

   <indexterm>
<!--
    <primary>constraint</primary>
    <secondary>NOT NULL</secondary>
-->
    <primary>制約</primary>
    <secondary>非NULL</secondary>
   </indexterm>

   <para>
<!--
    A not-null constraint simply specifies that a column must not
    assume the null value.  A syntax example:
-->
非NULL制約は単純に、列がNULL値を取らないことを指定します。
構文の例は以下の通りです。
<programlisting>
CREATE TABLE products (
    product_no integer <emphasis>NOT NULL</emphasis>,
    name text <emphasis>NOT NULL</emphasis>,
    price numeric
);
</programlisting>
   </para>

   <para>
<!--
    A not-null constraint is always written as a column constraint.  A
    not-null constraint is functionally equivalent to creating a check
    constraint <literal>CHECK (<replaceable>column_name</replaceable>
    IS NOT NULL)</literal>, but in
    <productname>PostgreSQL</productname> creating an explicit
    not-null constraint is more efficient.  The drawback is that you
    cannot give explicit names to not-null constraints created this
    way.
-->
非NULL制約は常に列制約として記述されます。
非NULL制約は<literal>CHECK (<replaceable>column_name</replaceable> IS NOT NULL)</literal>という検査制約と機能的には同等ですが、<productname>PostgreSQL</productname>では、明示的に非NULL制約を作成する方がより効果的です。
このように作成された非NULL制約に明示的な名前を付けられないのが欠点です。
   </para>

   <para>
<!--
    Of course, a column can have more than one constraint.  Just write
    the constraints one after another:
-->
もちろん、1つの列に複数の制約を適用することもできます。
そのためには、次々と制約を書いていくだけです。
<programlisting>
CREATE TABLE products (
    product_no integer NOT NULL,
    name text NOT NULL,
    price numeric NOT NULL CHECK (price &gt; 0)
);
</programlisting>
<!--
    The order doesn't matter.  It does not necessarily determine in which
    order the constraints are checked.
-->
順序は関係ありません。
書かれた順序と検査される順序は必ずしも同じではありません。
   </para>

   <para>
<!--
    The <literal>NOT NULL</literal> constraint has an inverse: the
    <literal>NULL</literal> constraint.  This does not mean that the
    column must be null, which would surely be useless.  Instead, this
    simply selects the default behavior that the column might be null.
    The <literal>NULL</literal> constraint is not present in the SQL
    standard and should not be used in portable applications.  (It was
    only added to <productname>PostgreSQL</productname> to be
    compatible with some other database systems.)  Some users, however,
    like it because it makes it easy to toggle the constraint in a
    script file.  For example, you could start with:
-->
<literal>NOT NULL</literal>制約に対し、逆のパターンである<literal>NULL</literal>制約があります。
これは、列がNULLでなければならないということではありません。
そのような制約は意味がありません。
この制約は、列がNULLであってもよいというデフォルトの振舞いを選択するだけのものです。
<literal>NULL</literal>制約は標準SQLには存在しませんので、移植予定のアプリケーションでは使用すべきではありません。
（これは、<productname>PostgreSQL</productname>と他の一部のデータベースシステムとの互換性のために追加された機能に過ぎません。）
もっとも、スクリプトファイルでの制約の切り替えが簡単であるという理由でこの機能を歓迎するユーザもいます。
例えば、最初に
<programlisting>
CREATE TABLE products (
    product_no integer NULL,
    name text NULL,
    price numeric NULL
);
</programlisting>
<!--
    and then insert the <literal>NOT</literal> key word where desired.
-->
と書いてから、必要な場所に<literal>NOT</literal>キーワードを挿入することができます。
   </para>

   <tip>
    <para>
<!--
     In most database designs the majority of columns should be marked
     not null.
-->
ほとんどのデータベース設計において、列の大多数をNOT NULLとマークする必要があります。
    </para>
   </tip>
  </sect2>

  <sect2 id="ddl-constraints-unique-constraints">
<!--
   <title>Unique Constraints</title>
-->
   <title>一意性制約</title>

   <indexterm>
<!--
    <primary>unique constraint</primary>
-->
    <primary>一意性制約</primary>
   </indexterm>

   <indexterm>
<!--
    <primary>constraint</primary>
    <secondary>unique</secondary>
-->
    <primary>制約</primary>
    <secondary>一意性</secondary>
   </indexterm>

   <para>
<!--
    Unique constraints ensure that the data contained in a column or a
    group of columns is unique with respect to all the rows in the
    table.  The syntax is:
-->
一意性制約によって、列あるいは列のグループに含まれるデータが、テーブル内の全ての行で一意であることを確実にします。
列制約の場合の構文は以下の通りです。
<programlisting>
CREATE TABLE products (
    product_no integer <emphasis>UNIQUE</emphasis>,
    name text,
    price numeric
);
</programlisting>
<!--
    when written as a column constraint, and:
-->
また、テーブル制約の場合の構文は
<programlisting>
CREATE TABLE products (
    product_no integer,
    name text,
    price numeric,
    <emphasis>UNIQUE (product_no)</emphasis>
);
</programlisting>
<!--
    when written as a table constraint.
-->
となります。
   </para>

   <para>
<!--
    If a unique constraint refers to a group of columns, the columns
    are listed separated by commas:
-->
一意性制約が列のグループを参照する場合、各列はカンマで区切って列挙します。
<programlisting>
CREATE TABLE example (
    a integer,
    b integer,
    c integer,
    <emphasis>UNIQUE (a, c)</emphasis>
);
</programlisting>
<!--
    This specifies that the combination of values in the indicated columns
    is unique across the whole table, though any one of the columns
    need not be (and ordinarily isn't) unique.
-->
これは、指定された列の値の組み合わせがテーブル全体で一意であることを指定しています。
しかし、列の片方が一意である必要はありません（通常一意ではありません）。
   </para>

   <para>
<!--
    You can assign your own name for a unique constraint, in the usual way:
-->
一意性制約には、いつものように名前を割り当てることもできます。
<programlisting>
CREATE TABLE products (
    product_no integer <emphasis>CONSTRAINT must_be_different</emphasis> UNIQUE,
    name text,
    price numeric
);
</programlisting>
   </para>

   <para>
<!--
    Adding a unique constraint will automatically create a unique btree
    index on the column or group of columns used in the constraint.
-->
一意性制約を追加すると、制約で使われる列または列のグループに対して一意的なbtreeインデックスが自動的に作られます。
   </para>

   <indexterm>
<!--
    <primary>null value</primary>
    <secondary sortas="unique constraints">with unique constraints</secondary>
-->
    <primary>NULL値</primary>
    <secondary sortas="unique constraints">一意性制約</secondary>
   </indexterm>

   <para>
<!--
    In general, a unique constraint is violated when there is more than
    one row in the table where the values of all of the
    columns included in the constraint are equal.
    However, two null values are not considered equal in this
    comparison.  That means even in the presence of a
    unique constraint it is possible to store duplicate
    rows that contain a null value in at least one of the constrained
    columns.  This behavior conforms to the SQL standard, but we have
    heard that other SQL databases might not follow this rule.  So be
    careful when developing applications that are intended to be
    portable.
-->
一般に、制約の対象となる列について同じ値を持つ行が、テーブル内に１行を上回る場合は、一意性制約違反になります。 
しかし、この比較では2つのNULL値は等価とはみなされません。
つまり、一意性制約があったとしても、制約対象の列の少なくとも1つにNULL値を持つ行を複数格納することができるということです。
この振舞いは標準SQLに準拠していますが、この規則に従わないSQLデータベースがあることを聞いたことがあります。
ですから、移植する予定のアプリケーションを開発する際には注意してください。
   </para>
  </sect2>

  <sect2 id="ddl-constraints-primary-keys">
<!--
   <title>Primary Keys</title>
-->
   <title>プライマリキー</title>

   <indexterm>
<!--
    <primary>primary key</primary>
-->
    <primary>プライマリキー</primary>
   </indexterm>

   <indexterm>
<!--
    <primary>constraint</primary>
    <secondary>primary key</secondary>
-->
    <primary>制約</primary>
    <secondary>プライマリキー</secondary>
   </indexterm>

   <para>
<!--
    Technically, a primary key constraint is simply a combination of a
    unique constraint and a not-null constraint.  So, the following
    two table definitions accept the same data:
-->
技術的には、プライマリキー制約は単純に一意性制約と非NULL制約を組み合わせたものです。
つまり、次の2つのテーブル定義は同じデータを受け入れます。
<programlisting>
CREATE TABLE products (
    product_no integer UNIQUE NOT NULL,
    name text,
    price numeric
);
</programlisting>

<programlisting>
CREATE TABLE products (
    product_no integer <emphasis>PRIMARY KEY</emphasis>,
    name text,
    price numeric
);
</programlisting>
   </para>

   <para>
<!--
    Primary keys can also constrain more than one column; the syntax
    is similar to unique constraints:
-->
プライマリキーでも複数の列を制約することができ、その構文は一意性制約に似ています。
<programlisting>
CREATE TABLE example (
    a integer,
    b integer,
    c integer,
    <emphasis>PRIMARY KEY (a, c)</emphasis>
);
</programlisting>
   </para>

   <para>
<!--
    A primary key indicates that a column or group of columns can be
    used as a unique identifier for rows in the table.  (This is a
    direct consequence of the definition of a primary key.  Note that
    a unique constraint does not, by itself, provide a unique identifier
    because it does not exclude null values.)  This is useful both for
    documentation purposes and for client applications.  For example,
    a GUI application that allows modifying row values probably needs
    to know the primary key of a table to be able to identify rows
    uniquely.
-->
プライマリキーは、列または列のグループを、テーブル内で行の一意の識別子として使用できることを示します
（このことは、プライマリキーの定義からの直接の帰結です。
一意性制約ではNULL値を除外しないため、一意の識別子が提供されないことに注意してください。）
これは文書化、および、クライアントアプリケーションの両方の面で役に立ちます。
例えば、行値の変更が可能なGUIアプリケーションが行を一意的に特定するためには、おそらくテーブルのプライマリキーを知る必要があります。
   </para>

   <para>
<!--
    Adding a primary key will automatically create a unique btree index
    on the column or group of columns used in the primary key.
-->
プライマリキーを追加すると、プライマリキーで使われる列または列のグループに対して一意的なbtreeインデックスが自動的に作られます。
   </para>

   <para>
<!--
    A table can have at most one primary key.  (There can be any number
    of unique and not-null constraints, which are functionally the same
    thing, but only one can be identified as the primary key.)
    Relational database theory
    dictates that every table must have a primary key.  This rule is
    not enforced by <productname>PostgreSQL</productname>, but it is
    usually best to follow it.
-->
1つのテーブルは最大1つのプライマリキーを持つことができます。
（一意性制約および非NULL制約には個数の制限はありません。
機能的には同じものですが、プライマリキーとして識別される制約は1つのみです。）
リレーショナルデータベース理論では、全てのテーブルにプライマリキーが1つ必要とされています。
この規則は<productname>PostgreSQL</productname>では強制されませんが、たいていの場合はこれに従うことが推奨されます。
   </para>
  </sect2>

  <sect2 id="ddl-constraints-fk">
<!--
   <title>Foreign Keys</title>
-->
   <title>外部キー</title>

   <indexterm>
<!--
    <primary>foreign key</primary>
-->
    <primary>外部キー</primary>
   </indexterm>

   <indexterm>
<!--
    <primary>constraint</primary>
    <secondary>foreign key</secondary>
-->
    <primary>制約</primary>
    <secondary>外部キー</secondary>
   </indexterm>

   <indexterm>
<!--
    <primary>referential integrity</primary>
-->
    <primary>参照整合性</primary>
   </indexterm>

   <para>
<!--
    A foreign key constraint specifies that the values in a column (or
    a group of columns) must match the values appearing in some row
    of another table.
    We say this maintains the <firstterm>referential
    integrity</firstterm> between two related tables.
-->
外部キー制約は、列（または列のグループ）の値が、他のテーブルの行の値と一致しなければならないことを指定します。
これによって関連する2つのテーブルの<firstterm>参照整合性</firstterm>が維持されます。
   </para>

   <para>
<!--
    Say you have the product table that we have used several times already:
-->
これでまで何度か例に使用したproductsテーブルについて考えてみます。
<programlisting>
CREATE TABLE products (
    product_no integer PRIMARY KEY,
    name text,
    price numeric
);
</programlisting>
<!--
    Let's also assume you have a table storing orders of those
    products.  We want to ensure that the orders table only contains
    orders of products that actually exist.  So we define a foreign
    key constraint in the orders table that references the products
    table:
-->
また、これらの製品に対する注文を格納するテーブルも作成済みだとしましょう。
この注文のordersテーブルには実際に存在する製品の注文のみを格納したいと思っています。
そこで、productsテーブルを参照するordersテーブルに外部キー制約を定義します。
<programlisting>
CREATE TABLE orders (
    order_id integer PRIMARY KEY,
    product_no integer <emphasis>REFERENCES products (product_no)</emphasis>,
    quantity integer
);
</programlisting>
<!--
    Now it is impossible to create orders with non-NULL
    <structfield>product_no</structfield> entries that do not appear in the
    products table.
-->
これで、productsテーブルに存在しない非NULLの<structfield>product_no</structfield>項目を使用して注文を作成することはできなくなります。
   </para>

   <para>
<!--
    We say that in this situation the orders table is the
    <firstterm>referencing</firstterm> table and the products table is
    the <firstterm>referenced</firstterm> table.  Similarly, there are
    referencing and referenced columns.
-->
このような場合に、ordersテーブルのことを<firstterm>参照</firstterm>テーブル、productテーブルのことを<firstterm>被参照</firstterm>テーブルと呼びます。
同様に、参照列と被参照列もあります。
   </para>

   <para>
<!--
    You can also shorten the above command to:
-->
上記のコマンドは、次のように短縮することもできます。
<programlisting>
CREATE TABLE orders (
    order_id integer PRIMARY KEY,
    product_no integer <emphasis>REFERENCES products</emphasis>,
    quantity integer
);
</programlisting>
<!--
    because in absence of a column list the primary key of the
    referenced table is used as the referenced column(s).
-->
列リストがないため、被参照テーブルのプライマリキーが被参照列（複数可）として使用されます。
   </para>

   <para>
<!--
    A foreign key can also constrain and reference a group of columns.
    As usual, it then needs to be written in table constraint form.
    Here is a contrived syntax example:
-->
外部キーでも、列のグループを制約したり参照したりすることもできます。
これもまた、テーブル制約の形式で記述する必要があります。
以下は、説明のための非現実的な例です。
<programlisting>
CREATE TABLE t1 (
  a integer PRIMARY KEY,
  b integer,
  c integer,
  <emphasis>FOREIGN KEY (b, c) REFERENCES other_table (c1, c2)</emphasis>
);
</programlisting>
<!--
    Of course, the number and type of the constrained columns need to
    match the number and type of the referenced columns.
-->
もちろん、制約される列数および型は、被参照列の数および型と一致しなければなりません。
   </para>

   <para>
<!--
    You can assign your own name for a foreign key constraint,
    in the usual way.
-->
外部キーには、以下のようにして名前を割り当てることもできます。
   </para>

   <para>
<!--
    A table can have more than one foreign key constraint.  This is
    used to implement many-to-many relationships between tables.  Say
    you have tables about products and orders, but now you want to
    allow one order to contain possibly many products (which the
    structure above did not allow).  You could use this table structure:
-->
テーブルは複数の外部キー制約を持つことができます。
このことはテーブル間の多対多関係を実装するために使用されます。
例えば、製品と注文に関するそれぞれのテーブルがある場合に、複数の製品にまたがる注文を可能にしたいとします
（上の例の構造では不可能です）。
この場合、次のテーブル構造を使用できます。
<programlisting>
CREATE TABLE products (
    product_no integer PRIMARY KEY,
    name text,
    price numeric
);

CREATE TABLE orders (
    order_id integer PRIMARY KEY,
    shipping_address text,
    ...
);

CREATE TABLE order_items (
    product_no integer REFERENCES products,
    order_id integer REFERENCES orders,
    quantity integer,
    PRIMARY KEY (product_no, order_id)
);
</programlisting>
<!--
    Notice that the primary key overlaps with the foreign keys in
    the last table.
-->
最後のテーブルで、プライマリキーと外部キーが重なっていることに注目してください。
   </para>

   <indexterm>
    <primary>CASCADE</primary>
<!--
    <secondary>foreign key action</secondary>
-->
    <secondary>外部キー動作</secondary>
   </indexterm>

   <indexterm>
    <primary>RESTRICT</primary>
<!--
    <secondary>foreign key action</secondary>
-->
    <secondary>外部キー動作</secondary>
   </indexterm>

   <para>
<!--
    We know that the foreign keys disallow creation of orders that
    do not relate to any products.  But what if a product is removed
    after an order is created that references it?  SQL allows you to
    handle that as well.  Intuitively, we have a few options:
-->
外部キーが製品に関連付けられていない注文の作成を許可しないことは、既に説明した通りです。
しかし、ある注文で参照していた製品が、注文後に削除されたらどうなるでしょう。
SQLではこのような場合も扱うことができます。
直感的に、いくつかのオプションが考えられます。
    <itemizedlist spacing="compact">
<!--
     <listitem><para>Disallow deleting a referenced product</para></listitem>
     <listitem><para>Delete the orders as well</para></listitem>
     <listitem><para>Something else?</para></listitem>
-->
     <listitem><para>参照される製品の削除を許可しない</para></listitem>
     <listitem><para>注文も一緒に削除する</para></listitem>
     <listitem><para>他にもありますか？</para></listitem>
    </itemizedlist>
   </para>

   <para>
<!--
    To illustrate this, let's implement the following policy on the
    many-to-many relationship example above: when someone wants to
    remove a product that is still referenced by an order (via
    <literal>order_items</literal>), we disallow it.  If someone
    removes an order, the order items are removed as well:
-->
具体例として、上の例の多対多関係に次のポリシーを実装してみましょう。
（<literal>order_items</literal>によって）注文で参照されたままの製品を削除しようしても、この操作を行えないようにします。
注文が削除されると、注文項目も削除されます。
<programlisting>
CREATE TABLE products (
    product_no integer PRIMARY KEY,
    name text,
    price numeric
);

CREATE TABLE orders (
    order_id integer PRIMARY KEY,
    shipping_address text,
    ...
);

CREATE TABLE order_items (
    product_no integer REFERENCES products <emphasis>ON DELETE RESTRICT</emphasis>,
    order_id integer REFERENCES orders <emphasis>ON DELETE CASCADE</emphasis>,
    quantity integer,
    PRIMARY KEY (product_no, order_id)
);
</programlisting>
   </para>

   <para>
<!--
    Restricting and cascading deletes are the two most common options.
    <literal>RESTRICT</literal> prevents deletion of a
    referenced row. <literal>NO ACTION</literal> means that if any
    referencing rows still exist when the constraint is checked, an error
    is raised; this is the default behavior if you do not specify anything.
    (The essential difference between these two choices is that
    <literal>NO ACTION</literal> allows the check to be deferred until
    later in the transaction, whereas <literal>RESTRICT</literal> does not.)
    <literal>CASCADE</> specifies that when a referenced row is deleted,
    row(s) referencing it should be automatically deleted as well.
    There are two other options:
    <literal>SET NULL</literal> and <literal>SET DEFAULT</literal>.
    These cause the referencing column(s) in the referencing row(s)
    to be set to nulls or their default
    values, respectively, when the referenced row is deleted.
    Note that these do not excuse you from observing any constraints.
    For example, if an action specifies <literal>SET DEFAULT</literal>
    but the default value would not satisfy the foreign key constraint, the
    operation will fail.
-->
削除の制限およびカスケードという2つは、最も一般的なオプションです。
<literal>RESTRICT</literal>は、被参照行が削除されるのを防ぎます。
<literal>NO ACTION</literal>は、制約が検査された時に参照行がまだ存在していた場合に、エラーとなることを意味しています。
これは、何も指定しない場合のデフォルトの振舞いとなります
（これらの本来の違いは、<literal>NO ACTION</literal>では検査をトランザクション中で後回しにすることができるのに対し、<literal>RESTRICT</literal>では後回しにできないということです）。
<literal>CASCADE</>は被参照行が削除された時、それを参照する行（複数可）も同様に削除されなければならないことを指定します。
他にも2つのオプションがあります。
<literal>SET NULL</literal>と<literal>SET DEFAULT</literal>です。
これらは、被参照行が削除された際に、参照行の参照列がそれぞれNULLか各列のデフォルト値に設定されるようになります。
これらは制約を守ることを免除することではない、ということに注意してください。
例えば、動作に<literal>SET DEFAULT</literal>を指定したとしても、デフォルト値が外部キー制約を満たさない場合には操作は失敗します。
   </para>

   <para>
<!--
    Analogous to <literal>ON DELETE</literal> there is also
    <literal>ON UPDATE</literal> which is invoked when a referenced
    column is changed (updated).  The possible actions are the same.
    In this case, <literal>CASCADE</> means that the updated values of the
    referenced column(s) should be copied into the referencing row(s).
-->
<literal>ON DELETE</literal>に似たもので、被参照列が変更（更新）された時に呼び出される<literal>ON UPDATE</literal>もあります。
これらが行えるアクションは同じです。
この場合、<literal>CASCADE</>は被参照列の更新後の値が参照行にコピーされることを意味します。
   </para>

   <para>
<!--
    Normally, a referencing row need not satisfy the foreign key constraint
    if any of its referencing columns are null.  If <literal>MATCH FULL</>
    is added to the foreign key declaration, a referencing row escapes
    satisfying the constraint only if all its referencing columns are null
    (so a mix of null and non-null values is guaranteed to fail a
    <literal>MATCH FULL</> constraint).  If you don't want referencing rows
    to be able to avoid satisfying the foreign key constraint, declare the
    referencing column(s) as <literal>NOT NULL</>.
-->
通常、参照行はその参照列のいずれかがnullの場合は外部キー制約を満たす必要があります。
もし<literal>MATCH FULL</>が外部キー宣言に追加された場合、その参照列の全てがnullの場合にのみ参照行は制約を満たすことから逃れることができます(つまりnullと非nullの組み合わせは<literal>MATCH FULL</>制約に違反することが保証されます)。
もし参照行が外部キー制約を満たさない可能性を排除したい場合は、参照列を<literal>NOT NULL</>として宣言してください。
   </para>

   <para>
<!--
    A foreign key must reference columns that either are a primary key or
    form a unique constraint.  This means that the referenced columns always
    have an index (the one underlying the primary key or unique constraint);
    so checks on whether a referencing row has a match will be efficient.
    Since a <command>DELETE</command> of a row from the referenced table
    or an <command>UPDATE</command> of a referenced column will require
    a scan of the referencing table for rows matching the old value, it
    is often a good idea to index the referencing columns too.  Because this
    is not always needed, and there are many choices available on how
    to index, declaration of a foreign key constraint does not
    automatically create an index on the referencing columns.
-->
外部キーは主キーであるかまたは一意制約を構成する列を参照しなければなりません。これは、被参照列は常に(主キーまたは一意制約の基礎となる)インデックスを持つことを意味します;このため、参照行が一致するかのチェックは効率的です。
被参照テーブルからの行の<command>DELETE</command>や被参照行の<command>UPDATE</command>は、古い値と一致する行に対して参照テーブルのスキャンを要求しますので、参照行にもインデックスを付けるのは大抵は良い考えです。
これは常に必要という訳ではなく、また、インデックスの方法には多くの選択肢がありますので、外部キー制約の宣言では参照列のインデックスが自動的に作られるということはありません。
   </para>

   <para>
<!--
    More information about updating and deleting data is in <xref
    linkend="dml">.  Also see the description of foreign key constraint
    syntax in the reference documentation for
    <xref linkend="sql-createtable">.
-->
データの更新および削除について詳しくは、<xref linkend="dml">を参照してください。
また、<xref linkend="sql-createtable">のリファレンス文書にある外部キー制約構文の説明も参照してください。
   </para>
  </sect2>

  <sect2 id="ddl-constraints-exclusion">
<!--
   <title>Exclusion Constraints</title>
-->
   <title>排他制約</title>

   <indexterm>
<!--
    <primary>exclusion constraint</primary>
-->
    <primary>排他制約</primary>
   </indexterm>

   <indexterm>
<!--
    <primary>constraint</primary>
    <secondary>exclusion</secondary>
-->
    <primary>制約</primary>
    <secondary>排他</secondary>
   </indexterm>

   <para>
<!--
    Exclusion constraints ensure that if any two rows are compared on
    the specified columns or expressions using the specified operators,
    at least one of these operator comparisons will return false or null.
    The syntax is:
-->
排他制約によって、2つの行に関して指定された列もしくは式を指定された演算子を利用して比較した場合に、少なくとも演算子の比較の1つが偽もしくはnullを返すことを確実にします。
構文は以下の通りです。
<programlisting>
CREATE TABLE circles (
    c circle,
    EXCLUDE USING gist (c WITH &amp;&amp;)
);
</programlisting>
   </para>

   <para>
<!--
    See also <link linkend="SQL-CREATETABLE-EXCLUDE"><command>CREATE
    TABLE ... CONSTRAINT ... EXCLUDE</></link> for details.
-->
詳細は<link linkend="SQL-CREATETABLE-EXCLUDE"><command>CREATE
TABLE ... CONSTRAINT ... EXCLUDE</></link>を参照して下さい。
   </para>

   <para>
<!--
    Adding an exclusion constraint will automatically create an index
    of the type specified in the constraint declaration.
-->
排他制約を追加すると、制約宣言で指定された種類のインデックスが自動的に作られます。
   </para>
  </sect2>
 </sect1>

 <sect1 id="ddl-system-columns">
<!--
  <title>System Columns</title>
-->
  <title>システム列</title>

  <para>
<!--
   Every table has several <firstterm>system columns</> that are
   implicitly defined by the system.  Therefore, these names cannot be
   used as names of user-defined columns.  (Note that these
   restrictions are separate from whether the name is a key word or
   not; quoting a name will not allow you to escape these
   restrictions.)  You do not really need to be concerned about these
   columns; just know they exist.
-->
全てのテーブルには、システムによって暗黙的に定義された<firstterm>システム列</>がいくつかあります。
そのため、システム列の名前はユーザ定義列の名前として使うことはできません。
（これらの制約は名前がキーワードであるかどうかとは関係ありません。
つまり、名前を引用符で囲んでもこの制約を回避することはできません。）
システム列については、あまり意識する必要はありません。
これらが存在することを知っていれば十分です。
  </para>

  <indexterm>
<!--
   <primary>column</primary>
   <secondary>system column</secondary>
-->
   <primary>列</primary>
   <secondary>システム列</secondary>
  </indexterm>

  <variablelist>
   <varlistentry>
    <term><structfield>oid</></term>
    <listitem>
     <para>
      <indexterm>
       <primary>OID</primary>
<!--
       <secondary>column</secondary>
-->
       <secondary>列</secondary>
      </indexterm>
<!--
      The object identifier (object ID) of a row. This column is only
      present if the table was created using <literal>WITH
      OIDS</literal>, or if the <xref linkend="guc-default-with-oids">
      configuration variable was set at the time. This column is of type
      <type>oid</type> (same name as the column); see <xref
      linkend="datatype-oid"> for more information about the type.
-->
行のオブジェクト識別子（オブジェクトID）です。
この列は<literal>WITH OIDS</literal>を付けた場合と、その時に<xref linkend="guc-default-with-oids">が設定されていた場合に作成されます。
この列の型は<literal>oid</literal>（列名と同じ）です。この型についての詳細は<xref linkend="datatype-oid">を参照してください。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><structfield>tableoid</></term>
    <listitem>
     <indexterm>
      <primary>tableoid</primary>
     </indexterm>

     <para>
<!--
      The OID of the table containing this row.  This column is
      particularly handy for queries that select from inheritance
      hierarchies (see <xref linkend="ddl-inherit">), since without it,
      it's difficult to tell which individual table a row came from.  The
      <structfield>tableoid</structfield> can be joined against the
      <structfield>oid</structfield> column of
      <structname>pg_class</structname> to obtain the table name.
-->
この行を含むテーブルのOIDです。
この列は特に、継承階層からの選択問い合わせでは便利です（<xref linkend="ddl-inherit">を参照してください）。
この列がないと、どのテーブルからその行が来たのかわかりにくいからです。
<structfield>tableoid</structfield>はテーブル名を得るために<classname>pg_class</classname>の<structfield>oid</structfield>列に結合することができます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><structfield>xmin</></term>
    <listitem>
     <indexterm>
      <primary>xmin</primary>
     </indexterm>

     <para>
<!--
      The identity (transaction ID) of the inserting transaction for
      this row version.  (A row version is an individual state of a
      row; each update of a row creates a new row version for the same
      logical row.)
-->
この行バージョンの挿入トランザクションの識別情報（トランザクションID）です。
（行のバージョンとは、行の個別の状態です。
行が更新される度に、同一の論理的な行に対する新しいバージョンの行が作成されます。）
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><structfield>cmin</></term>
    <listitem>
     <indexterm>
      <primary>cmin</primary>
     </indexterm>

     <para>
<!--
      The command identifier (starting at zero) within the inserting
      transaction.
-->
挿入トランザクション内の（0から始まる）コマンド識別子です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><structfield>xmax</></term>
    <listitem>
     <indexterm>
      <primary>xmax</primary>
     </indexterm>

     <para>
<!--
      The identity (transaction ID) of the deleting transaction, or
      zero for an undeleted row version.  It is possible for this column to
      be nonzero in a visible row version. That usually indicates that the
      deleting transaction hasn't committed yet, or that an attempted
      deletion was rolled back.
-->
削除トランザクションの識別情報（トランザクションID）です。
削除されていない行ではゼロです。
可視のバージョンの行でこの列が非ゼロの場合があります。 
これは通常、削除トランザクションがまだコミットされていないこと、または、削除の試行がロールバックされたことを意味しています。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><structfield>cmax</></term>
    <listitem>
     <indexterm>
      <primary>cmax</primary>
     </indexterm>

     <para>
<!--
      The command identifier within the deleting transaction, or zero.
-->
削除トランザクション内のコマンド識別子、もしくはゼロです。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><structfield>ctid</></term>
    <listitem>
     <indexterm>
      <primary>ctid</primary>
     </indexterm>

     <para>
<!--
      The physical location of the row version within its table.  Note that
      although the <structfield>ctid</structfield> can be used to
      locate the row version very quickly, a row's
      <structfield>ctid</structfield> will change if it is
      updated or moved by <command>VACUUM FULL</>.  Therefore
      <structfield>ctid</structfield> is useless as a long-term row
      identifier.  The OID, or even better a user-defined serial
      number, should be used to identify logical rows.
-->
テーブル内における、行バージョンの物理的位置を表します。
<structfield>ctid</structfield>は行バージョンを素早く見つけるために使うことができますが、行の<structfield>ctid</structfield>は更新されたり、<command>VACUUM FULL</>により移動させられたりすると変わります。
したがって、<structfield>ctid</structfield>は長期の行識別子としては使えません。
論理行を識別するためには、OID、あるいはさらに良いのはユーザ定義の通番数を使うべきです。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

   <para>
<!--
    OIDs are 32-bit quantities and are assigned from a single
    cluster-wide counter.  In a large or long-lived database, it is
    possible for the counter to wrap around.  Hence, it is bad
    practice to assume that OIDs are unique, unless you take steps to
    ensure that this is the case.  If you need to identify the rows in
    a table, using a sequence generator is strongly recommended.
    However, OIDs can be used as well, provided that a few additional
    precautions are taken:
-->
OIDは32ビット数であり、クラスタ全体で1つのカウンタです。
大規模、もしくは長期間使用するデータベースでは、カウンタが一周してしまう可能性があります。
そのため、一意性を確保するための手順を踏んでいない限り、OIDが一意であると仮定してはなりません。
もしテーブル内の行を同定する必要がある場合は、シーケンスジェネレータを使用することを強く推奨します。
しかし、OIDはいくつかの注意を払うことによりシーケンスと同様に使用することができます。

    <itemizedlist>
     <listitem>
      <para>
<!--
       A unique constraint should be created on the OID column of each
       table for which the OID will be used to identify rows.  When such
       a unique constraint (or unique index) exists, the system takes
       care not to generate an OID matching an already-existing row.
       (Of course, this is only possible if the table contains fewer
       than 2<superscript>32</> (4 billion) rows, and in practice the
       table size had better be much less than that, or performance
       might suffer.)
-->
一意性制約は、OIDが行を同定するために使用されるようなテーブルのOID列に作成されなくてはいけません。
このような一意性制約（もしくは一意インデックス）が存在する場合は、システムは既存の行に一致するようなOIDを生成しません。
（もちろん、これはテーブルの行数が2<superscript>32</>（40億）より少ない場合に可能となります。性能を考慮すると、実際には行数はそれよりずっと少ない方がよいでしょう。）
      </para>
     </listitem>
     <listitem>
      <para>
<!--
       OIDs should never be assumed to be unique across tables; use
       the combination of <structfield>tableoid</> and row OID if you
       need a database-wide identifier.
-->
OIDは複数のテーブルをまたがって一意であると仮定してはなりません。
データベース全体での識別子が必要な場合は<structfield>tableoid</>と行OIDを組み合わせて使用してください。
      </para>
     </listitem>
     <listitem>
      <para>
<!--
       Of course, the tables in question must be created <literal>WITH
       OIDS</literal>.  As of <productname>PostgreSQL</productname> 8.1,
       <literal>WITHOUT OIDS</> is the default.
-->
もちろん、問題にしているテーブルは、<literal>WITH OIDS</literal>を使用して作成されなくてはいけません。
<productname>PostgreSQL</productname> 8.1から<literal>WITHOUT OIDS</>がデフォルトです。
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <para>
<!--
    Transaction identifiers are also 32-bit quantities.  In a
    long-lived database it is possible for transaction IDs to wrap
    around.  This is not a fatal problem given appropriate maintenance
    procedures; see <xref linkend="maintenance"> for details.  It is
    unwise, however, to depend on the uniqueness of transaction IDs
    over the long term (more than one billion transactions).
-->
トランザクション識別子も32ビット量です。
長期間使用するデータベースでは、トランザクションIDが一周してしまう可能性があります。
これは、適切な保守作業を行うことで、致命的な問題にはなりません。
詳細は<xref linkend="maintenance">を参照してください。
しかし、長期（10億トランザクション以上）にわたってトランザクションIDの一意性に依存することは賢明ではありません。
   </para>

   <para>
<!--
    Command identifiers are also 32-bit quantities.  This creates a hard limit
    of 2<superscript>32</> (4 billion) <acronym>SQL</acronym> commands
    within a single transaction.  In practice this limit is not a
    problem &mdash; note that the limit is on the number of
    <acronym>SQL</acronym> commands, not the number of rows processed.
    Also, as of <productname>PostgreSQL</productname> 8.3, only commands
    that actually modify the database contents will consume a command
    identifier.
-->
コマンド識別子もまた、32ビット量です。
このため、単一トランザクション内のコマンド数には2<superscript>32</>（40億）個までという制限が発生します。
実際、この制限は問題にはなりません。
これは<acronym>SQL</acronym>コマンド数に対する制限であり、処理される行数に対する制限ではないことに注意してください。
また<productname>PostgreSQL</productname> 8.3から、データベースの内容を実際に変更するコマンドのみがコマンド識別子を消費します。
   </para>
 </sect1>

 <sect1 id="ddl-alter">
<!--
  <title>Modifying Tables</title>
-->
  <title>テーブルの変更</title>

  <indexterm zone="ddl-alter">
<!--
   <primary>table</primary>
   <secondary>modifying</secondary>
-->
   <primary>テーブル</primary>
   <secondary>の変更</secondary>
  </indexterm>

  <para>
<!--
   When you create a table and you realize that you made a mistake, or
   the requirements of the application change, you can drop the
   table and create it again.  But this is not a convenient option if
   the table is already filled with data, or if the table is
   referenced by other database objects (for instance a foreign key
   constraint).  Therefore <productname>PostgreSQL</productname>
   provides a family of commands to make modifications to existing
   tables.  Note that this is conceptually distinct from altering
   the data contained in the table: here we are interested in altering
   the definition, or structure, of the table.
-->
テーブルの作成後に間違いに気付いたり、あるいはアプリケーションの要件が変わったりした場合には、テーブルをいったん削除して再度作成することができます。
しかし、テーブルにデータを入力済みの場合、あるいはそのテーブルが他のデータベースオブジェクト（例えば外部キー制約）によって参照されている場合、これは良い方法ではありません。
そのため、<productname>PostgreSQL</productname> では既存のテーブルに変更を加えるための一連のコマンドが用意されています。テーブル内のデータを変更するという概念ではないことに注意してください。
ここでは、テーブルの定義や構造を変更することに焦点を合わせます。
  </para>

  <para>
<!--
   You can:
-->
次のことができます。
   <itemizedlist spacing="compact">
    <listitem>
<!--
     <para>Add columns</para>
-->
     <para>列の追加</para>
    </listitem>
    <listitem>
<!--
     <para>Remove columns</para>
-->
     <para>列の削除</para>
    </listitem>
    <listitem>
<!--
     <para>Add constraints</para>
-->
     <para>制約の追加</para>
    </listitem>
    <listitem>
<!--
     <para>Remove constraints</para>
-->
     <para>制約の削除</para>
    </listitem>
    <listitem>
<!--
     <para>Change default values</para>
-->
     <para>デフォルト値の変更</para>
    </listitem>
    <listitem>
<!--
     <para>Change column data types</para>
-->
     <para>列のデータ型の変更</para>
    </listitem>
    <listitem>
<!--
     <para>Rename columns</para>
-->
     <para>列名の変更</para>
    </listitem>
    <listitem>
<!--
     <para>Rename tables</para>
-->
     <para>テーブル名の変更</para>
    </listitem>
   </itemizedlist>

<!--
   All these actions are performed using the
   <xref linkend="sql-altertable">
   command, whose reference page contains details beyond those given
   here.
-->
これらの操作は全て<xref linkend="sql-altertable">コマンド（本節の説明範囲を超えますので詳細はこちらを参照してください）を使用して行うことができます。
  </para>

  <sect2 id="ddl-alter-adding-a-column">
<!--
   <title>Adding a Column</title>
-->
   <title>列の追加</title>

   <indexterm>
<!--
    <primary>column</primary>
    <secondary>adding</secondary>
-->
    <primary>列</primary>
    <secondary>の追加</secondary>
   </indexterm>

   <para>
<!--
    To add a column, use a command like:
-->
列を追加するには、次のようにコマンドを使用します。
<programlisting>
ALTER TABLE products ADD COLUMN description text;
</programlisting>
<!--
    The new column is initially filled with whatever default
    value is given (null if you don't specify a <literal>DEFAULT</> clause).
-->
新しい列にはデフォルト値が初期値として入ります（<literal>DEFAULT</>句を指定しない場合はNULL値が入ります）。
   </para>

   <para>
<!--
    You can also define constraints on the column at the same time,
    using the usual syntax:
-->
次の構文を使用すると、列の制約も同時に定義することができます。
<programlisting>
ALTER TABLE products ADD COLUMN description text CHECK (description &lt;&gt; '');
</programlisting>
<!--
    In fact all the options that can be applied to a column description
    in <command>CREATE TABLE</> can be used here.  Keep in mind however
    that the default value must satisfy the given constraints, or the
    <literal>ADD</> will fail.  Alternatively, you can add
    constraints later (see below) after you've filled in the new column
    correctly.
-->
実際には<command>CREATE TABLE</>内の列の記述に使用されている全てのオプションが、ここで使用できます。
ただしデフォルト値は与えられている制約を満足するものでなくてはならないことに注意してください。満足しない場合は<literal>ADD</>が失敗します。一方で、新規の列に正しく値を入れた後で制約を追加することができます（後述）。
   </para>

  <tip>
   <para>
<!--
    Adding a column with a default requires updating each row of the
    table (to store the new column value).  However, if no default is
    specified, <productname>PostgreSQL</productname> is able to avoid
    the physical update.  So if you intend to fill the column with
    mostly nondefault values, it's best to add the column with no default,
    insert the correct values using <command>UPDATE</>, and then add any
    desired default as described below.
-->
デフォルトを持つ列を追加するためには、（新しい列値を格納するために）テーブルの各行を更新しなければなりません。
しかし、デフォルトが指定されていない場合は、<productname>PostgreSQL</productname>は物理的な更新を避けることが可能です。
ですので、ほとんどがデフォルト以外の値を持つ列をテーブルに格納するつもりであれば、デフォルトを指定せずに列を追加し、<command>UPDATE</>を使用して正しい値を挿入することをお勧めします。
その後に、後述のようにして設定したいデフォルト値を付与してください。
   </para>
  </tip>
  </sect2>

  <sect2 id="ddl-alter-removing-a-column">
<!--
   <title>Removing a Column</title>
-->
   <title>列の削除</title>

   <indexterm>
<!--
    <primary>column</primary>
    <secondary>removing</secondary>
-->
    <primary>列</primary>
    <secondary>の削除</secondary>
   </indexterm>

   <para>
<!--
    To remove a column, use a command like:
-->
列を削除するには、次のようにコマンドを使用します。
<programlisting>
ALTER TABLE products DROP COLUMN description;
</programlisting>
<!--
    Whatever data was in the column disappears.  Table constraints involving
    the column are dropped, too.  However, if the column is referenced by a
    foreign key constraint of another table,
    <productname>PostgreSQL</productname> will not silently drop that
    constraint.  You can authorize dropping everything that depends on
    the column by adding <literal>CASCADE</>:
-->
列内にある、どんなデータであれ消去します。
また列を含むテーブルの制約も消去されます。
しかし、もし列が他のテーブルの外部キー制約として参照されている場合は、<productname>PostgreSQL</productname>は暗黙のうちに制約を消去しません。
<literal>CASCADE</>を追加することにより列に依存する全てを消去することができます。
<programlisting>
ALTER TABLE products DROP COLUMN description CASCADE;
</programlisting>
<!--
    See <xref linkend="ddl-depend"> for a description of the general
    mechanism behind this.
-->
この背後にある一般的な仕組みに関する説明については<xref linkend="ddl-depend">を参照してください。
   </para>
  </sect2>

  <sect2 id="ddl-alter-adding-a-constraint">
<!--
   <title>Adding a Constraint</title>
-->
   <title>制約の追加</title>

   <indexterm>
<!--
    <primary>constraint</primary>
    <secondary>adding</secondary>
-->
    <primary>制約</primary>
    <secondary>の追加</secondary>
   </indexterm>

   <para>
<!--
    To add a constraint, the table constraint syntax is used.  For example:
-->
制約を追加するには、テーブル制約の構文が使用されます。
<programlisting>
ALTER TABLE products ADD CHECK (name &lt;&gt; '');
ALTER TABLE products ADD CONSTRAINT some_name UNIQUE (product_no);
ALTER TABLE products ADD FOREIGN KEY (product_group_id) REFERENCES product_groups;
</programlisting>
<!--
    To add a not-null constraint, which cannot be written as a table
    constraint, use this syntax:
-->
テーブル制約として記述できない非NULL制約を追加するには、次の構文を使用します。
<programlisting>
ALTER TABLE products ALTER COLUMN product_no SET NOT NULL;
</programlisting>
   </para>

   <para>
<!--
    The constraint will be checked immediately, so the table data must
    satisfy the constraint before it can be added.
-->
制約は即座に検査されますので、制約を追加する前にテーブル内のデータがこれに従っている必要があります。
   </para>
  </sect2>

  <sect2 id="ddl-alter-removing-a-constraint">
<!--
   <title>Removing a Constraint</title>
-->
   <title>制約の削除</title>

   <indexterm>
<!--
    <primary>constraint</primary>
    <secondary>removing</secondary>
-->
    <primary>制約</primary>
    <secondary>の削除</secondary>
   </indexterm>

   <para>
<!--
    To remove a constraint you need to know its name.  If you gave it
    a name then that's easy.  Otherwise the system assigned a
    generated name, which you need to find out.  The
    <application>psql</application> command <literal>\d
    <replaceable>tablename</replaceable></literal> can be helpful
    here; other interfaces might also provide a way to inspect table
    details.  Then the command is:
-->
制約を削除するには、その制約名を知る必要があります。
自分で名前を付けた場合は簡単です。
しかし、自分で名前を付けていない場合はシステム生成の名前が割り当てられているので、それを探さなくてはなりません。
それには<application>psql</application>の<literal>\d <replaceable>tablename</replaceable></literal>コマンドを使用すると便利です。
他のインタフェースにもテーブルの詳細を調べる方法があるかもしれません。
コマンドは以下の通りです。
<programlisting>
ALTER TABLE products DROP CONSTRAINT some_name;
</programlisting>
<!--
    (If you are dealing with a generated constraint name like <literal>$2</>,
    don't forget that you'll need to double-quote it to make it a valid
    identifier.)
-->
（自動生成された<literal>$2</>といった制約名を扱う場合は、有効な識別子となるように二重引用符で括る必要があることを忘れないでください。）
   </para>

   <para>
<!--
    As with dropping a column, you need to add <literal>CASCADE</> if you
    want to drop a constraint that something else depends on.  An example
    is that a foreign key constraint depends on a unique or primary key
    constraint on the referenced column(s).
-->
列の削除に関して、何かが依存している制約を削除する場合には<literal>CASCADE</>を付ける必要があります。例として、参照されている列に付いている一意またはプライマリキー制約に依存している外部キー制約を削除する場合です。
   </para>

   <para>
<!--
    This works the same for all constraint types except not-null
    constraints. To drop a not null constraint use:
-->
これは、非NULL制約以外の全ての制約型に適用できます。 
非NULL制約を削除するには、次のようにします。
<programlisting>
ALTER TABLE products ALTER COLUMN product_no DROP NOT NULL;
</programlisting>
<!--
    (Recall that not-null constraints do not have names.)
-->
（非NULL制約には名前がないことを想起してください。）
   </para>
  </sect2>

  <sect2>
<!--
   <title>Changing a Column's Default Value</title>
-->
   <title>列のデフォルト値の変更</title>

   <indexterm>
<!--
    <primary>default value</primary>
    <secondary>changing</secondary>
-->
    <primary>デフォルト値</primary>
    <secondary>の変更</secondary>
   </indexterm>

   <para>
<!--
    To set a new default for a column, use a command like:
-->
列に新しいデフォルトを設定するには、以下のようなコマンドを使用します。
<programlisting>
ALTER TABLE products ALTER COLUMN price SET DEFAULT 7.77;
</programlisting>
<!--
    Note that this doesn't affect any existing rows in the table, it
    just changes the default for future <command>INSERT</> commands.
-->
これはテーブル内の既存の行には何も影響を与えないことに注意してください。これは将来の<command>INSERT</>コマンドのために単純にデフォルトを変えるだけです。
   </para>

   <para>
<!--
    To remove any default value, use:
-->
デフォルト値を削除するには次のようにします。
<programlisting>
ALTER TABLE products ALTER COLUMN price DROP DEFAULT;
</programlisting>
<!--
    This is effectively the same as setting the default to null.
    As a consequence, it is not an error
    to drop a default where one hadn't been defined, because the
    default is implicitly the null value.
-->
これは、デフォルトをNULLに設定することと同等です。 
そのため、定義されていないデフォルト値を削除してもエラーにはなりません。
なぜなら NULL値が暗黙的にデフォルトとなっているからです。
   </para>
  </sect2>

  <sect2>
<!---
   <title>Changing a Column's Data Type</title>
-->
   <title>列のデータ型の変更</title>

   <indexterm>
<!--
    <primary>column data type</primary>
    <secondary>changing</secondary>
-->
    <primary>列のデータ型</primary>
    <secondary>の変更</secondary>
   </indexterm>

   <para>
<!--
    To convert a column to a different data type, use a command like:
-->
列を異なるデータ型に変換するには以下のようなコマンドを使用してください。
<programlisting>
ALTER TABLE products ALTER COLUMN price TYPE numeric(10,2);
</programlisting>
<!--
    This will succeed only if each existing entry in the column can be
    converted to the new type by an implicit cast.  If a more complex
    conversion is needed, you can add a <literal>USING</> clause that
    specifies how to compute the new values from the old.
-->
これは、その列の既存の項目が新しい型に暗黙的キャストにより変換できる場合にのみ成功します。
より複雑な変換が必要な場合、古い値から新しい値をどのように計算するかを指定する<literal>USING</>句を付けることができます。
   </para>

   <para>
<!--
    <productname>PostgreSQL</> will attempt to convert the column's
    default value (if any) to the new type, as well as any constraints
    that involve the column.  But these conversions might fail, or might
    produce surprising results.  It's often best to drop any constraints
    on the column before altering its type, and then add back suitably
    modified constraints afterwards.
-->
<productname>PostgreSQL</>は、（もしあれば）列のデフォルト値を新しい型に、同時に、その列に関連する全ての制約も新しい型に変換しようとします。
しかし、こうした変換は失敗するかもしれませんし、予想を超えた結果になってしまうかもしれません。
型を変更する前にその列に関する制約を全て削除し、後で適切に変更した制約を付け直すことが最善な場合がよくあります。
   </para>
  </sect2>

  <sect2>
<!--
   <title>Renaming a Column</title>
-->
   <title>列名の変更</title>

   <indexterm>
<!--
    <primary>column</primary>
    <secondary>renaming</secondary>
-->
    <primary>列</primary>
    <secondary>の名称変更</secondary>
   </indexterm>

   <para>
<!--
    To rename a column:
-->
列名を変更するには、次のようにします。
<programlisting>
ALTER TABLE products RENAME COLUMN product_no TO product_number;
</programlisting>
   </para>
  </sect2>

  <sect2>
<!--
   <title>Renaming a Table</title>
-->
   <title>テーブル名の変更</title>

   <indexterm>
<!--
    <primary>table</primary>
    <secondary>renaming</secondary>
-->
    <primary>テーブル</primary>
    <secondary>の名称変更</secondary>
   </indexterm>

   <para>
<!--
    To rename a table:
-->
テーブル名を変更するには、次のようにします。
<programlisting>
ALTER TABLE products RENAME TO items;
</programlisting>
   </para>
  </sect2>
 </sect1>

 <sect1 id="ddl-priv">
<!--
  <title>Privileges</title>
-->
  <title>権限</title>

  <indexterm zone="ddl-priv">
<!--
   <primary>privilege</primary>
-->
   <primary>権限</primary>
  </indexterm>

  <indexterm>
<!--
   <primary>permission</primary>
   <see>privilege</see>
-->
   <primary>権利</primary>
   <see>権限</see>
  </indexterm>

  <indexterm zone="ddl-priv">
<!--
   <primary>owner</primary>
-->
   <primary>所有者</primary>
  </indexterm>

  <indexterm zone="ddl-priv">
   <primary>GRANT</primary>
  </indexterm>

  <indexterm zone="ddl-priv">
   <primary>REVOKE</primary>
  </indexterm>

  <para>
<!--
   When an object is created, it is assigned an owner. The
   owner is normally the role that executed the creation statement.
   For most kinds of objects, the initial state is that only the owner
   (or a superuser) can do anything with the object. To allow
   other roles to use it, <firstterm>privileges</firstterm> must be
   granted.
-->
オブジェクトが作成されると、所有者が割り当てられます。通常、所有者は作成する文を実行したロールです。ほとんどの種類のオブジェクトについて、初期状態では所有者(またはスーパーユーザ)だけがそのオブジェクトを使用できます。
他のユーザがこのオブジェクトを使用するには、<firstterm>権限</firstterm>が付与されていなければなりません。
  </para>

  <para>
<!--
   There are different kinds of privileges: <literal>SELECT</>,
   <literal>INSERT</>, <literal>UPDATE</>, <literal>DELETE</>,
   <literal>TRUNCATE</>, <literal>REFERENCES</>, <literal>TRIGGER</>,
   <literal>CREATE</>, <literal>CONNECT</>, <literal>TEMPORARY</>,
   <literal>EXECUTE</>, and <literal>USAGE</>.
   The privileges applicable to a particular
   object vary depending on the object's type (table, function, etc).
   For complete information on the different types of privileges
   supported by <productname>PostgreSQL</productname>, refer to the
   <xref linkend="sql-grant"> reference
   page.  The following sections and chapters will also show you how
   those privileges are used.
-->
権限にはいくつかの種類があります。
すなわち<literal>SELECT</>、 <literal>INSERT</>、<literal>UPDATE</>、<literal>DELETE</>、<literal>TRUNCATE</>、<literal>REFERENCES</>、<literal>TRIGGER</>、<literal>CREATE</>、<literal>CONNECT</>、<literal>TEMPORARY</>、 <literal>EXECUTE</>、<literal>USAGE</>です。
特定のオブジェクトに適用する特権は、オブジェクトの型（テーブル、関数など）により変わります。
<productname>PostgreSQL</productname>がサポートする様々な権限の詳細については<xref linkend="sql-grant">リファレンスページを参照してください。
以降の節および章でもこれらの権限の使用方法についての説明があります。
  </para>

  <para>
<!--
   The right to modify or destroy an object is always the privilege of
   the owner only.
-->
オブジェクトの変更や削除の権限は常に所有者のみに与えられるものです。
  </para>

  <para>
<!--
   An object can be assigned to a new owner with an <command>ALTER</command>
   command of the appropriate kind for the object, e.g. <xref
   linkend="sql-altertable">.  Superusers can always do
   this; ordinary roles can only do it if they are both the current owner
   of the object (or a member of the owning role) and a member of the new
   owning role.
-->
<xref linkend="sql-altertable">のような適切な種類の<command>ALTER</command>コマンドにより、あるオブジェクトに新しい所有者を割り当てることができます。スーパーユーザはいつでも所有者を変更できます。通常のロールは、対象オブジェクトの現在の所有者(または所有者ロールのメンバー)であり、かつ新しい所有者ロールのメンバーである場合に限り、所有者を変更できます。
  </para>

  <para>
<!--
   To assign privileges, the <command>GRANT</command> command is
   used. For example, if <literal>joe</literal> is an existing user, and
   <literal>accounts</literal> is an existing table, the privilege to
   update the table can be granted with:
-->
権限を割り当てるには、<command>GRANT</command>コマンドを使用します。
例えば、<literal>joe</literal>という既存のユーザと<literal>accounts</literal>という既存のテーブルがある場合、このテーブルを更新する権限を付与するには以下のようにします。
<programlisting>
GRANT UPDATE ON accounts TO joe;
</programlisting>
<!--
   Writing <literal>ALL</literal> in place of a specific privilege grants all
   privileges that are relevant for the object type.
-->
特定の権限名を指定する代わりに<literal>ALL</literal>を指定すると、その種類のオブジェクトに関連する全ての権限が付与されます。
  </para>

  <para>
<!--
   The special <quote>user</quote> name <literal>PUBLIC</literal> can
   be used to grant a privilege to every user on the system.  Also,
   <quote>group</> roles can be set up to help manage privileges when
   there are many users of a database &mdash; for details see
   <xref linkend="user-manag">.
-->
システム内の全てのユーザに権限を付与するには、特別な<quote>ユーザ</quote>名である<literal>PUBLIC</literal>を使用することができます。
また、<quote>グループ</>ロールを使用すれば、データベース内に多くのユーザが存在する場合に権限の管理が簡単になります。
詳細は<xref linkend="user-manag">を参照してください。
  </para>

  <para>
<!--
   To revoke a privilege, use the fittingly named
   <command>REVOKE</command> command:
-->
権限を取り消す(revoke)には、それに相応しい名前の<command>REVOKE</command>コマンドを使用します。
<programlisting>
REVOKE ALL ON accounts FROM PUBLIC;
</programlisting>
<!--
   The special privileges of the object owner (i.e., the right to do
   <command>DROP</>, <command>GRANT</>, <command>REVOKE</>, etc.)
   are always implicit in being the owner,
   and cannot be granted or revoked.  But the object owner can choose
   to revoke his own ordinary privileges, for example to make a
   table read-only for himself as well as others.
-->
オブジェクト所有者の特別の権限（<command>DROP</>、<command>GRANT</>、<command>REVOKE</>を行う権限など）は、所有者であることを前提とした権限なので、付与したり取り消したりすることはできません。
しかしオブジェクト所有者は、テーブルを他のユーザ同様に自分自身に対しても読み取り専用にしたい時などに、自分の通常の権限を取り消すことができます。
  </para>

  <para>
<!--
   Ordinarily, only the object's owner (or a superuser) can grant or
   revoke privileges on an object.  However, it is possible to grant a
   privilege <quote>with grant option</>, which gives the recipient
   the right to grant it in turn to others.  If the grant option is
   subsequently revoked then all who received the privilege from that
   recipient (directly or through a chain of grants) will lose the
   privilege.  For details see the <xref linkend="sql-grant"> and
   <xref linkend="sql-revoke"> reference pages.
-->
普通はオブジェクトの所有者（またはスーパーユーザ）は、オブジェクトにおける権限の付与や剥奪ができます。
しかし<quote>with grant option</>を付けることで、権限を与えられたユーザが、所有者と同様に他のユーザに権限を付与することが可能になります。
もし後になってグラントオプションが剥奪されると、剥奪されたユーザから（直接もしくは権限付与の連鎖により）権限を与えられていたユーザはすべて、その権限が剥奪されます。
詳細は、<xref linkend="sql-grant">と<xref linkend="sql-revoke">を参照してください。
  </para>
 </sect1>

 <sect1 id="ddl-schemas">
<!--
  <title>Schemas</title>
-->
  <title>スキーマ</title>

  <indexterm zone="ddl-schemas">
<!--
   <primary>schema</primary>
-->
   <primary>スキーマ</primary>
  </indexterm>

  <para>
<!--
   A <productname>PostgreSQL</productname> database cluster
   contains one or more named databases.  Users and groups of users are
   shared across the entire cluster, but no other data is shared across
   databases.  Any given client connection to the server can access
   only the data in a single database, the one specified in the connection
   request.
-->
<productname>PostgreSQL</productname>データベースクラスタには、複数の名前付きデータベースが含まれます。
ユーザおよびユーザのグループはクラスタ全体で共有されますが、他のデータは複数のデータベース間で共有されません。
サーバに接続しているクライアントは、単一のデータベース、つまり接続要求で指定したデータベース内のデータにしかアクセスできません。
  </para>

  <note>
   <para>
<!--
    Users of a cluster do not necessarily have the privilege to access every
    database in the cluster.  Sharing of user names means that there
    cannot be different users named, say, <literal>joe</> in two databases
    in the same cluster; but the system can be configured to allow
    <literal>joe</> access to only some of the databases.
-->
クラスタのユーザは、クラスタ内の全てのデータベースへのアクセス権限を持っているとは限りません。
ユーザ名を共有するということは、例えば<literal>joe</>という同じユーザ名を持つ異なるユーザが同じクラスタ内の2つのデータベースに存在することはできないということです。
しかし、<literal>joe</>が一部のデータベースにのみアクセスできるようにシステムを構成することはできます。
   </para>
  </note>

  <para>
<!--
   A database contains one or more named <firstterm>schemas</>, which
   in turn contain tables.  Schemas also contain other kinds of named
   objects, including data types, functions, and operators.  The same
   object name can be used in different schemas without conflict; for
   example, both <literal>schema1</> and <literal>myschema</> can
   contain tables named <literal>mytable</>.  Unlike databases,
   schemas are not rigidly separated: a user can access objects in any
   of the schemas in the database he is connected to, if he has
   privileges to do so.
-->
データベースには、複数の名前付き<firstterm>スキーマ</>が含まれ、スキーマにはテーブルが含まれます。
スキーマには、データ型、関数および演算子などの他の名前付きオブジェクトも含まれます。
同じオブジェクト名を異なるスキーマで使用しても矛盾は起こりません。
例えば、<literal>schema1</>と<literal>myschema</>の両方のスキーマに<literal>mytable</>というテーブルが含まれていても構いません。
スキーマはデータベースとは異なり厳格に分離されていないので、ユーザは、権限さえ持っていれば接続しているデータベース内のどのスキーマのオブジェクトにでもアクセスすることができます。
  </para>

  <para>
<!--
   There are several reasons why one might want to use schemas:
-->
スキーマの使用が好まれる理由はいくつかあります。

   <itemizedlist>
    <listitem>
     <para>
<!--
      To allow many users to use one database without interfering with
      each other.
-->
1つのデータベースを多数のユーザが互いに干渉することなく使用できるようにするため。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      To organize database objects into logical groups to make them
      more manageable.
-->
管理しやすくなるよう、データベースオブジェクトを論理グループに編成するため。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      Third-party applications can be put into separate schemas so
      they do not collide with the names of other objects.
-->
サードパーティのアプリケーションを別々のスキーマに入れることにより、他のオブジェクトの名前と競合しないようにするため。
     </para>
    </listitem>
   </itemizedlist>

<!--
   Schemas are analogous to directories at the operating system level,
   except that schemas cannot be nested.
-->
スキーマは、入れ子にできないという点を除き、オペレーティングシステムのディレクトリと似ています。
  </para>

  <sect2 id="ddl-schemas-create">
<!--
   <title>Creating a Schema</title>
-->
   <title>スキーマの作成</title>

   <indexterm zone="ddl-schemas-create">
<!--
    <primary>schema</primary>
    <secondary>creating</secondary>
-->
    <primary>スキーマ</primary>
    <secondary>の作成</secondary>
   </indexterm>

   <para>
<!--
    To create a schema, use the <xref linkend="sql-createschema">
    command.  Give the schema a name
    of your choice.  For example:
-->
スキーマを作成するには、<xref linkend="sql-createschema">コマンドを使用します。
スキーマに自由に名前を付けます。
例を示します。
<programlisting>
CREATE SCHEMA myschema;
</programlisting>
   </para>

   <indexterm>
<!--
    <primary>qualified name</primary>
-->
    <primary>修飾名</primary>
   </indexterm>

   <indexterm>
<!--
    <primary>name</primary>
    <secondary>qualified</secondary>
-->
    <primary>名前</primary>
    <secondary>修飾された</secondary>
   </indexterm>

   <para>
<!--
    To create or access objects in a schema, write a
    <firstterm>qualified name</> consisting of the schema name and
    table name separated by a dot:
-->
スキーマ内にオブジェクトを作成したりこれにアクセスするには、スキーマ名とテーブル名をドットで区切った<firstterm>修飾名</>を書きます。
<synopsis>
<replaceable>schema</><literal>.</><replaceable>table</>
</synopsis>
<!--
    This works anywhere a table name is expected, including the table
    modification commands and the data access commands discussed in
    the following chapters.
    (For brevity we will speak of tables only, but the same ideas apply
    to other kinds of named objects, such as types and functions.)
-->
この方法は、後の章で説明するテーブル変更コマンドやデータアクセスコマンドなど、テーブル名を必要とする場合すべてに使用できます。
（簡単に、テーブルについてのみ述べます。しかし型や関数といった名前付きのオブジェクトの全種類について同様の考え方が適用できます。）
   </para>

   <para>
<!--
    Actually, the even more general syntax
-->
実際には、より一般的な以下の構文
<synopsis>
<replaceable>database</><literal>.</><replaceable>schema</><literal>.</><replaceable>table</>
</synopsis>
<!--
    can be used too, but at present this is just for <foreignphrase>pro
    forma</> compliance with the SQL standard.  If you write a database name,
    it must be the same as the database you are connected to.
-->
を使用することもできますが、現在ではこの構文は<foreignphrase>形式上</>標準SQLに準拠するためにのみ存在しています。
記述されるデータベース名は、接続しているデータベースと同じ名前でなければなりません。
   </para>

   <para>
<!--
    So to create a table in the new schema, use:
-->
ですから、新しいスキーマにテーブルを作成するには次のようにします。
<programlisting>
CREATE TABLE myschema.mytable (
 ...
);
</programlisting>
   </para>

   <indexterm>
<!--
    <primary>schema</primary>
    <secondary>removing</secondary>
-->
    <primary>スキーマ</primary>
    <secondary>の削除</secondary>
   </indexterm>

   <para>
<!--
    To drop a schema if it's empty (all objects in it have been
    dropped), use:
-->
空のスキーマ（全てのオブジェクトが削除されたスキーマ）を削除するには次のようにします。
<programlisting>
DROP SCHEMA myschema;
</programlisting>
<!--
    To drop a schema including all contained objects, use:
-->
オブジェクトを含むスキーマを削除する場合には次のようにします。
<programlisting>
DROP SCHEMA myschema CASCADE;
</programlisting>
<!--
    See <xref linkend="ddl-depend"> for a description of the general
    mechanism behind this.
-->
この背後にある一般的な機構についての詳細は<xref linkend="ddl-depend">を参照してください。
   </para>

   <para>
<!--
    Often you will want to create a schema owned by someone else
    (since this is one of the ways to restrict the activities of your
    users to well-defined namespaces).  The syntax for that is:
-->
他のユーザが所有するスキーマを作成したい場合があります（これは他のユーザの活動を明確に定義された名前空間内に制限する方法の1つです）。
そのための構文は次の通りです。
<programlisting>
CREATE SCHEMA <replaceable>schemaname</replaceable> AUTHORIZATION <replaceable>username</replaceable>;
</programlisting>
<!--
    You can even omit the schema name, in which case the schema name
    will be the same as the user name.  See <xref
    linkend="ddl-schemas-patterns"> for how this can be useful.
-->
スキーマ名は省略することもでき、その場合スキーマ名はユーザ名と同じになります。
この構文の便利な使用方法は<xref linkend="ddl-schemas-patterns">に記載されています。
   </para>

   <para>
<!--
    Schema names beginning with <literal>pg_</> are reserved for
    system purposes and cannot be created by users.
-->
<literal>pg_</>で始まるスキーマ名は、システム上の使用のため予約されており、ユーザが作成することはできません。
   </para>
  </sect2>

  <sect2 id="ddl-schemas-public">
<!--
   <title>The Public Schema</title>
-->
   <title>publicスキーマ</title>

   <indexterm zone="ddl-schemas-public">
<!--
    <primary>schema</primary>
    <secondary>public</secondary>
-->
    <primary>スキーマ</primary>
    <secondary>public</secondary>
   </indexterm>

   <para>
<!--
    In the previous sections we created tables without specifying any
    schema names.  By default such tables (and other objects) are
    automatically put into a schema named <quote>public</quote>.  Every new
    database contains such a schema.  Thus, the following are equivalent:
-->
これまでの節ではスキーマ名を指定せずにテーブルを作成してきました。
デフォルトでは、このようなテーブル（および他のオブジェクト）は自動的に<quote>public</quote>という名前のスキーマに入れられます。
新しいデータベースには全てこのようなスキーマが含まれています。
そのため、以下の2つの構文は同等です。
<programlisting>
CREATE TABLE products ( ... );
</programlisting>
<!--
    and:
-->
および
<programlisting>
CREATE TABLE public.products ( ... );
</programlisting>
   </para>
  </sect2>

  <sect2 id="ddl-schemas-path">
<!--
   <title>The Schema Search Path</title>
-->
   <title>スキーマ検索パス</title>

   <indexterm>
<!--
    <primary>search path</primary>
-->
    <primary>検索パス</primary>
   </indexterm>

   <indexterm>
<!--
    <primary>unqualified name</primary>
-->
    <primary>非修飾名</primary>
   </indexterm>

   <indexterm>
<!--
    <primary>name</primary>
    <secondary>unqualified</secondary>
-->
    <primary>名前</primary>
    <secondary>非修飾の</secondary>
   </indexterm>

   <para>
<!--
    Qualified names are tedious to write, and it's often best not to
    wire a particular schema name into applications anyway.  Therefore
    tables are often referred to by <firstterm>unqualified names</>,
    which consist of just the table name.  The system determines which table
    is meant by following a <firstterm>search path</>, which is a list
    of schemas to look in.  The first matching table in the search path
    is taken to be the one wanted.  If there is no match in the search
    path, an error is reported, even if matching table names exist
    in other schemas in the database.
-->
修飾名を書くのは手間がかかりますし、どちらにしても、アプリケーションに特定のスキーマ名を書き込まない方が良いことも多いのです。
そのため、テーブルは多くの場合、テーブル名しか持たない<firstterm>非修飾名</>として参照されます。
システムは、検索するスキーマのリストである<firstterm>検索パス</>に従って、どのテーブルを指しているのかを判別します。
検索パスで最初に一致したテーブルが、該当テーブルだと解釈されます。
検索パス内に一致するテーブルがないと、データベースの他のスキーマ内に一致するテーブルがある場合でもエラーが報告されます。
   </para>

   <indexterm>
<!--
    <primary>schema</primary>
    <secondary>current</secondary>
-->
    <primary>スキーマ</primary>
    <secondary>現在の</secondary>
   </indexterm>

   <para>
<!--
    The first schema named in the search path is called the current schema.
    Aside from being the first schema searched, it is also the schema in
    which new tables will be created if the <command>CREATE TABLE</>
    command does not specify a schema name.
-->
検索パスの最初に列挙されているスキーマは、「現在のスキーマ」と呼ばれます。
現在のスキーマは、検索される最初のスキーマであると同時に、スキーマ名を指定せずに<command>CREATE TABLE</>コマンドでテーブルを作成した場合に新しいテーブルが作成されるスキーマでもあります。
   </para>

   <indexterm>
<!--
    <primary><varname>search_path</varname> configuration parameter</primary>
-->
    <primary><varname>search_path</varname>設定パラメータ</primary>
   </indexterm>

   <para>
<!--
    To show the current search path, use the following command:
-->
現行の検索パスを示すには次のコマンドを使用します。
<programlisting>
SHOW search_path;
</programlisting>
<!--
    In the default setup this returns:
-->
デフォルトの設定では次のように返されます。
<screen>
 search_path
--------------
 "$user",public
</screen>
<!--
    The first element specifies that a schema with the same name as
    the current user is to be searched.  If no such schema exists,
    the entry is ignored.  The second element refers to the
    public schema that we have seen already.
-->
最初の要素は、現行ユーザと同じ名前のスキーマを検索することを指定しています。
そのようなスキーマが存在していない場合、この項目は無視されます。
2番目の要素は、先ほど説明したpublicスキーマを参照しています。
   </para>

   <para>
<!--
    The first schema in the search path that exists is the default
    location for creating new objects.  That is the reason that by
    default objects are created in the public schema.  When objects
    are referenced in any other context without schema qualification
    (table modification, data modification, or query commands) the
    search path is traversed until a matching object is found.
    Therefore, in the default configuration, any unqualified access
    again can only refer to the public schema.
-->
検索パス内で最初に存在するスキーマが、新規オブジェクトが作成されるデフォルトの場所になります。
これが、デフォルトでオブジェクトがpublicスキーマに作成される理由です。
オブジェクトがスキーマ修飾なしで別の文脈で参照される場合（テーブル変更、データ変更、あるいは問い合わせコマンドなど）、一致するオブジェクトが見つかるまで検索パス内で探索されます。
そのためデフォルト構成では、非修飾のアクセスはpublicスキーマしか参照できません。
   </para>

   <para>
<!--
    To put our new schema in the path, we use:
-->
新しいスキーマをパスに追加するには次のようにします。
<programlisting>
SET search_path TO myschema,public;
</programlisting>
<!--
    (We omit the <literal>$user</literal> here because we have no
    immediate need for it.)  And then we can access the table without
    schema qualification:
-->
（<literal>$user</literal>はまだ必要ないので、ここでは省略しています。）
そして、次のようにしてスキーマ修飾なしでテーブルにアクセスします。
<programlisting>
DROP TABLE mytable;
</programlisting>
<!--
    Also, since <literal>myschema</literal> is the first element in
    the path, new objects would by default be created in it.
-->
また、<literal>myschema</literal>はパス内の最初の要素なので、新しいオブジェクトはデフォルトでここに作成されます。
   </para>

   <para>
<!--
    We could also have written:
-->
以下のように書くこともできます。
<programlisting>
SET search_path TO myschema;
</programlisting>
<!--
    Then we no longer have access to the public schema without
    explicit qualification.  There is nothing special about the public
    schema except that it exists by default.  It can be dropped, too.
-->
このようにすると、今後は修飾名なしでpublicスキーマにアクセスすることができなくなります。
publicスキーマはデフォルトで存在するということ以外に特別な意味はありません。
他のスキーマと同様に削除することもできます。
   </para>

   <para>
<!--
    See also <xref linkend="functions-info"> for other ways to manipulate
    the schema search path.
-->
スキーマ検索パスに操作する他の方法については<xref linkend="functions-info">を参照してください。
   </para>

   <para>
<!--
    The search path works in the same way for data type names, function names,
    and operator names as it does for table names.  Data type and function
    names can be qualified in exactly the same way as table names.  If you
    need to write a qualified operator name in an expression, there is a
    special provision: you must write
-->
検索パスはデータ型名、関数名、演算子名についても、テーブル名の場合と同じように機能します。
データ型および関数の名前は、テーブル名とまったく同じように修飾することができます。
式で修飾演算子名を書く場合には、特別な決まりがあります。
それは以下の通りです。
<synopsis>
<literal>OPERATOR(</><replaceable>schema</><literal>.</><replaceable>operator</><literal>)</>
</synopsis>
<!--
    This is needed to avoid syntactic ambiguity.  An example is:
-->
この規則は構文が曖昧になることを防ぐためのものです。  
以下に例を示します。
<programlisting>
SELECT 3 OPERATOR(pg_catalog.+) 4;
</programlisting>
<!--
    In practice one usually relies on the search path for operators,
    so as not to have to write anything so ugly as that.
-->
実際の場面ではこのような見づらい構文を書かなくて済むように、演算子についても検索パスが使用されています。
   </para>
  </sect2>

  <sect2 id="ddl-schemas-priv">
<!--
   <title>Schemas and Privileges</title>
-->
   <title>スキーマおよび権限</title>

   <indexterm zone="ddl-schemas-priv">
<!--
    <primary>privilege</primary>
    <secondary sortas="schemas">for schemas</secondary>
-->
    <primary>権限</primary>
    <secondary sortas="schemas">スキーマ用の</secondary>
   </indexterm>

   <para>
<!--
    By default, users cannot access any objects in schemas they do not
    own.  To allow that, the owner of the schema must grant the
    <literal>USAGE</literal> privilege on the schema.  To allow users
    to make use of the objects in the schema, additional privileges
    might need to be granted, as appropriate for the object.
-->
ユーザは、デフォルトでは所有していないスキーマのオブジェクトをアクセスすることはできません。
アクセスするためには、そのスキーマの所有者からスキーマの<literal>USAGE</literal>権限を付与してもらわなければなりません。
そのスキーマ内のオブジェクトに対して操作を行うには、そのオブジェクトに応じて、さらに追加の権限が必要となる場合があります。
   </para>

   <para>
<!--
    A user can also be allowed to create objects in someone else's
    schema.  To allow that, the <literal>CREATE</literal> privilege on
    the schema needs to be granted.  Note that by default, everyone
    has <literal>CREATE</literal> and <literal>USAGE</literal> privileges on
    the schema
    <literal>public</literal>.  This allows all users that are able to
    connect to a given database to create objects in its
    <literal>public</literal> schema.  If you do
    not want to allow that, you can revoke that privilege:
-->
他のユーザのスキーマ内でオブジェクトを作成することも可能です。
それには、スキーマ上で<literal>CREATE</literal>権限が付与されていなければなりません。
デフォルトでは、<literal>public</literal> スキーマに関しては全てのユーザが<literal>CREATE</literal>と<literal>USAGE</literal>権限を持っていることに注意してください。
つまり、全てのユーザは、そのユーザが接続できる任意のデータベース上の<literal>public</literal>スキーマにオブジェクトを作成できるということです。
これが好ましくない場合は、以下のように権限を取り消すことができます。
<programlisting>
REVOKE CREATE ON SCHEMA public FROM PUBLIC;
</programlisting>
<!--
    (The first <quote>public</quote> is the schema, the second
    <quote>public</quote> means <quote>every user</quote>.  In the
    first sense it is an identifier, in the second sense it is a
    key word, hence the different capitalization; recall the
    guidelines from <xref linkend="sql-syntax-identifiers">.)
-->
（最初の<quote>public</quote>はスキーマです。2番目の<quote>public</quote>は<quote>全てのユーザ</quote>を意味します。
最初のpublicは識別子で、2番目のpublicはキーワードなので、それぞれ小文字、大文字を使用しています。<xref linkend="sql-syntax-identifiers">のガイドラインを思い出してください。）
   </para>
  </sect2>

  <sect2 id="ddl-schemas-catalog">
<!--
   <title>The System Catalog Schema</title>
-->
   <title>システムカタログスキーマ</title>

   <indexterm zone="ddl-schemas-catalog">
<!--
    <primary>system catalog</primary>
    <secondary>schema</secondary>
-->
    <primary>システムカタログ</primary>
    <secondary>スキーマ</secondary>
   </indexterm>

   <para>
<!--
    In addition to <literal>public</> and user-created schemas, each
    database contains a <literal>pg_catalog</> schema, which contains
    the system tables and all the built-in data types, functions, and
    operators.  <literal>pg_catalog</> is always effectively part of
    the search path.  If it is not named explicitly in the path then
    it is implicitly searched <emphasis>before</> searching the path's
    schemas.  This ensures that built-in names will always be
    findable.  However, you can explicitly place
    <literal>pg_catalog</> at the end of your search path if you
    prefer to have user-defined names override built-in names.
-->
各データベースには、<literal>public</>およびユーザ作成のスキーマの他に<literal>pg_catalog</>スキーマが含まれています。
このスキーマにはシステムテーブルと全ての組み込みデータ型、関数および演算子が含まれています。
<literal>pg_catalog</>は常に検索パスに含まれています。
パスに明示的にリストされていない場合は、パスのスキーマを検索する<emphasis>前</>に暗黙的に検索されます。
これにより組み込みの名前が常に検索されることが保証されます。
しかし、ユーザ定義の名前で組み込みの名前を上書きする場合は、<literal>pg_catalog</>を明示的にパスの最後に置くことができます。
   </para>

   <para>
<!--
    In <productname>PostgreSQL</productname> versions before 7.3,
    table names beginning with <literal>pg_</> were reserved.  This is
    no longer true: you can create such a table name if you wish, in
    any non-system schema.  However, it's best to continue to avoid
    such names, to ensure that you won't suffer a conflict if some
    future version defines a system table named the same as your
    table.  (With the default search path, an unqualified reference to
    your table name would then be resolved as the system table instead.)
    System tables will continue to follow the convention of having
    names beginning with <literal>pg_</>, so that they will not
    conflict with unqualified user-table names so long as users avoid
    the <literal>pg_</> prefix.
-->
<productname>PostgreSQL</productname> 7.3より前のバージョンでは、<literal>pg_</>で始まるテーブル名は予約されていました。
しかし現在では変更され、システムスキーマ以外のスキーマにも<literal>pg_</>で始まる名前を付けられるようになりました。
ただし、このような名前は使用しないのが得策と言えます。
今後のバージョンでユーザのテーブルと同じ名前のシステムカタログが定義され、競合する事態を避けるためです。
（その結果、デフォルトの検索パスでは、ユーザのテーブル名への非修飾の参照はシステムカタログとして解決されることになります。）
システムカタログは今後も<literal>pg_</>で始まる規則に従うので、ユーザが<literal>pg_</>という接頭辞を使わない限り、非修飾のユーザ定義テーブル名がシステムカタログと競合することはありません。
   </para>
  </sect2>

  <sect2 id="ddl-schemas-patterns">
<!--
   <title>Usage Patterns</title>
-->
   <title>使用パターン</title>

   <para>
<!--
    Schemas can be used to organize your data in many ways.  There are
    a few usage patterns that are recommended and are easily supported by
    the default configuration:
-->
スキーマは様々な方法でデータの編成に使用できます。
デフォルト構成で簡単にサポートできるお勧めの使用パターンがいくつかあります。
    <itemizedlist>
     <listitem>
      <para>
<!--
       If you do not create any schemas then all users access the
       public schema implicitly.  This simulates the situation where
       schemas are not available at all.  This setup is mainly
       recommended when there is only a single user or a few cooperating
       users in a database.  This setup also allows smooth transition
       from the non-schema-aware world.
-->
スキーマを作成しない場合は、全てのユーザが暗黙にpublicスキーマにアクセスします。
これはスキーマがまったく使用できない状況と同じです。
この構成は主に、データベースで作業するのが1人または2、3人しかいない場合に推奨されます。
またこの構成では、スキーマを認識しない状況からの移行を容易に行えます。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       You can create a schema for each user with the same name as
       that user.  Recall that the default search path starts with
       <literal>$user</literal>, which resolves to the user name.
       Therefore, if each user has a separate schema, they access their
       own schemas by default.
-->
それぞれのユーザに、ユーザ名と同じ名前のスキーマを作成することができます。
デフォルトの検索パスが、ユーザ名として解決される<literal>$user</literal>で始まることを思い出してください。
つまり、各ユーザが個別のスキーマを持っていると、デフォルトでそれぞれのスキーマにアクセスすることになります。
      </para>

      <para>
<!--
       If you use this setup then you might also want to revoke access
       to the public schema (or drop it altogether), so users are
       truly constrained to their own schemas.
-->
この設定を使用する場合は、publicスキーマへのアクセス権を取り消して（またはスキーマを削除して）、ユーザが完全に自分のスキーマにしかアクセスできないようにすることもできます。 
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       To install shared applications (tables to be used by everyone,
       additional functions provided by third parties, etc.), put them
       into separate schemas.  Remember to grant appropriate
       privileges to allow the other users to access them.  Users can
       then refer to these additional objects by qualifying the names
       with a schema name, or they can put the additional schemas into
       their search path, as they choose.
-->
共有アプリケーション（共有で使うテーブル、サードパーティ提供の追加関数など）をインストールする際には、それぞれ別のスキーマに入れるようにしてください。
また他のユーザがこれらにアクセスできるように適切な権限を付与することを忘れないようにしてください。
それによって他のユーザは、追加のオブジェクトをスキーマ名で修飾することによって参照したり、希望するならば、スキーマをそれぞれの検索パスに追加したりすることができます。
      </para>
     </listitem>
    </itemizedlist>
   </para>
  </sect2>

  <sect2 id="ddl-schemas-portability">
<!--
   <title>Portability</title>
-->
   <title>移植性</title>

   <para>
<!--
    In the SQL standard, the notion of objects in the same schema
    being owned by different users does not exist.  Moreover, some
    implementations do not allow you to create schemas that have a
    different name than their owner.  In fact, the concepts of schema
    and user are nearly equivalent in a database system that
    implements only the basic schema support specified in the
    standard.  Therefore, many users consider qualified names to
    really consist of
    <literal><replaceable>username</>.<replaceable>tablename</></literal>.
    This is how <productname>PostgreSQL</productname> will effectively
    behave if you create a per-user schema for every user.
-->
標準SQLでは、1つのスキーマ内の異なるユーザが所有するオブジェクトという概念は存在しません。
それどころか、実装によっては所有者と異なる名前のスキーマを作成することが許可されていない場合もあります。
実際、標準で規定されている基本スキーマサポートのみを実装しているデータベースシステムでは、スキーマという概念とユーザという概念はほとんど同じなのです。
そのため、修飾名とは<literal><replaceable>username</>.<replaceable>tablename</></literal>のことであると思っているユーザはたくさんいます。
<productname>PostgreSQL</productname>においても、ユーザごとに1つのスキーマを作成すると、このようになります。
   </para>

   <para>
<!--
    Also, there is no concept of a <literal>public</> schema in the
    SQL standard.  For maximum conformance to the standard, you should
    not use (perhaps even remove) the <literal>public</> schema.
-->
また、標準SQLには、<literal>public</>スキーマという概念もありません。
標準に最大限従うためには、<literal>public</>スキーマは使用すべきではありません（おそらく削除した方が良いかもしれません）。
   </para>

   <para>
<!--
    Of course, some SQL database systems might not implement schemas
    at all, or provide namespace support by allowing (possibly
    limited) cross-database access.  If you need to work with those
    systems, then maximum portability would be achieved by not using
    schemas at all.
-->
もちろん、スキーマをまったく実装していなかったり、または、データベース間アクセスを（場合によっては制限付きで）許可することによって名前空間の使用をサポートしているSQLデータベースもあります。
このようなシステムで作業する必要がある場合は、スキーマをまったく使わないようにすることで最大限の移植性を実現できます。
   </para>
  </sect2>
 </sect1>

 <sect1 id="ddl-inherit">
<!--
  <title>Inheritance</title>
-->
  <title>継承</title>

  <indexterm>
<!--
   <primary>inheritance</primary>
-->
   <primary>継承</primary>
  </indexterm>

  <indexterm>
<!--
   <primary>table</primary>
   <secondary>inheritance</secondary>
-->
   <primary>テーブル</primary>
   <secondary>継承</secondary>
  </indexterm>

  <para>
<!--
   <productname>PostgreSQL</productname> implements table inheritance,
   which can be a useful tool for database designers.  (SQL:1999 and
   later define a type inheritance feature, which differs in many
   respects from the features described here.)
-->
<productname>PostgreSQL</productname>は、データベース設計者にとって便利なテーブルの継承を実装しています。
（SQL:1999以降は型の継承を定義していますが、ここで述べられている継承とは多くの点で異なっています。）
  </para>

  <para>
<!--
   Let's start with an example: suppose we are trying to build a data
   model for cities.  Each state has many cities, but only one
   capital. We want to be able to quickly retrieve the capital city
   for any particular state. This can be done by creating two tables,
   one for state capitals and one for cities that are not
   capitals. However, what happens when we want to ask for data about
   a city, regardless of whether it is a capital or not? The
   inheritance feature can help to resolve this problem. We define the
   <structname>capitals</structname> table so that it inherits from
   <structname>cities</structname>:
-->
まず例から始めましょう。
市（cities）のデータモデルを作成しようとしていると仮定してください。
それぞれの州にはたくさんの市がありますが、州都（capitals）は1つのみです。
特定の州から州都を素早く検索したいとします。
これは、2つのテーブルを作成することにより実現できます。
1つは州都のテーブルで、もう1つは州都ではないテーブルです。
しかし、州都であるか否かに関わらない市に対するデータを問い合わせたときには何が起こるでしょうか？
継承はこの問題を解決できます。
<structname>cities</structname>から継承される<structname>capitals</structname>テーブルを定義するのです。

<programlisting>
CREATE TABLE cities (
    name            text,
    population      float,
    altitude        int     -- in feet
);

CREATE TABLE capitals (
    state           char(2)
) INHERITS (cities);
</programlisting>

<!--
   In this case, the <structname>capitals</> table <firstterm>inherits</>
   all the columns of its parent table, <structname>cities</>. State
   capitals also have an extra column, <structfield>state</>, that shows
   their state.
-->
この場合、<structname>capitals</>テーブルは、その親テーブルである<structname>cities</>テーブルの列をすべて<firstterm>継承</>します。
州都は1つの余分な列<structfield>state</>を持ち、州を表現します。
  </para>

  <para>
<!--
   In <productname>PostgreSQL</productname>, a table can inherit from
   zero or more other tables, and a query can reference either all
   rows of a table or all rows of a table plus all of its descendant tables.
   The latter behavior is the default.
   For example, the following query finds the names of all cities,
   including state capitals, that are located at an altitude over
   500 feet:
-->
<productname>PostgreSQL</productname>では、1つのテーブルは、0以上のテーブルから継承することが可能です。
また、問い合わせはテーブルのすべての行、またはテーブルのすべての行と継承されたテーブルのすべての行のいずれかを参照できます。
後者がデフォルトの動作になります。
例えば次の問い合わせは、500フィートより上に位置している州都を含んだ、すべての市の名前を検索します。

<programlisting>
SELECT name, altitude
    FROM cities
    WHERE altitude &gt; 500;
</programlisting>

<!--
   Given the sample data from the <productname>PostgreSQL</productname>
   tutorial (see <xref linkend="tutorial-sql-intro">), this returns:
-->
<productname>PostgreSQL</productname>チュートリアルからのサンプルデータ（<xref linkend="tutorial-sql-intro">を参照してください）に対して、この問い合わせは、以下の結果を出力します。

<programlisting>
   name    | altitude
-----------+----------
 Las Vegas |     2174
 Mariposa  |     1953
 Madison   |      845
</programlisting>
  </para>

  <para>
<!--
   On the other hand, the following query finds all the cities that
   are not state capitals and are situated at an altitude over 500 feet:
-->
一方、次の問い合わせは、州都ではなく500フィートより上に位置しているすべての市を検索します。

<programlisting>
SELECT name, altitude
    FROM ONLY cities
    WHERE altitude &gt; 500;

   name    | altitude
-----------+----------
 Las Vegas |     2174
 Mariposa  |     1953
</programlisting>
  </para>

  <para>
<!--
   Here the <literal>ONLY</literal> keyword indicates that the query
   should apply only to <structname>cities</structname>, and not any tables
   below <structname>cities</structname> in the inheritance hierarchy.  Many
   of the commands that we have already discussed &mdash;
   <command>SELECT</command>, <command>UPDATE</command> and
   <command>DELETE</command> &mdash; support the
   <literal>ONLY</literal> keyword.
-->
ここで<literal>ONLY</literal>キーワードは、問い合わせが<structname>cities</structname>テーブルのみを対象にし<structname>cities</structname>以下の継承の階層にあるテーブルは対象としないことを意味します。
これまで議論したコマンドの多く&mdash;<command>SELECT</command>、<command>UPDATE</command>そして<command>DELETE</command> &mdash;が<literal>ONLY</literal>キーワードをサポートしています。
  </para>

  <para>
<!--
   You can also write the table name with a trailing <literal>*</>
   to explicitly specify that descendant tables are included:
-->
また、明示的に子孫テーブルが含まれていることを示すために、テーブル名の後ろに<literal>*</>を書くこともできます:

<programlisting>
SELECT name, altitude
    FROM cities*
    WHERE altitude &gt; 500;
</programlisting>

<!--
   Writing <literal>*</> is not necessary, since this behavior is
   the default (unless you have changed the setting of the
   <xref linkend="guc-sql-inheritance"> configuration option).
   However writing <literal>*</> might be useful to emphasize that
   additional tables will be searched.
-->
<literal>*</>の指定は、その動作がデフォルトである（あなたが<xref linkend="guc-sql-inheritance">構成オプションの設定を変更していない限り）ため必須ではありません。
しかしながら、<literal>*</>を指定することは、追加のテーブルが検索されることを強調するのに有効でしょう。
  </para>

  <para>
<!--
   In some cases you might wish to know which table a particular row
   originated from. There is a system column called
   <structfield>tableoid</structfield> in each table which can tell you the
   originating table:
-->
場合によっては、ある特定の行がどのテーブルからきたものか知りたいということがあるかもしれません。
それぞれのテーブルには<structfield>tableoid</structfield>という、元になったテーブルを示すシステム列があります。

<programlisting>
SELECT c.tableoid, c.name, c.altitude
FROM cities c
WHERE c.altitude &gt; 500;
</programlisting>

<!--
   which returns:
-->
出力は以下の通りです。

<programlisting>
 tableoid |   name    | altitude
----------+-----------+----------
   139793 | Las Vegas |     2174
   139793 | Mariposa  |     1953
   139798 | Madison   |      845
</programlisting>

<!--
   (If you try to reproduce this example, you will probably get
   different numeric OIDs.)  By doing a join with
   <structname>pg_class</> you can see the actual table names:
-->
（この例をそのまま実行しても、おそらく異なる数値OIDが得られるでしょう。）
<structname>pg_class</>と結合することで、テーブルの実際の名前が分かります。

<programlisting>
SELECT p.relname, c.name, c.altitude
FROM cities c, pg_class p
WHERE c.altitude &gt; 500 AND c.tableoid = p.oid;
</programlisting>

<!--
   which returns:
-->
出力は以下の通りです。

<programlisting>
 relname  |   name    | altitude
----------+-----------+----------
 cities   | Las Vegas |     2174
 cities   | Mariposa  |     1953
 capitals | Madison   |      845
</programlisting>
  </para>

  <para>
<!--
   Inheritance does not automatically propagate data from
   <command>INSERT</command> or <command>COPY</command> commands to
   other tables in the inheritance hierarchy. In our example, the
   following <command>INSERT</command> statement will fail:
-->
継承は<command>INSERT</command>または<command>COPY</command>により、継承の階層にある他のテーブルにデータを自動的に伝播することはありません。
この例では、次の<command>INSERT</command>文は失敗します。
<programlisting>
INSERT INTO cities (name, population, altitude, state)
VALUES ('New York', NULL, NULL, 'NY');
</programlisting>
<!--
   We might hope that the data would somehow be routed to the
   <structname>capitals</structname> table, but this does not happen:
   <command>INSERT</command> always inserts into exactly the table
   specified.  In some cases it is possible to redirect the insertion
   using a rule (see <xref linkend="rules">).  However that does not
   help for the above case because the <structname>cities</> table
   does not contain the column <structfield>state</>, and so the
   command will be rejected before the rule can be applied.
-->
データが、どうにかして<structname>capitals</structname>テーブルまで到達できればいいのですが、そのようにはなりません。
<command>INSERT</command>は、いつも指定されたテーブルに対してデータを挿入します。
ルール（詳細は<xref linkend="rules">を参照してください）を使用して挿入を中継できる場合もあります。
しかし、ルールを使用しても上記のような場合には適用できません。
なぜなら、<structname>cities</>テーブルには<structfield>state</>列は含んでいませんし、ルールが適用される前にコマンドは拒否されてしまうからです。
  </para>

  <para>
<!--
   All check constraints and not-null constraints on a parent table are
   automatically inherited by its children.  Other types of constraints
   (unique, primary key, and foreign key constraints) are not inherited.
-->
親テーブル上の検査制約と非NULL制約はその子テーブルに自動的に継承されます。
他の種類の制約（一意性制約、プライマリキー、外部キー制約）は継承されません。
  </para>

  <para>
<!--
   A table can inherit from more than one parent table, in which case it has
   the union of the columns defined by the parent tables.  Any columns
   declared in the child table's definition are added to these.  If the
   same column name appears in multiple parent tables, or in both a parent
   table and the child's definition, then these columns are <quote>merged</>
   so that there is only one such column in the child table.  To be merged,
   columns must have the same data types, else an error is raised.  The
   merged column will have copies of all the check constraints coming from
   any one of the column definitions it came from, and will be marked not-null
   if any of them are.
-->
テーブルは1つ以上の親テーブルから継承可能です。
この場合、テーブルは親テーブルで定義された列の和になります。
子テーブルで宣言された列は、これらの列に追加されることになります。
もし親テーブルに同じ名前の列がある場合、もしくは、親テーブルと子テーブルに同じ名前の列がある場合は、列が<quote>統合</>されて子テーブルではただ1つの列となります。
統合されるには列は同じデータ型を持っている必要があります。
異なるデータ型の場合にはエラーとなります。
統合された列は、元となったテーブルで列定義が持つすべての検査制約のコピーを持ちます。
そして、列定義のいずれかが非NULL制約を持てば、非NULLという印が付きます。
  </para>

  <para>
<!--
   Table inheritance is typically established when the child table is
   created, using the <literal>INHERITS</> clause of the
   <xref linkend="sql-createtable">
   statement.
   Alternatively, a table which is already defined in a compatible way can
   have a new parent relationship added, using the <literal>INHERIT</literal>
   variant of <xref linkend="sql-altertable">.
   To do this the new child table must already include columns with
   the same names and types as the columns of the parent. It must also include
   check constraints with the same names and check expressions as those of the
   parent. Similarly an inheritance link can be removed from a child using the
   <literal>NO INHERIT</literal> variant of <command>ALTER TABLE</>.
   Dynamically adding and removing inheritance links like this can be useful
   when the inheritance relationship is being used for table
   partitioning (see <xref linkend="ddl-partitioning">).
-->
テーブル継承は、通常、<xref linkend="sql-createtable">文の<literal>INHERITS</>句を使用して、子テーブルを作成する時に確立します。
他にも、互換性を持つ方法で定義済みのテーブルに新しく親子関係を付けることも可能です。
これには<xref linkend="sql-altertable">の<literal>INHERIT</literal>形式を使用します。
このためには、新しい子テーブルは親テーブルと同じ名前の列を持ち、その列の型は同じデータ型でなければなりません。
また、親テーブルと同じ名前、同じ式の検査制約を持っていなければなりません。
<command>ALTER TABLE</>の<literal>NO INHERIT</literal>形式を使用して、同様に継承関係を子テーブルから取り除くことも可能です。
このような継承関係の動的追加、動的削除は、継承関係をテーブル分割（<xref linkend="ddl-partitioning">を参照）に使用している場合に有用です。
  </para>

  <para>
<!--
   One convenient way to create a compatible table that will later be made
   a new child is to use the <literal>LIKE</literal> clause in <command>CREATE
   TABLE</command>. This creates a new table with the same columns as
   the source table. If there are any <literal>CHECK</literal>
   constraints defined on the source table, the <literal>INCLUDING
   CONSTRAINTS</literal> option to <literal>LIKE</literal> should be
   specified, as the new child must have constraints matching the parent
   to be considered compatible.
-->
後で子テーブルとする予定の、互換性を持つテーブルを簡単に作成する方法の1つは、<command>CREATE TABLE</command>で<literal>LIKE</literal>句を使用することです。
これは、元としたテーブルと同じ列を持つテーブルを新しく作成します。
新しい子テーブルが必ず親テーブルと一致する制約を持ち、互換性があるものとみなされるように、元となるテーブルで<literal>CHECK</literal>制約が存在する場合は、<literal>LIKE</literal>に<literal>INCLUDING CONSTRAINTS</literal>オプションを指定すべきです。
  </para>

  <para>
<!--
   A parent table cannot be dropped while any of its children remain. Neither
   can columns or check constraints of child tables be dropped or altered
   if they are inherited
   from any parent tables. If you wish to remove a table and all of its
   descendants, one easy way is to drop the parent table with the
   <literal>CASCADE</literal> option.
-->
子テーブルが存在する場合親テーブルを削除することはできません。
また、子テーブルでは、親テーブルから継承した列、または検査制約を削除することも変更することもできません。
テーブルとそのすべての子テーブルを削除したければ、<literal>CASCADE</literal>オプションを付けて親テーブルを削除することが簡単な方法です。
  </para>

  <para>
<!--
   <xref linkend="sql-altertable"> will
   propagate any changes in column data definitions and check
   constraints down the inheritance hierarchy.  Again, dropping
   columns that are depended on by other tables is only possible when using
   the <literal>CASCADE</literal> option. <command>ALTER
   TABLE</command> follows the same rules for duplicate column merging
   and rejection that apply during <command>CREATE TABLE</command>.
-->
<xref linkend="sql-altertable">は、列データ定義と検査制約の変更を継承の階層にあるテーブルに伝えます。
繰り返しになりますが、他のテーブルに依存する列の削除は<literal>CASCADE</literal>オプションを使用したときのみ可能となります。
<command>ALTER TABLE</command>は、重複列の統合時に適用される規則と<command>CREATE TABLE</command>時に適用される拒否の規則に従います。
  </para>

  <para>
<!--
   Note how table access permissions are handled.  Querying a parent
   table can automatically access data in child tables without further
   access privilege checking.  This preserves the appearance that the
   data is (also) in the parent table.  Accessing the child tables
   directly is, however, not automatically allowed and would require
   further privileges to be granted.
-->
テーブルアクセス権限がどのように扱われるかに注意して下さい。
親テーブルへの問い合わせでは、それ以上アクセス権限を検査することなく自動的に子テーブルのデータにアクセスできます。
これによりデータが親テーブルに（も）あるように見えることが保たれます。
しかし、子テーブルへの直接のアクセスは自動的に許可されることはなく、追加の権限の付与が要求されるでしょう。
  </para>

 <sect2 id="ddl-inherit-caveats">
<!--
  <title>Caveats</title>
-->
  <title>警告</title>

  <para>
<!--
   Note that not all SQL commands are able to work on
   inheritance hierarchies.  Commands that are used for data querying,
   data modification, or schema modification
   (e.g., <literal>SELECT</literal>, <literal>UPDATE</literal>, <literal>DELETE</literal>,
   most variants of <literal>ALTER TABLE</literal>, but
   not <literal>INSERT</literal> or <literal>ALTER TABLE ...
   RENAME</literal>) typically default to including child tables and
   support the <literal>ONLY</literal> notation to exclude them.
   Commands that do database maintenance and tuning
   (e.g., <literal>REINDEX</literal>, <literal>VACUUM</literal>)
   typically only work on individual, physical tables and do not
   support recursing over inheritance hierarchies.  The respective
   behavior of each individual command is documented in its reference
   page (<xref linkend="sql-commands">).
-->
すべてのSQLコマンドが継承階層に対して動作できるとは限らないことに注意してください。
データの検索、データの変更、スキーマの変更のために使用されるコマンド（例えば<literal>SELECT</literal>、<literal>UPDATE</literal>、<literal>DELETE</literal>、<literal>ALTER TABLE</literal>のほとんどの構文です。しかし<literal>INSERT</literal>や<literal>ALTER TABLE ... RENAME</literal>は除きます。）は通常、デフォルトで子テーブルを含み、また、それを除外するための<literal>ONLY</literal>記法をサポートします。
データベース保守およびチューニング（例えば<literal>REINDEX</literal>、<literal>VACUUM</literal>）を行うコマンドは通常、個々の物理テーブルに対してのみ動作し、継承階層に対する再帰をサポートしません。
個々のコマンドのそれぞれの動作はそのマニュアルページ（<xref linkend="sql-commands">）に記載されています。
  </para>

  <para>
<!--
   A serious limitation of the inheritance feature is that indexes (including
   unique constraints) and foreign key constraints only apply to single
   tables, not to their inheritance children. This is true on both the
   referencing and referenced sides of a foreign key constraint. Thus,
   in the terms of the above example:
-->
継承機能の厳しい制限として、（一意性制約を含む）インデックス、および外部キーは、そのテーブルのみに適用され、それを継承した子テーブルには適用されないことがあります。これは外部キーの参照側、被参照側でも同様に適用されません。
したがって、上の例では

   <itemizedlist>
    <listitem>
     <para>
<!--
      If we declared <structname>cities</>.<structfield>name</> to be
      <literal>UNIQUE</> or a <literal>PRIMARY KEY</>, this would not stop the
      <structname>capitals</> table from having rows with names duplicating
      rows in <structname>cities</>.  And those duplicate rows would by
      default show up in queries from <structname>cities</>.  In fact, by
      default <structname>capitals</> would have no unique constraint at all,
      and so could contain multiple rows with the same name.
      You could add a unique constraint to <structname>capitals</>, but this
      would not prevent duplication compared to <structname>cities</>.
-->
もし、<structname>cities</>.<structfield>name</>を<literal>UNIQUE</>または<literal>PRIMARY KEY</>と宣言しても、<structname>cities</>テーブルの行と重複した行を<structname>capitals</>テーブル内に持つことを禁止することにはなりません。
さらに、これらの重複した行はデフォルトで<structname>cities</>テーブルへの問い合わせで現れるでしょう。
事実として、<structname>capitals</>テーブルはデフォルトで一意性制約を持っていませんし、同一の名前の複数の行を持つことがあり得ます。
<structname>capitals</>テーブルに一意性制約を追加できますが、これは<structname>cities</>テーブルと比較して重複を禁止することにはなりません。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      Similarly, if we were to specify that
      <structname>cities</>.<structfield>name</> <literal>REFERENCES</> some
      other table, this constraint would not automatically propagate to
      <structname>capitals</>.  In this case you could work around it by
      manually adding the same <literal>REFERENCES</> constraint to
      <structname>capitals</>.
-->
同じように、もし<structname>cities</>.<structfield>name</> <literal>REFERENCES</>他のテーブルとしても、この制約は自動的に<structname>capitals</>に引き継がれるわけではありません。
この場合は<structname>capitals</>テーブルに同一の<literal>REFERENCES</>制約を手動で追加しなければいけません。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      Specifying that another table's column <literal>REFERENCES
      cities(name)</> would allow the other table to contain city names, but
      not capital names.  There is no good workaround for this case.
-->
他のテーブルの列<literal>REFERENCES cities(name)</>を指定することは、他のテーブルが市の名前を持つことを許可しますが、州都の名前を持つことを許可しません。
この場合は次善策はありません。
     </para>
    </listitem>
   </itemizedlist>

<!--
   These deficiencies will probably be fixed in some future release,
   but in the meantime considerable care is needed in deciding whether
   inheritance is useful for your application.
-->
これらの機能の不足は、今後のリリースでおそらく改善されるでしょう。
しかし当面、継承がアプリケーションにとって有用であるかどうかを判断する際に十分注意してください。
  </para>

  <note>
<!--
   <title>Deprecated</title>
-->
   <title>推奨しない設定</title>
   <para>
<!--
     In releases of <productname>PostgreSQL</productname> prior to 7.1, the
     default behavior was not to include child tables in queries. This was
     found to be error prone and also in violation of the SQL
     standard.  You can get the pre-7.1 behavior by turning off the
     <xref linkend="guc-sql-inheritance"> configuration
     option.
-->
7.1より前のリリースの<productname>PostgreSQL</productname>では、問い合わせにおいて子テーブルを含まないことがデフォルトでした。
これはエラーとなりやすく、また標準SQLにも抵触しています。
7.1より前の古い動作を行うようにするには、<xref linkend="guc-sql-inheritance">設定オプションを無効にしてください。
   </para>
  </note>

   </sect2>
  </sect1>

  <sect1 id="ddl-partitioning">
<!--
   <title>Partitioning</title>
-->
   <title>パーティショニング</title>

   <indexterm>
<!--
    <primary>partitioning</primary>
-->
    <primary>パーティショニング</primary>
   </indexterm>

   <indexterm>
<!--
    <primary>table</primary>
    <secondary>partitioning</secondary>
-->
    <primary>テーブル</primary>
    <secondary>パーティショニング</secondary>
   </indexterm>

   <para>
<!--
    <productname>PostgreSQL</productname> supports basic table
    partitioning. This section describes why and how to implement
    partitioning as part of your database design.
-->
<productname>PostgreSQL</productname>は基本的なテーブルのパーティショニング（分割）をサポートしています。
この節では、データベース設計において、なぜそしてどのようにしてパーティショニングを実装するのかを解説します。
   </para>

   <sect2 id="ddl-partitioning-overview">
<!--
     <title>Overview</title>
-->
     <title>概要</title>

   <para>
<!--
    Partitioning refers to splitting what is logically one large table
    into smaller physical pieces.
    Partitioning can provide several benefits:
-->
パーティショニングは論理的に1つの大きなテーブルを、物理的に小さなパーティションに分けることを指します。
パーティショニングはいくつかの利点があります。
   <itemizedlist>
    <listitem>
     <para>
<!--
      Query performance can be improved dramatically in certain situations,
      particularly when most of the heavily accessed rows of the table are in a
      single partition or a small number of partitions.  The partitioning
      substitutes for leading columns of indexes, reducing index size and
      making it more likely that the heavily-used parts of the indexes
      fit in memory.
-->
特定の状況において、問い合わせのパフォーマンスが劇的に改善されます。
具体的には、アクセスが多いテーブル内の行を単一パーティションまたは一部のパーティション内に収めることです。
パーティショニングはインデックスの先頭の列を置き換え、インデックスサイズが減少します。
このため、インデックス内のよく使用される部分がメモリ内により収まりやすくなります。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      When queries or updates access a large percentage of a single
      partition, performance can be improved by taking advantage
      of sequential scan of that partition instead of using an
      index and random access reads scattered across the whole table.
-->
問い合わせや更新が単一パーティションの大部分にアクセスする場合、インデックススキャンとテーブル全体に渡って散乱したランダムアクセス読み取りの代わりに、そのパーティションのシーケンシャルスキャンとすることができ、性能は改善します。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      Bulk loads and deletes can be accomplished by adding or removing
      partitions, if that requirement is planned into the partitioning design.
      <command>ALTER TABLE NO INHERIT</> and <command>DROP TABLE</> are
      both far faster than a bulk operation.
      These commands also entirely avoid the <command>VACUUM</command>
      overhead caused by a bulk <command>DELETE</>.
-->
その指定がパーティション設計に合うように計画されていれば、一括でのロードや削除が、パーティションの追加や削除によってなされる可能性があります。
<command>ALTER TABLE NO INHERIT</>や<command>DROP TABLE</>は両方とも一括操作よりもずっと高速です。
また、これらのコマンドは大量の<command>DELETE</>によって発生する<command>VACUUM</command>のオーバーヘッドを完全に防ぎます。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      Seldom-used data can be migrated to cheaper and slower storage media.
-->
めったに使用されないデータは、安価で遅い記憶メディアに移行できます。
     </para>
    </listitem>
   </itemizedlist>

<!--
    The benefits will normally be worthwhile only when a table would
    otherwise be very large. The exact point at which a table will
    benefit from partitioning depends on the application, although a
    rule of thumb is that the size of the table should exceed the physical
    memory of the database server.
-->
この利点は、テーブルのサイズがとても大きくなる場合に価値が出てきます。
テーブルのパーティショニングによる利点はアプリケーションに依存しますが、経験的にテーブルのサイズがデータベースサーバの物理メモリを超えるかどうかということがポイントになります。
   </para>

   <para>
<!--
    Currently, <productname>PostgreSQL</productname> supports partitioning
    via table inheritance.  Each partition must be created as a child
    table of a single parent table.  The parent table itself is normally
    empty; it exists just to represent the entire data set.  You should be
    familiar with inheritance (see <xref linkend="ddl-inherit">) before
    attempting to set up partitioning.
-->
現状では<productname>PostgreSQL</productname>は、パーティショニングをテーブルの継承によりサポートしています。
それぞれのパーティションは1つの親テーブルの子テーブルとして作成されなくてはいけません。
親テーブル自身は通常、空のテーブルとなり、全体のデータを代表するために存在します。
パーティショニングを設定する前に、継承（<xref linkend="ddl-inherit">を参照してください）について詳しく知っておく必要があります。
   </para>

   <para>
<!--
    The following forms of partitioning can be implemented in
    <productname>PostgreSQL</productname>:
-->
パーティショニングについて次の種類が<productname>PostgreSQL</productname>に実装されています。

    <variablelist>
     <varlistentry>
<!--
      <term>Range Partitioning</term>
-->
      <term>範囲分割</term>

      <listitem>
       <para>
<!--
        The table is partitioned into <quote>ranges</quote> defined
        by a key column or set of columns, with no overlap between
        the ranges of values assigned to different partitions.  For
        example one might partition by date ranges, or by ranges of
        identifiers for particular business objects.
-->
テーブルは、キーとなる列もしくは列のセットにより定義される<quote>範囲</quote>に分割されます。異なるパーティションに割り当てられた値の範囲は重なることはありません。
例えば、日付の範囲により分割されたり、特定のビジネスオブジェクトの識別子の範囲により分割されたりします。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
<!--
      <term>List Partitioning</term>
-->
      <term>リスト分割</term>

      <listitem>
       <para>
<!--
        The table is partitioned by explicitly listing which key values
        appear in each partition.
-->
キー値がそれぞれのパーティションに現れるような明示的なリストにより、テーブルが分割されます。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
   </sect2>

   <sect2 id="ddl-partitioning-implementation">
<!--
     <title>Implementing Partitioning</title>
-->
     <title>パーティショニングの実装</title>

    <para>
<!--
     To set up a partitioned table, do the following:
-->
テーブルのパーティショニングを実装するには、以下を行ってください。
     <orderedlist spacing="compact">
      <listitem>
       <para>
<!--
        Create the <quote>master</quote> table, from which all of the
        partitions will inherit.
-->
すべてのパーティションが継承することになる、<quote>マスタ</quote>テーブルを作成してください。
       </para>
       <para>
<!--
        This table will contain no data.  Do not define any check
        constraints on this table, unless you intend them to
        be applied equally to all partitions.  There is no point
        in defining any indexes or unique constraints on it, either.
-->
このテーブルはデータを格納しません。
このテーブルにはすべてのパーティションに対して適用されるつもりでなければ検査制約は定義しないでください。
同様にインデックスや一意制約を定義することも意味がありません。
       </para>
      </listitem>

      <listitem>
       <para>
<!--
        Create several <quote>child</quote> tables that each inherit from
        the master table.  Normally, these tables will not add any columns
        to the set inherited from the master.
-->
マスタテーブルから継承された、いくつかの<quote>子</quote>テーブルを作成します。
通常、これらの子テーブルはマスタから継承された列以外には列を追加しないようにします。
       </para>

       <para>
<!--
        We will refer to the child tables as partitions, though they
        are in every way normal <productname>PostgreSQL</> tables.
-->
子テーブルは、あらゆる点で<productname>PostgreSQL</>の普通のテーブルですが、子テーブルをパーティションとして参照することになります。
       </para>
      </listitem>

      <listitem>
       <para>
<!--
        Add table constraints to the partition tables to define the
        allowed key values in each partition.
-->
それぞれのパーティションでのキー値を定義するために、分割されたテーブルにテーブル制約を追加してください。
       </para>

       <para>
<!--
        Typical examples would be:
-->
典型的な例は、
<programlisting>
CHECK ( x = 1 )
CHECK ( county IN ( 'Oxfordshire', 'Buckinghamshire', 'Warwickshire' ))
CHECK ( outletID &gt;= 100 AND outletID &lt; 200 )
</programlisting>
<!--
        Ensure that the constraints guarantee that there is no overlap
        between the key values permitted in different partitions.  A common
        mistake is to set up range constraints like:
-->
制約が、異なるパーティションにおいて許可されているキー値の間で重なりが無いことを保証してください。
よくある間違いは範囲制約を次のように設定してしまうことです。
<programlisting>
CHECK ( outletID BETWEEN 100 AND 200 )
CHECK ( outletID BETWEEN 200 AND 300 )
</programlisting>
<!--
        This is wrong since it is not clear which partition the key value
        200 belongs in.
-->
キー値の200がどちらのパーティションに属するのかが明確になっていないため、これは間違いになります。
       </para>

       <para>
<!--
        Note that there is no difference in
        syntax between range and list partitioning; those terms are
        descriptive only.
-->
範囲分割とリスト分割の間に構文の違いは無いことに注意してください。
これらの字句は記述上のものだけです。
       </para>
      </listitem>

      <listitem>
       <para>
<!--
        For each partition, create an index on the key column(s),
        as well as any other indexes you might want.  (The key index is
        not strictly necessary, but in most scenarios it is helpful.
        If you intend the key values to be unique then you should
        always create a unique or primary-key constraint for each
        partition.)
-->
それぞれのパーティションにおいて、他のインデックスと同様にキーとなる列（列の集合）にインデックスを作成してください。
（キーのインデックスは必ずしも必要でありませんが、たいていの場合に役立ちます。もしキー値が一意であることを意図するのであればいつでも、一意もしくは主キー制約をそれぞれのパーティションに作成してください。）
       </para>
      </listitem>

      <listitem>
       <para>
<!--
        Optionally, define a trigger or rule to redirect data inserted into
        the master table to the appropriate partition.
-->
また、マスタテーブルに挿入されたデータを適当なパーティションに中継するためにトリガもしくはルールを定義してください。
       </para>
      </listitem>

      <listitem>
       <para>
<!--
        Ensure that the <xref linkend="guc-constraint-exclusion">
        configuration parameter is not disabled in
        <filename>postgresql.conf</>.
        If it is, queries will not be optimized as desired.
-->
<xref linkend="guc-constraint-exclusion">設定パラメータが<filename>postgresql.conf</>内で無効になっていないことを確認してください。無効であると、問い合わせは思ったとおりに最適化されません。
       </para>
      </listitem>

     </orderedlist>
    </para>

    <para>
<!--
     For example, suppose we are constructing a database for a large
     ice cream company. The company measures peak temperatures every
     day as well as ice cream sales in each region. Conceptually,
     we want a table like:
-->
例えば、大規模なアイスクリーム会社のデータベースを構築すると仮定してください。会社は、それぞれの地方のアイスクリームの売上と同様に毎日の最高気温を計測しています。
概念的に、次のようなテーブルが必要になります。

<programlisting>
CREATE TABLE measurement (
    city_id         int not null,
    logdate         date not null,
    peaktemp        int,
    unitsales       int
);
</programlisting>

<!--
     We know that most queries will access just the last week's, month's or
     quarter's data, since the main use of this table will be to prepare
     online reports for management.
     To reduce the amount of old data that needs to be stored, we
     decide to only keep the most recent 3 years worth of data. At the
     beginning of each month we will remove the oldest month's data.
-->
ほとんどの問い合わせが先週、先月もしくは半年前のデータを問い合わせるものであることが分かっています。
その理由は、このテーブルが経営に関するオンラインのレポートを作成することに主に使用されるからです。
必要な過去のデータ量を減らすために、過去3ヶ月のデータのみを保存することにします。月の始めに過去のデータを削除します。
    </para>

    <para>
<!--
     In this situation we can use partitioning to help us meet all of our
     different requirements for the measurements table. Following the
     steps outlined above, partitioning can be set up as follows:
-->
このような場合、measurementテーブルに対する異なる要求をすべて満たすようにパーティショニングを利用できます。上記で述べた方法で、パーティショニングを次のように設定します。
    </para>

    <para>
     <orderedlist spacing="compact">
      <listitem>
       <para>
<!--
        The master table is the <structname>measurement</> table, declared
        exactly as above.
-->
マスタテーブルは、上記で宣言された<structname>measurement</>テーブルです。
       </para>
      </listitem>

      <listitem>
       <para>
<!--
        Next we create one partition for each active month:
-->
次にそれぞれの月に対して1つのパーティションを作成します。

<programlisting>
CREATE TABLE measurement_y2006m02 ( ) INHERITS (measurement);
CREATE TABLE measurement_y2006m03 ( ) INHERITS (measurement);
...
CREATE TABLE measurement_y2007m11 ( ) INHERITS (measurement);
CREATE TABLE measurement_y2007m12 ( ) INHERITS (measurement);
CREATE TABLE measurement_y2008m01 ( ) INHERITS (measurement);
</programlisting>

<!--
        Each of the partitions are complete tables in their own right,
        but they inherit their definitions from the
        <structname>measurement</> table.
-->
それぞれのパーティションは、完結したテーブルですが<structname>measurement</>テーブルからの定義を継承しています。
       </para>

       <para>
<!--
        This solves one of our problems: deleting old data. Each
        month, all we will need to do is perform a <command>DROP
        TABLE</command> on the oldest child table and create a new
        child table for the new month's data.
-->
これは古いデータの削除という問題を解決します。
毎月、最も古い子テーブルを<command>DROP TABLE</command>し新規の月に対しては子テーブルを作成するだけでいいのです。
       </para>
      </listitem>

      <listitem>
       <para>
<!--
        We must provide non-overlapping table constraints.  Rather than
        just creating the partition tables as above, the table creation
        script should really be:
-->
重なりの無いテーブル制約を付ける必要があります。
上記のようにパーティションを単に作成するよりも、以下のようにすべきでしょう。

<programlisting>
CREATE TABLE measurement_y2006m02 (
    CHECK ( logdate &gt;= DATE '2006-02-01' AND logdate &lt; DATE '2006-03-01' )
) INHERITS (measurement);
CREATE TABLE measurement_y2006m03 (
    CHECK ( logdate &gt;= DATE '2006-03-01' AND logdate &lt; DATE '2006-04-01' )
) INHERITS (measurement);
...
CREATE TABLE measurement_y2007m11 (
    CHECK ( logdate &gt;= DATE '2007-11-01' AND logdate &lt; DATE '2007-12-01' )
) INHERITS (measurement);
CREATE TABLE measurement_y2007m12 (
    CHECK ( logdate &gt;= DATE '2007-12-01' AND logdate &lt; DATE '2008-01-01' )
) INHERITS (measurement);
CREATE TABLE measurement_y2008m01 (
    CHECK ( logdate &gt;= DATE '2008-01-01' AND logdate &lt; DATE '2008-02-01' )
) INHERITS (measurement);
</programlisting>
       </para>
      </listitem>

      <listitem>
       <para>
<!--
        We probably need indexes on the key columns too:
-->
キーとなる列にインデックスが必要になるでしょう。

<programlisting>
CREATE INDEX measurement_y2006m02_logdate ON measurement_y2006m02 (logdate);
CREATE INDEX measurement_y2006m03_logdate ON measurement_y2006m03 (logdate);
...
CREATE INDEX measurement_y2007m11_logdate ON measurement_y2007m11 (logdate);
CREATE INDEX measurement_y2007m12_logdate ON measurement_y2007m12 (logdate);
CREATE INDEX measurement_y2008m01_logdate ON measurement_y2008m01 (logdate);
</programlisting>

<!--
        We choose not to add further indexes at this time.
-->
今回は、これ以上のインデックスを付けないことにします。
       </para>
      </listitem>

      <listitem>
       <para>
<!--
        We want our application to be able to say <literal>INSERT INTO
        measurement ...</> and have the data be redirected into the
        appropriate partition table.  We can arrange that by attaching
        a suitable trigger function to the master table.
        If data will be added only to the latest partition, we can
        use a very simple trigger function:
-->
アプリケーションで<literal>INSERT INTO measurement ...</>を実行したら、適切なパーティションテーブルにデータが中継されるようにしたいとします。
そのような場合は、適切なトリガ関数をマスタテーブルに設定することにより可能となります。
もしデータが最新のパーティションにのみ追加される場合は、非常に簡単なトリガ関数を使用できます。

<programlisting>
CREATE OR REPLACE FUNCTION measurement_insert_trigger()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO measurement_y2008m01 VALUES (NEW.*);
    RETURN NULL;
END;
$$
LANGUAGE plpgsql;
</programlisting>

<!--
        After creating the function, we create a trigger which
        calls the trigger function:
-->
関数を作成した後で、このトリガ関数を呼ぶトリガを作成します。

<programlisting>
CREATE TRIGGER insert_measurement_trigger
    BEFORE INSERT ON measurement
    FOR EACH ROW EXECUTE PROCEDURE measurement_insert_trigger();
</programlisting>

<!--
        We must redefine the trigger function each month so that it always
        points to the current partition.  The trigger definition does
        not need to be updated, however.
-->
毎月、トリガ関数を再定義しなくてはいけません。それにより現在のパーティションをいつも指すことになります。
しかし、トリガ定義は更新する必要はありません。
       </para>

       <para>
<!--
        We might want to insert data and have the server automatically
        locate the partition into which the row should be added. We
        could do this with a more complex trigger function, for example:
-->
データを挿入したら、サーバが行を追加すべきパーティションを自動的に決定するようにしたいかもしれません。
これは以下のようなもっと複雑なトリガ関数を作成することにより可能です。

<programlisting>
CREATE OR REPLACE FUNCTION measurement_insert_trigger()
RETURNS TRIGGER AS $$
BEGIN
    IF ( NEW.logdate &gt;= DATE '2006-02-01' AND
         NEW.logdate &lt; DATE '2006-03-01' ) THEN
        INSERT INTO measurement_y2006m02 VALUES (NEW.*);
    ELSIF ( NEW.logdate &gt;= DATE '2006-03-01' AND
            NEW.logdate &lt; DATE '2006-04-01' ) THEN
        INSERT INTO measurement_y2006m03 VALUES (NEW.*);
    ...
    ELSIF ( NEW.logdate &gt;= DATE '2008-01-01' AND
            NEW.logdate &lt; DATE '2008-02-01' ) THEN
        INSERT INTO measurement_y2008m01 VALUES (NEW.*);
    ELSE
        RAISE EXCEPTION 'Date out of range.  Fix the measurement_insert_trigger() function!';
    END IF;
    RETURN NULL;
END;
$$
LANGUAGE plpgsql;
</programlisting>

<!--
        The trigger definition is the same as before.
        Note that each <literal>IF</literal> test must exactly match the
        <literal>CHECK</literal> constraint for its partition.
-->
トリガ定義は前と同じです。
それぞれの<literal>IF</literal>テストをパーティションの<literal>CHECK</literal>制約と正確に一致させなければならないことに注意してください。
       </para>

       <para>
<!--
        While this function is more complex than the single-month case,
        it doesn't need to be updated as often, since branches can be
        added in advance of being needed.
-->
この関数は単一月の場合より複雑になりますが、頻繁に更新する必要はありません。なぜなら条件分岐を前もって追加しておくことが可能だからです。
       </para>

       <note>
        <para>
<!--
         In practice it might be best to check the newest partition first,
         if most inserts go into that partition.  For simplicity we have
         shown the trigger's tests in the same order as in other parts
         of this example.
-->
実際には、ほとんどの挿入が一番新しいパーティションに入る場合は、そのパーティションを最初に検査することが最善です。簡単に、この例でのほかの部分と同じ順番でトリガのテストを示しました。
        </para>
       </note>
      </listitem>
     </orderedlist>
    </para>

    <para>
<!--
     As we can see, a complex partitioning scheme could require a
     substantial amount of DDL. In the above example we would be
     creating a new partition each month, so it might be wise to write a
     script that generates the required DDL automatically.
-->
以上のように、複雑なパーティション化の計画はたくさんのDDLが必要となります。上記の例では、毎月新しいパーティションを作成することになりますが、必要となるDDLを自動的に生成するスクリプトを書くのが賢明です。
    </para>

   </sect2>

   <sect2 id="ddl-partitioning-managing-partitions">
<!--
   <title>Managing Partitions</title>
-->
   <title>パーティションの管理</title>

   <para>
<!--
     Normally the set of partitions established when initially
     defining the table are not intended to remain static. It is
     common to want to remove old partitions of data and periodically
     add new partitions for new data. One of the most important
     advantages of partitioning is precisely that it allows this
     otherwise painful task to be executed nearly instantaneously by
     manipulating the partition structure, rather than physically moving large
     amounts of data around.
-->
通常、初期定義でテーブルを静的なままにするつもりではない場合、一群のパーティションを作ることになります。
古いデータのパーティションの削除や新規データ向けの定期的な新規パーティションの追加という要求はよくあります。
こうしたそうでなければ苦痛を伴う作業を、大量のデータを物理的に移動させずに、パーティション構造を操作することでほとんど瞬間的に行うことができます。
パーティショニングの最も重要な利点の一つはまさにこの点です。
   </para>

   <para>
<!--
     The simplest option for removing old data is simply to drop the partition
     that is no longer necessary:
-->
古いデータを削除する最も簡単な方法は、単に不要となったパーティションを削除することです。
<programlisting>
DROP TABLE measurement_y2006m02;
</programlisting>
<!--
     This can very quickly delete millions of records because it doesn't have
     to individually delete every record.
-->
レコードごとに削除する必要がありませんので、これは高速に何百万ものレコードを削除することができます。
   </para>

   <para>
<!--
     Another option that is often preferable is to remove the partition from
     the partitioned table but retain access to it as a table in its own
     right:
-->
この他、よく使用される方法は、テーブル自体へのアクセス権限をそのまま残したまま、パーティション付けされたテーブルからパーティションを削除することです。
<programlisting>
ALTER TABLE measurement_y2006m02 NO INHERIT measurement;
</programlisting>
<!--
     This allows further operations to be performed on the data before
     it is dropped. For example, this is often a useful time to back up
     the data using <command>COPY</>, <application>pg_dump</>, or
     similar tools. It might also be a useful time to aggregate data
     into smaller formats, perform other data manipulations, or run
     reports.
-->
これにより、削除前にデータ操作をさらに行うことができます。
例えば、<command>COPY</>、<application>pg_dump</>などのツールを使用してデータをバックアップすることはよくあります。
また、データをより小さな書式に集約したり、他のデータ操作を行ったり、報告を作成したりすることもよくあります。
   </para>

   <para>
<!--
     Similarly we can add a new partition to handle new data. We can create an
     empty partition in the partitioned table just as the original partitions
     were created above:
-->
同様に、新しいデータを扱うために新しいパーティションを追加することもできます。
上で元々のパーティションを作成した時と同じように、パーティション付けテーブルに空のパーティションを作成することができます。

<programlisting>
CREATE TABLE measurement_y2008m02 (
    CHECK ( logdate &gt;= DATE '2008-02-01' AND logdate &lt; DATE '2008-03-01' )
) INHERITS (measurement);
</programlisting>

<!--
     As an alternative, it is sometimes more convenient to create the
     new table outside the partition structure, and make it a proper
     partition later. This allows the data to be loaded, checked, and
     transformed prior to it appearing in the partitioned table:
-->
この他の方法として、パーティション構造の外部で新しいテーブルを作成し、後で適切にパーティションとすることが便利な場合もあります。
これにより、パーティション付けしたテーブルに追加する前に、データをロードし、検査、変換することができます。

<programlisting>
CREATE TABLE measurement_y2008m02
  (LIKE measurement INCLUDING DEFAULTS INCLUDING CONSTRAINTS);
ALTER TABLE measurement_y2008m02 ADD CONSTRAINT y2008m02
   CHECK ( logdate &gt;= DATE '2008-02-01' AND logdate &lt; DATE '2008-03-01' );
\copy measurement_y2008m02 from 'measurement_y2008m02'
<!--
&#045;- possibly some other data preparation work
-->
-- 何らかの準備操作を行うことができます。
ALTER TABLE measurement_y2008m02 INHERIT measurement;
</programlisting>
    </para>
   </sect2>

   <sect2 id="ddl-partitioning-constraint-exclusion">
<!--
   <title>Partitioning and Constraint Exclusion</title>
-->
   <title>パーティショニングと制約による除外</title>

   <indexterm>
<!--
    <primary>constraint exclusion</primary>
-->
    <primary>制約による除外</primary>
   </indexterm>

   <para>
<!--
    <firstterm>Constraint exclusion</> is a query optimization technique
    that improves performance for partitioned tables defined in the
    fashion described above.  As an example:
-->
<firstterm>制約による除外</>は、上記の方法で定義された分割されたテーブルに対するパフォーマンスを向上させる問い合わせの最適化技術です。例えば、

<programlisting>
SET constraint_exclusion = on;
SELECT count(*) FROM measurement WHERE logdate &gt;= DATE '2008-01-01';
</programlisting>

<!--
    Without constraint exclusion, the above query would scan each of
    the partitions of the <structname>measurement</> table. With constraint
    exclusion enabled, the planner will examine the constraints of each
    partition and try to prove that the partition need not
    be scanned because it could not contain any rows meeting the query's
    <literal>WHERE</> clause.  When the planner can prove this, it
    excludes the partition from the query plan.
-->
制約による除外が有効になっているとき、プランナはそれぞれのパーティションの制約を検証し、パーティションが問い合わせの<literal>WHERE</>に一致する行を含んでいないためにスキャンされる必要が無いことを証明しようとします。
プランナはこれを証明すると、問い合わせ計画からそのパーティションを除外します。
   </para>

   <para>
<!--
    You can use the <command>EXPLAIN</> command to show the difference
    between a plan with <varname>constraint_exclusion</> on and a plan
    with it off.  A typical unoptimized plan for this type of table setup is:
-->
<varname>constraint_exclusion</>を有効とした時の計画と無効にした時の計画の違いを明らかにするため、<command>EXPLAIN</>コマンドを使用できます。
この種類のテーブル設定に対する典型的な最適化されない計画は以下のようになります。

<programlisting>
SET constraint_exclusion = off;
EXPLAIN SELECT count(*) FROM measurement WHERE logdate &gt;= DATE '2008-01-01';

                                          QUERY PLAN
-----------------------------------------------------------------------------------------------
 Aggregate  (cost=158.66..158.68 rows=1 width=0)
   -&gt;  Append  (cost=0.00..151.88 rows=2715 width=0)
         -&gt;  Seq Scan on measurement  (cost=0.00..30.38 rows=543 width=0)
               Filter: (logdate &gt;= '2008-01-01'::date)
         -&gt;  Seq Scan on measurement_y2006m02 measurement  (cost=0.00..30.38 rows=543 width=0)
               Filter: (logdate &gt;= '2008-01-01'::date)
         -&gt;  Seq Scan on measurement_y2006m03 measurement  (cost=0.00..30.38 rows=543 width=0)
               Filter: (logdate &gt;= '2008-01-01'::date)
...
         -&gt;  Seq Scan on measurement_y2007m12 measurement  (cost=0.00..30.38 rows=543 width=0)
               Filter: (logdate &gt;= '2008-01-01'::date)
         -&gt;  Seq Scan on measurement_y2008m01 measurement  (cost=0.00..30.38 rows=543 width=0)
               Filter: (logdate &gt;= '2008-01-01'::date)
</programlisting>

<!--
    Some or all of the partitions might use index scans instead of
    full-table sequential scans, but the point here is that there
    is no need to scan the older partitions at all to answer this query.
    When we enable constraint exclusion, we get a significantly
    cheaper plan that will deliver the same answer:
-->
一部のパーティション、もしくはすべてのパーティションで、テーブル全体に対するシーケンシャルスキャンではなく、インデックススキャンが使用される可能性があります。
しかしここでのポイントは、この問い合わせに対する回答のために古いパーティションをスキャンする必要はまったく無いということです。
制約による除外を有効にしたとき、大幅により安価な同じ回答を返す計画を得ることができます。

<programlisting>
SET constraint_exclusion = on;
EXPLAIN SELECT count(*) FROM measurement WHERE logdate &gt;= DATE '2008-01-01';
                                          QUERY PLAN
-----------------------------------------------------------------------------------------------
 Aggregate  (cost=63.47..63.48 rows=1 width=0)
   -&gt;  Append  (cost=0.00..60.75 rows=1086 width=0)
         -&gt;  Seq Scan on measurement  (cost=0.00..30.38 rows=543 width=0)
               Filter: (logdate &gt;= '2008-01-01'::date)
         -&gt;  Seq Scan on measurement_y2008m01 measurement  (cost=0.00..30.38 rows=543 width=0)
               Filter: (logdate &gt;= '2008-01-01'::date)
</programlisting>
   </para>

   <para>
<!--
    Note that constraint exclusion is driven only by <literal>CHECK</>
    constraints, not by the presence of indexes.  Therefore it isn't
    necessary to define indexes on the key columns.  Whether an index
    needs to be created for a given partition depends on whether you
    expect that queries that scan the partition will generally scan
    a large part of the partition or just a small part.  An index will
    be helpful in the latter case but not the former.
-->
制約による除外は<literal>CHECK</>制約のみで動作し、インデックスの有無では動作しないことに注意してください。よってキー列のインデックスを定義することは必要ではありません。
あるパーティションでインデックスが必要かどうかは、パーティションをスキャンする問い合わせがパーティションの大部分もしくは小さな部分をスキャンするのかによります。前者ではなく後者において、インデックスは役立ちます。
   </para>

   <para>
<!--
    The default (and recommended) setting of
    <xref linkend="guc-constraint-exclusion"> is actually neither
    <literal>on</> nor <literal>off</>, but an intermediate setting
    called <literal>partition</>, which causes the technique to be
    applied only to queries that are likely to be working on partitioned
    tables.  The <literal>on</> setting causes the planner to examine
    <literal>CHECK</> constraints in all queries, even simple ones that
    are unlikely to benefit.
-->
実のところ、<xref linkend="guc-constraint-exclusion">のデフォルト（かつ推奨）の設定は、<literal>on</>でも<literal>off</>でもなく、<literal>partition</>という中間の設定です。
これによりこの技法は、パーティショニングされたテーブルに対して動作することになる問い合わせのみに適用されるようになります。
<literal>on</>設定により、プランナはすべての問い合わせで<literal>CHECK</>制約を検証するようになります。
これは単純な問い合わせでも行われ、プラスになりそうでありません。
   </para>

   </sect2>

   <sect2 id="ddl-partitioning-alternatives">
<!--
   <title>Alternative Partitioning Methods</title>
-->
   <title>他のパーティショニング方法</title>

    <para>
<!--
     A different approach to redirecting inserts into the appropriate
     partition table is to set up rules, instead of a trigger, on the
     master table.  For example:
-->
適当なパーティションテーブルにリダイレクトする別の方法は、トリガの替わりにルールをマスターテーブル上に作成することです。例えば

<programlisting>
CREATE RULE measurement_insert_y2006m02 AS
ON INSERT TO measurement WHERE
    ( logdate &gt;= DATE '2006-02-01' AND logdate &lt; DATE '2006-03-01' )
DO INSTEAD
    INSERT INTO measurement_y2006m02 VALUES (NEW.*);
...
CREATE RULE measurement_insert_y2008m01 AS
ON INSERT TO measurement WHERE
    ( logdate &gt;= DATE '2008-01-01' AND logdate &lt; DATE '2008-02-01' )
DO INSTEAD
    INSERT INTO measurement_y2008m01 VALUES (NEW.*);
</programlisting>

<!--
     A rule has significantly more overhead than a trigger, but the overhead
     is paid once per query rather than once per row, so this method might be
     advantageous for bulk-insert situations.  In most cases, however, the
     trigger method will offer better performance.
-->
ルールはトリガよりもかなりオーバーヘッドがありますが、行ごとよりもむしろ問い合わせごとのオーバーヘッドとなります。
よってこの方法は、一括挿入といった場合に有効となります。
しかし多くの場合、トリガを使用する方が、良い性能となります。
    </para>

    <para>
<!--
     Be aware that <command>COPY</> ignores rules.  If you want to
     use <command>COPY</> to insert data, you'll need to copy into the correct
     partition table rather than into the master.  <command>COPY</> does fire
     triggers, so you can use it normally if you use the trigger approach.
-->
<command>COPY</>はルールを無視することに注意してください。
もしデータを挿入するのに<command>COPY</>を使用したい場合は、マスタテーブルより正しいパーティションテーブルにコピーすることが必要となるでしょう。
<command>COPY</>はトリガを起動します。
よってトリガを使用する方法をとれば、普通に<command>COPY</>を使用することができます。
    </para>

    <para>
<!--
     Another disadvantage of the rule approach is that there is no simple
     way to force an error if the set of rules doesn't cover the insertion
     date; the data will silently go into the master table instead.
-->
ルールを使用する方法のもうひとつの欠点は、一連のルールが挿入日付を扱わないときにエラーを強制する簡単な方法がないことです。
データは代わりにマスタテーブルに暗黙のうちに挿入されます。
    </para>

    <para>
<!--
     Partitioning can also be arranged using a <literal>UNION ALL</literal>
     view, instead of table inheritance.  For example,
-->
パーティショニングは、テーブルの継承の代わりに<literal>UNION ALL</literal>ビューを使用することによっても使用できます。
例えば、

<programlisting>
CREATE VIEW measurement AS
          SELECT * FROM measurement_y2006m02
UNION ALL SELECT * FROM measurement_y2006m03
...
UNION ALL SELECT * FROM measurement_y2007m11
UNION ALL SELECT * FROM measurement_y2007m12
UNION ALL SELECT * FROM measurement_y2008m01;
</programlisting>

<!--
     However, the need to recreate the view adds an extra step to adding and
     dropping individual partitions of the data set.  In practice this
     method has little to recommend it compared to using inheritance.
-->
しかしビューを再作成することで、データセットの個別のパーティションを追加したり削除したりする余分な手順が増えます。
実際には、この方法は継承を使用する方法と比較してお勧めする点はほとんどありません。
    </para>

   </sect2>

   <sect2 id="ddl-partitioning-caveats">
<!--
   <title>Caveats</title>
-->
   <title>警告</title>

   <para>
<!--
    The following caveats apply to partitioned tables:
-->
以下の警告がパーティション付けテーブルに対して適用されます。
   <itemizedlist>
    <listitem>
     <para>
<!--
      There is no automatic way to verify that all of the
      <literal>CHECK</literal> constraints are mutually
      exclusive.  It is safer to create code that generates
      partitions and creates and/or modifies associated objects than
      to write each by hand.
-->
すべての<literal>CHECK</literal>制約が相互に排他であるかどうか自動で確認する方法はありません。
パーティションを生成し、関連付けられたオブジェクトを作成もしくは修正するコードを作成する方が、それらをいちいち手書きするよりも安全です。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      The schemes shown here assume that the partition key column(s)
      of a row never change, or at least do not change enough to require
      it to move to another partition.  An <command>UPDATE</> that attempts
      to do that will fail because of the <literal>CHECK</> constraints.
      If you need to handle such cases, you can put suitable update triggers
      on the partition tables, but it makes management of the structure
      much more complicated.
-->
ここで示すスキーマは、行のパーティションキー列が変更しない、もしくは少なくとも他のパーティションに移動することが要求されるほどの変更がないことを仮定しています。
別のパーティションに移るような<command>UPDATE</>は、<literal>CHECK</>制約により失敗するでしょう。
このような場合を扱うには、適切な更新トリガをパーティションテーブルに設定します。
しかしこれにより管理構造がさらに複雑になります。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      If you are using manual <command>VACUUM</command> or
      <command>ANALYZE</command> commands, don't forget that
      you need to run them on each partition individually. A command like:
-->
もし手動の<command>VACUUM</command>もしくは<command>ANALYZE</command>コマンドを使用している場合は、それぞれのパーティションで個別に実行することを忘れないでください。
以下のようなコマンドは
<programlisting>
ANALYZE measurement;
</programlisting>
<!--
      will only process the master table.
-->
マスタテーブルのみ処理することになります。
     </para>
    </listitem>

   </itemizedlist>
   </para>

   <para>
<!--
    The following caveats apply to constraint exclusion:
-->
以下の警告が制約による除外に適用されます。

   <itemizedlist>
    <listitem>
     <para>
<!--
      Constraint exclusion only works when the query's <literal>WHERE</>
      clause contains constants (or externally supplied parameters).
      For example, a comparison against a non-immutable function such as
      <function>CURRENT_TIMESTAMP</function> cannot be optimized, since the
      planner cannot know which partition the function value might fall
      into at run time.
-->
制約による除外は問い合わせの<literal>WHERE</>句が定数(または外部から供給されたパラメータ)を含んでいたときにのみ動作します。例えば、<function>CURRENT_TIMESTAMP</function>のような非immutable関数に対する比較は、関数の結果値がどのパーティションに該当するかを実行時にプランナが知ることが出来ないため、最適化できません。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      Keep the partitioning constraints simple, else the planner may not be
      able to prove that partitions don't need to be visited.  Use simple
      equality conditions for list partitioning, or simple
      range tests for range partitioning, as illustrated in the preceding
      examples.  A good rule of thumb is that partitioning constraints should
      contain only comparisons of the partitioning column(s) to constants
      using B-tree-indexable operators.
-->
パーティション制約を簡単にしておいてください。そうしないとプランナは、パーティションを使う必要がないことを立証できません。
前述の例で示したとおり、リスト分割のために簡単な等号条件を使用してください。また範囲分割のために簡単な範囲テストを使用してください。
手っ取り早い良い方法は、パーティショニングの制約がパーティション列とB-treeインデックス作成可能な演算子を用いた定数の比較のみを含んでいることです。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      All constraints on all partitions of the master table are examined
      during constraint exclusion, so large numbers of partitions are likely
      to increase query planning time considerably.  Partitioning using
      these techniques will work well with up to perhaps a hundred partitions;
      don't try to use many thousands of partitions.
-->
マスタテーブルのすべてのパーティションのすべての制約は、制約による除外で試験されます。
よってパーティションの数が多くなれば問い合わせ計画の時間がかなり増加します。
これらの技術を使用したパーティショニングは、おそらく100個までのパーティションでうまく動作します。
何千ものパーティションを使用することは避けてください。
     </para>
    </listitem>

   </itemizedlist>
   </para>
  </sect2>
 </sect1>

 <sect1 id="ddl-foreign-data">
<!--
  <title>Foreign Data</title>
-->
  <title>外部データ</title>

   <indexterm>
<!--
    <primary>foreign data</primary>
-->
    <primary>外部データ</primary>
   </indexterm>
   <indexterm>
<!--
    <primary>foreign table</primary>
-->
    <primary>外部テーブル</primary>
   </indexterm>
   <indexterm>
<!--
    <primary>user mapping</primary>
-->
    <primary>ユーザマッピング</primary>
   </indexterm>

   <para>
<!--
    <productname>PostgreSQL</productname> implements portions of the SQL/MED
    specification, allowing you to access data that resides outside
    PostgreSQL using regular SQL queries.  Such data is referred to as
    <firstterm>foreign data</>.  (Note that this usage is not to be confused
    with foreign keys, which are a type of constraint within the database.)
-->
<productname>PostgreSQL</productname>はSQL/MED仕様を部分的に実装しており、PostgreSQLの外部にあるデータに対して標準的なSQLクエリでアクセスできます。このようなデータは<firstterm>外部データ</>と呼ばれます。(この用語をデータベース内の制約である外部キーと混同しないように気をつけてください。)
   </para>

   <para>
<!--
    Foreign data is accessed with help from a
    <firstterm>foreign data wrapper</firstterm>. A foreign data wrapper is a
    library that can communicate with an external data source, hiding the
    details of connecting to the data source and obtaining data from it.
    There are some foreign data wrappers available as <filename>contrib</>
    modules; see <xref linkend="contrib">.  Other kinds of foreign data
    wrappers might be found as third party products.  If none of the existing
    foreign data wrappers suit your needs, you can write your own; see <xref
    linkend="fdwhandler">.
-->
外部データは<firstterm>外部データラッパ</firstterm>の手助けによりアクセスされます。外部データラッパは外部データソースと通信できるライブラリであり、接続確立やデータ取得といった詳細を隠蔽します。<filename>contrib</>モジュールとして、いくつかの外部データラッパが利用できます; <xref linkend="contrib">を参照してください。
その他の種類の外部データラッパは外部製品として見つかるでしょう。既存の外部データラッパがあなたの用途に合わない場合、独自のラッパを書くことができます。<xref linkend="fdwhandler">を参照してください。
   </para>

   <para>
<!--
    To access foreign data, you need to create a <firstterm>foreign server</>
    object, which defines how to connect to a particular external data source
    according to the set of options used by its supporting foreign data
    wrapper. Then you need to create one or more <firstterm>foreign
    tables</firstterm>, which define the structure of the remote data. A
    foreign table can be used in queries just like a normal table, but a
    foreign table has no storage in the PostgreSQL server.  Whenever it is
    used, <productname>PostgreSQL</productname> asks the foreign data wrapper
    to fetch data from the external source, or transmit data to the external
    source in the case of update commands.
-->
外部データにアクセスするには、特定の外部データソースへの接続方法をそれを支える外部データラッパが使用するオプションの組み合わせによって定義する<firstterm>外部サーバ</>オブジェクトを作成する必要があります。その後、外部データの構造を定義する<firstterm>外部テーブル</>を少なくともひとつ作成する必要があります。外部テーブルは通常のテーブルと同様にクエリの中で使用できますが、外部テーブルはPostgreSQLサーバには格納領域を持ちません。
外部テーブルが使われるたびに、<productname>PostgreSQL</productname>は外部ソースからデータを取得することや、更新コマンドの場合には外部ソースへデータを送信することを外部データラッパに依頼します。
   </para>

   <para>
<!--
    Accessing remote data may require authenticating to the external
    data source.  This information can be provided by a
    <firstterm>user mapping</>, which can provide additional data
    such as user names and passwords based
    on the current <productname>PostgreSQL</productname> role.
-->
外部データへのアクセスは外部データソースからの認証を必要とする場合があります。この情報は、現在の<productname>PostgreSQL</productname>ロールに基づいてユーザ名やパスワードといった追加のデータを提供することができる<firstterm>ユーザマッピング</>によって提供することができます。
   </para>

   <para>
<!--
    For additional information, see
    <xref linkend="sql-createforeigndatawrapper">,
    <xref linkend="sql-createserver">,
    <xref linkend="sql-createusermapping">, and
    <xref linkend="sql-createforeigntable">.
-->
追加情報は、<xref linkend="sql-createforeigndatawrapper">、<xref linkend="sql-createserver">、<xref linkend="sql-createusermapping">、<xref linkend="sql-createforeigntable">を参照してください。
   </para>
 </sect1>

 <sect1 id="ddl-others">
<!--
  <title>Other Database Objects</title>
-->
  <title>その他のデータベースオブジェクト</title>

  <para>
<!--
   Tables are the central objects in a relational database structure,
   because they hold your data.  But they are not the only objects
   that exist in a database.  Many other kinds of objects can be
   created to make the use and management of the data more efficient
   or convenient.  They are not discussed in this chapter, but we give
   you a list here so that you are aware of what is possible:
-->
テーブルにはデータが保持されていますので、リレーショナルデータベース構造ではテーブルが中心オブジェクトとなります。
しかし、データベースにはテーブルの他にもオブジェクトが存在します。
様々なオブジェクトを作成して、データの使用および管理をより効果的に行うことができます。
本章ではこれらのオブジェクトについては説明しませんが、どのようなものがあるかをここに列挙します。
  </para>

  <itemizedlist>
   <listitem>
    <para>
<!--
     Views
-->
ビュー
    </para>
   </listitem>

   <listitem>
    <para>
<!--
     Functions and operators
-->
関数および演算子
    </para>
   </listitem>

   <listitem>
    <para>
<!--
     Data types and domains
-->
データ型およびドメイン
    </para>
   </listitem>

   <listitem>
    <para>
<!--
     Triggers and rewrite rules
-->
トリガおよび書き換えルール
    </para>
   </listitem>
  </itemizedlist>

  <para>
<!--
   Detailed information on
   these topics appears in <xref linkend="server-programming">.
-->
これらのトピックに関する詳細な情報は<xref linkend="server-programming">にあります。
  </para>
 </sect1>

 <sect1 id="ddl-depend">
<!--
  <title>Dependency Tracking</title>
-->
  <title>依存関係の追跡</title>

  <indexterm zone="ddl-depend">
   <primary>CASCADE</primary>
<!--
   <secondary sortas="DROP">with DROP</secondary>
-->
   <secondary sortas="DROP">DROPの</secondary>
  </indexterm>

  <indexterm zone="ddl-depend">
   <primary>RESTRICT</primary>
<!--
   <secondary sortas="DROP">with DROP</secondary>
-->
   <secondary sortas="DROP">DROPの</secondary>
  </indexterm>

  <para>
<!--
   When you create complex database structures involving many tables
   with foreign key constraints, views, triggers, functions, etc. you
   implicitly create a net of dependencies between the objects.
   For instance, a table with a foreign key constraint depends on the
   table it references.
-->
外部キー制約や、ビュー、トリガ、関数などを使ったテーブルが多数含まれるような複雑なデータベース構造を作成すると、ユーザはそれらのオブジェクト間の暗黙的な依存関係のネットワークも作成していることになります。
例えば、外部キー制約を持つテーブルは、参照するテーブルに依存しています。
  </para>

  <para>
<!--
   To ensure the integrity of the entire database structure,
   <productname>PostgreSQL</productname> makes sure that you cannot
   drop objects that other objects still depend on.  For example,
   attempting to drop the products table we had considered in <xref
   linkend="ddl-constraints-fk">, with the orders table depending on
   it, would result in an error message such as this:
-->
データベース構造全体の整合性を保つため、<productname>PostgreSQL</productname>は、他のオブジェクトと依存関係にあるオブジェクトの削除を許可しません。
例えば、<xref linkend="ddl-constraints-fk">で作成したproductsテーブルを削除しようとしても、ordersテーブルがこのテーブルに依存しているので、以下のようなエラーメッセージが現れます。
<screen>
DROP TABLE products;

NOTICE:  constraint orders_product_no_fkey on table orders depends on table products
ERROR:  cannot drop table products because other objects depend on it
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
</screen>
<!--
   The error message contains a useful hint: if you do not want to
   bother deleting all the dependent objects individually, you can run:
-->
エラーメッセージには役に立つヒントが含まれています。 
以下のようにすると、依存する全てのオブジェクトを1つずつ削除する手間を省けます。
<screen>
DROP TABLE products CASCADE;
</screen>
<!--
   and all the dependent objects will be removed.  In this case, it
   doesn't remove the orders table, it only removes the foreign key
   constraint.  (If you want to check what <command>DROP ... CASCADE</> will do,
   run <command>DROP</> without <literal>CASCADE</> and read the <literal>NOTICE</> messages.)
-->
これで全ての依存オブジェクトが削除されます。
この場合、ordersテーブルは削除されずに外部キー制約のみが削除されます
（<command>DROP ... CASCADE</>が何を行うかを知りたい場合は、<literal>CASCADE</>を指定せずに<command>DROP</>を実行して<literal>NOTICE</>メッセージを読んでください）。
  </para>

  <para>
<!--
   All drop commands in <productname>PostgreSQL</productname> support
   specifying <literal>CASCADE</literal>.  Of course, the nature of
   the possible dependencies varies with the type of the object.  You
   can also write <literal>RESTRICT</literal> instead of
   <literal>CASCADE</literal> to get the default behavior, which is to
   prevent the dropping of objects that other objects depend on.
-->
<productname>PostgreSQL</productname>では、全ての削除用コマンドに<literal>CASCADE</literal>を指定することができます。
もちろん、どのような依存関係が存在するかは、オブジェクトの種類によって異なります。
また、<literal>CASCADE</literal>ではなく<literal>RESTRICT</literal>と記述すると、他のオブジェクトが依存しているオブジェクトの削除を禁止するというデフォルトの振舞いを指定することもできます。
  </para>

  <note>
   <para>
<!--
    According to the SQL standard, specifying either
    <literal>RESTRICT</literal> or <literal>CASCADE</literal> is
    required.  No database system actually enforces that rule, but
    whether the default behavior is <literal>RESTRICT</literal> or
    <literal>CASCADE</literal> varies across systems.
-->
標準SQLでは、<literal>RESTRICT</literal>または<literal>CASCADE</literal>のいずれかを指定する必要があります。
実際にこの決まり通りのデータベースシステムはありませんが、デフォルトが<literal>RESTRICT</literal>であるか、<literal>CASCADE</literal>であるかは、システムによって異なります。
   </para>
  </note>

  <note>
   <para>
<!--
    Foreign key constraint dependencies and serial column dependencies
    from <productname>PostgreSQL</productname> versions prior to 7.3
    are <emphasis>not</emphasis> maintained or created during the
    upgrade process.  All other dependency types will be properly
    created during an upgrade from a pre-7.3 database.
-->
<productname>PostgreSQL</productname>の7.3より前のバージョンにおける外部キー制約の依存関係とシリアル列の依存関係は、アップグレード処理において維持も作成も<emphasis>されません</emphasis>。
その他の種類の依存関係は全て、7.3より前のデータベースからのアップグレード中に適切に作成されます。
   </para>
  </note>
 </sect1>

</chapter>
