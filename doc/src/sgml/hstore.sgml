<!-- doc/src/sgml/hstore.sgml -->

<sect1 id="hstore" xreflabel="hstore">
 <title>hstore</title>

 <indexterm zone="hstore">
  <primary>hstore</primary>
 </indexterm>

 <para>
<<<<<<< HEAD
  This module implements the <type>hstore</type> data type for storing sets of
  key/value pairs within a single <productname>PostgreSQL</productname> value.
=======
<!--
  This module implements the <type>hstore</> data type for storing sets of
  key/value pairs within a single <productname>PostgreSQL</> value.
>>>>>>> doc_ja_10_premerge
  This can be useful in various scenarios, such as rows with many attributes
  that are rarely examined, or semi-structured data.  Keys and values are
  simply text strings.
-->
本モジュールはキー、値の組み合わせの集合を単一の<productname>PostgreSQL</productname>値に格納するための<type>hstore</type>データ型を実装します。
あまり厳密に検査されない属性を多く持つ行や半構造化データなど、多くの状況で有用になる可能性があります。
キーと値は単純なテキスト文字列です。
 </para>

 <sect2>
<<<<<<< HEAD
  <title><type>hstore</type> External Representation</title>

  <para>

   The text representation of an <type>hstore</type>, used for input and output,
   includes zero or more <replaceable>key</replaceable> <literal>=&gt;</literal>
   <replaceable>value</replaceable> pairs separated by commas. Some examples:
=======
<!--
  <title><type>hstore</> External Representation</title>
-->
  <title><type>hstore</type>の外部表現</title>

  <para>

<!--
   The text representation of an <type>hstore</>, used for input and output,
   includes zero or more <replaceable>key</> <literal>=&gt;</>
   <replaceable>value</> pairs separated by commas. Some examples:
-->
入力および出力で使用される<type>hstore</type>値のテキスト表現はカンマで区切られた、ゼロ以上の<replaceable>key</replaceable> <literal>=&gt;</literal> <replaceable>value</replaceable>という組み合わせを含みます。
以下に例を示します。
>>>>>>> doc_ja_10_premerge

<synopsis>
k =&gt; v
foo =&gt; bar, baz =&gt; whatever
"1-a" =&gt; "anything at all"
</synopsis>

<!--
   The order of the pairs is not significant (and may not be reproduced on
   output). Whitespace between pairs or around the <literal>=&gt;</literal> sign is
   ignored. Double-quote keys and values that include whitespace, commas,
   <literal>=</literal>s or <literal>&gt;</literal>s. To include a double quote or a
   backslash in a key or value, escape it with a backslash.
-->
組み合わせの順序は重要ではありません（出力時に再現されないこともあります）。
組み合わせ間や<literal>=&gt;</literal>記号の前後の空白文字は無視されます。
キーや値が空白文字、カンマ、<literal>=</literal>、<literal>&gt;</literal>を含む場合は二重引用符でくくります。
キーや値に二重引用符やバックスラッシュを含めるには、バックスラッシュでエスケープしてください。
  </para>

  <para>
<<<<<<< HEAD
   Each key in an <type>hstore</type> is unique. If you declare an <type>hstore</type>
   with duplicate keys, only one will be stored in the <type>hstore</type> and
=======
<!--
   Each key in an <type>hstore</> is unique. If you declare an <type>hstore</>
   with duplicate keys, only one will be stored in the <type>hstore</> and
>>>>>>> doc_ja_10_premerge
   there is no guarantee as to which will be kept:
-->
<type>hstore</type>内の各キーは一意です。
重複するキーを持つ<type>hstore</type>を宣言すると、<type>hstore</type>には1つしか保存されません。
またどちらが残るかは保証されません。

<programlisting>
SELECT 'a=&gt;1,a=&gt;2'::hstore;
  hstore
----------
 "a"=&gt;"1"
</programlisting>
  </para>

  <para>
<<<<<<< HEAD
   A value (but not a key) can be an SQL <literal>NULL</literal>. For example:
=======
<!--
   A value (but not a key) can be an SQL <literal>NULL</>. For example:
-->
値はSQLの<literal>NULL</literal>を取ることができます（キーは不可）。
以下に例を示します。
>>>>>>> doc_ja_10_premerge

<programlisting>
key =&gt; NULL
</programlisting>

<<<<<<< HEAD
   The <literal>NULL</literal> keyword is case-insensitive. Double-quote the
   <literal>NULL</literal> to treat it as the ordinary string <quote>NULL</quote>.
=======
<!--
   The <literal>NULL</> keyword is case-insensitive. Double-quote the
   <literal>NULL</> to treat it as the ordinary string <quote>NULL</quote>.
-->
<literal>NULL</literal>キーワードは大文字小文字の区別をしません。
<literal>null</literal>を普通の文字列<quote>NULL</quote>として扱うためには二重引用符でくくってください。
>>>>>>> doc_ja_10_premerge
  </para>

  <note>
  <para>
<<<<<<< HEAD
   Keep in mind that the <type>hstore</type> text format, when used for input,
   applies <emphasis>before</emphasis> any required quoting or escaping. If you are
   passing an <type>hstore</type> literal via a parameter, then no additional
=======
<!--
   Keep in mind that the <type>hstore</> text format, when used for input,
   applies <emphasis>before</> any required quoting or escaping. If you are
   passing an <type>hstore</> literal via a parameter, then no additional
>>>>>>> doc_ja_10_premerge
   processing is needed. But if you're passing it as a quoted literal
   constant, then any single-quote characters and (depending on the setting of
   the <varname>standard_conforming_strings</varname> configuration parameter)
   backslash characters need to be escaped correctly. See
   <xref linkend="sql-syntax-strings"/> for more on the handling of string
   constants.
-->
入力として使用される場合<type>hstore</type>テキスト書式は、<emphasis>前もって</emphasis>必要な引用符付けやエスケープ処理を適用することに注意してください。
パラメータとして<type>hstore</type>リテラルを渡す場合、追加処理は必要ありません。
しかし、引用符付けしたリテラル定数として渡す場合には、単一引用符および(<varname>standard_conforming_strings</varname>設定パラメータに依存しますが)バックスラッシュ文字をすべて正しくエスケープしなければなりません。
文字列定数の取り扱いについては<xref linkend="sql-syntax-strings"/>を参照してください。
  </para>
  </note>

  <para>
<!--
   On output, double quotes always surround keys and values, even when it's
   not strictly necessary.
-->
出力の場合、厳密に必要がない場合であっても、常にキーと値は二重引用符でくくられます。
  </para>

 </sect2>

 <sect2>
<<<<<<< HEAD
  <title><type>hstore</type> Operators and Functions</title>
=======
<!--
  <title><type>hstore</> Operators and Functions</title>
-->
  <title><type>hstore</type>の演算子と関数</title>
>>>>>>> doc_ja_10_premerge

  <para>
<!--
   The operators provided by the <literal>hstore</literal> module are
   shown in <xref linkend="hstore-op-table"/>, the functions
   in <xref linkend="hstore-func-table"/>.
<<<<<<< HEAD
  </para>

  <table id="hstore-op-table">
   <title><type>hstore</type> Operators</title>
=======
-->
<literal>hstore</literal>モジュールで提供される演算子を<xref linkend="hstore-op-table"/>に、関数を<xref linkend="hstore-func-table"/>に示します。
  </para>

  <table id="hstore-op-table">
<!--
   <title><type>hstore</> Operators</title>
-->
   <title><type>hstore</type>演算子</title>
>>>>>>> doc_ja_10_premerge

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Operator</entry>
      <entry>Description</entry>
      <entry>Example</entry>
      <entry>Result</entry>
-->
      <entry>演算子</entry>
      <entry>説明</entry>
      <entry>例</entry>
      <entry>結果</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><type>hstore</type> <literal>-&gt;</literal> <type>text</type></entry>
<<<<<<< HEAD
      <entry>get value for key (<literal>NULL</literal> if not present)</entry>
=======
<!--
      <entry>get value for key (<literal>NULL</> if not present)</entry>
-->
      <entry>キーの値を取り出します（存在しなければ<literal>NULL</literal>）</entry>
>>>>>>> doc_ja_10_premerge
      <entry><literal>'a=&gt;x, b=&gt;y'::hstore -&gt; 'a'</literal></entry>
      <entry><literal>x</literal></entry>
     </row>

     <row>
      <entry><type>hstore</type> <literal>-&gt;</literal> <type>text[]</type></entry>
<<<<<<< HEAD
      <entry>get values for keys (<literal>NULL</literal> if not present)</entry>
=======
<!--
      <entry>get values for keys (<literal>NULL</> if not present)</entry>
-->
      <entry>キーの値を取り出します（存在しなければ<literal>NULL</literal>）</entry>
>>>>>>> doc_ja_10_premerge
      <entry><literal>'a=&gt;x, b=&gt;y, c=&gt;z'::hstore -&gt; ARRAY['c','a']</literal></entry>
      <entry><literal>{"z","x"}</literal></entry>
     </row>

     <row>
      <entry><type>hstore</type> <literal>||</literal> <type>hstore</type></entry>
<<<<<<< HEAD
      <entry>concatenate <type>hstore</type>s</entry>
=======
<!--
      <entry>concatenate <type>hstore</>s</entry>
-->
      <entry><type>hstore</type>を連結します。</entry>
>>>>>>> doc_ja_10_premerge
      <entry><literal>'a=&gt;b, c=&gt;d'::hstore || 'c=&gt;x, d=&gt;q'::hstore</literal></entry>
      <entry><literal>"a"=&gt;"b", "c"=&gt;"x", "d"=&gt;"q"</literal></entry>
     </row>

     <row>
      <entry><type>hstore</type> <literal>?</literal> <type>text</type></entry>
<<<<<<< HEAD
      <entry>does <type>hstore</type> contain key?</entry>
=======
<!--
      <entry>does <type>hstore</> contain key?</entry>
-->
      <entry><type>hstore</type>がキーを含むかどうか。</entry>
>>>>>>> doc_ja_10_premerge
      <entry><literal>'a=&gt;1'::hstore ? 'a'</literal></entry>
      <entry><literal>t</literal></entry>
     </row>

     <row>
      <entry><type>hstore</type> <literal>?&amp;</literal> <type>text[]</type></entry>
<<<<<<< HEAD
      <entry>does <type>hstore</type> contain all specified keys?</entry>
=======
<!--
      <entry>does <type>hstore</> contain all specified keys?</entry>
-->
      <entry><type>hstore</type>が指定したキーをすべて含むかどうか。</entry>
>>>>>>> doc_ja_10_premerge
      <entry><literal>'a=&gt;1,b=&gt;2'::hstore ?&amp; ARRAY['a','b']</literal></entry>
      <entry><literal>t</literal></entry>
     </row>

     <row>
      <entry><type>hstore</type> <literal>?|</literal> <type>text[]</type></entry>
<<<<<<< HEAD
      <entry>does <type>hstore</type> contain any of the specified keys?</entry>
=======
<!--
      <entry>does <type>hstore</> contain any of the specified keys?</entry>
-->
      <entry><type>hstore</type>が指定したキーのいずれかを含むかどうか。</entry>
>>>>>>> doc_ja_10_premerge
      <entry><literal>'a=&gt;1,b=&gt;2'::hstore ?| ARRAY['b','c']</literal></entry>
      <entry><literal>t</literal></entry>
     </row>

     <row>
      <entry><type>hstore</type> <literal>@&gt;</literal> <type>hstore</type></entry>
<<<<<<< HEAD
=======
<!--
>>>>>>> doc_ja_10_premerge
      <entry>does left operand contain right?</entry>
-->
      <entry>左辺は右辺を含むかどうか。</entry>
      <entry><literal>'a=&gt;b, b=&gt;1, c=&gt;NULL'::hstore @&gt; 'b=&gt;1'</literal></entry>
      <entry><literal>t</literal></entry>
     </row>

     <row>
      <entry><type>hstore</type> <literal>&lt;@</literal> <type>hstore</type></entry>
<<<<<<< HEAD
=======
<!--
>>>>>>> doc_ja_10_premerge
      <entry>is left operand contained in right?</entry>
-->
      <entry>左辺は右辺に含まれるかどうか。</entry>
      <entry><literal>'a=&gt;c'::hstore &lt;@ 'a=&gt;b, b=&gt;1, c=&gt;NULL'</literal></entry>
      <entry><literal>f</literal></entry>
     </row>

     <row>
      <entry><type>hstore</type> <literal>-</literal> <type>text</type></entry>
<<<<<<< HEAD
=======
<!--
>>>>>>> doc_ja_10_premerge
      <entry>delete key from left operand</entry>
-->
      <entry>左辺からキーを削除します。</entry>
      <entry><literal>'a=&gt;1, b=&gt;2, c=&gt;3'::hstore - 'b'::text</literal></entry>
      <entry><literal>"a"=&gt;"1", "c"=&gt;"3"</literal></entry>
     </row>

     <row>
      <entry><type>hstore</type> <literal>-</literal> <type>text[]</type></entry>
<<<<<<< HEAD
=======
<!--
>>>>>>> doc_ja_10_premerge
      <entry>delete keys from left operand</entry>
-->
      <entry>左辺からキー(複数)を削除します。</entry>
      <entry><literal>'a=&gt;1, b=&gt;2, c=&gt;3'::hstore - ARRAY['a','b']</literal></entry>
      <entry><literal>"c"=&gt;"3"</literal></entry>
     </row>

     <row>
      <entry><type>hstore</type> <literal>-</literal> <type>hstore</type></entry>
<<<<<<< HEAD
=======
<!--
>>>>>>> doc_ja_10_premerge
      <entry>delete matching pairs from left operand</entry>
-->
      <entry>左辺から一致する組み合わせを削除します。</entry>
      <entry><literal>'a=&gt;1, b=&gt;2, c=&gt;3'::hstore - 'a=&gt;4, b=&gt;2'::hstore</literal></entry>
      <entry><literal>"a"=&gt;"1", "c"=&gt;"3"</literal></entry>
     </row>

     <row>
      <entry><type>record</type> <literal>#=</literal> <type>hstore</type></entry>
<<<<<<< HEAD
      <entry>replace fields in <type>record</type> with matching values from <type>hstore</type></entry>
=======
<!--
      <entry>replace fields in <type>record</> with matching values from <type>hstore</></entry>
>>>>>>> doc_ja_10_premerge
      <entry>see Examples section</entry>
-->
      <entry><type>record</type>内のフィールドを<type>hstore</type>の対応する値で置換します。</entry>
      <entry>後述の例を参照</entry>
      <entry></entry>
     </row>

     <row>
      <entry><literal>%%</literal> <type>hstore</type></entry>
<<<<<<< HEAD
      <entry>convert <type>hstore</type> to array of alternating keys and values</entry>
=======
<!--
      <entry>convert <type>hstore</> to array of alternating keys and values</entry>
-->
      <entry>キーと値を変更して<type>hstore</type>を配列に変換します。</entry>
>>>>>>> doc_ja_10_premerge
      <entry><literal>%% 'a=&gt;foo, b=&gt;bar'::hstore</literal></entry>
      <entry><literal>{a,foo,b,bar}</literal></entry>
     </row>

     <row>
      <entry><literal>%#</literal> <type>hstore</type></entry>
<<<<<<< HEAD
      <entry>convert <type>hstore</type> to two-dimensional key/value array</entry>
=======
<!--
      <entry>convert <type>hstore</> to two-dimensional key/value array</entry>
-->
      <entry><type>hstore</type>をキーと値の2次元配列に変換します。</entry>
>>>>>>> doc_ja_10_premerge
      <entry><literal>%# 'a=&gt;foo, b=&gt;bar'::hstore</literal></entry>
      <entry><literal>{{a,foo},{b,bar}}</literal></entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <note>
  <para>
<<<<<<< HEAD
   Prior to PostgreSQL 8.2, the containment operators <literal>@&gt;</literal>
   and <literal>&lt;@</literal> were called <literal>@</literal> and <literal>~</literal>,
=======
<!--
   Prior to PostgreSQL 8.2, the containment operators <literal>@&gt;</>
   and <literal>&lt;@</> were called <literal>@</> and <literal>~</>,
>>>>>>> doc_ja_10_premerge
   respectively. These names are still available, but are deprecated and will
   eventually be removed. Notice that the old names are reversed from the
   convention formerly followed by the core geometric data types!
-->
PostgreSQL 8.2より前では、包含演算子<literal>@&gt;</literal>と<literal>&lt;@</literal>はそれぞれ<literal>@</literal>と<literal>~</literal>と呼ばれていました。
これらの名前はまだ利用できますが、廃止予定であり、最終的にはなくなります。
古い名前がコアの幾何データ型が従う規約と反対であることに注意してください。
   </para>
  </note>

  <table id="hstore-func-table">
<<<<<<< HEAD
   <title><type>hstore</type> Functions</title>
=======
<!--
   <title><type>hstore</> Functions</title>
-->
   <title><type>hstore</type>の関数</title>
>>>>>>> doc_ja_10_premerge

   <tgroup cols="5">
    <thead>
     <row>
<!--
      <entry>Function</entry>
      <entry>Return Type</entry>
      <entry>Description</entry>
      <entry>Example</entry>
      <entry>Result</entry>
-->
      <entry>関数</entry>
      <entry>戻り値の型</entry>
      <entry>説明</entry>
      <entry>例</entry>
      <entry>結果</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><function>hstore(record)</function><indexterm><primary>hstore</primary></indexterm></entry>
      <entry><type>hstore</type></entry>
<<<<<<< HEAD
      <entry>construct an <type>hstore</type> from a record or row</entry>
=======
<!--
      <entry>construct an <type>hstore</> from a record or row</entry>
-->
      <entry>レコードまたは行から<type>hstore</type>を生成します。</entry>
>>>>>>> doc_ja_10_premerge
      <entry><literal>hstore(ROW(1,2))</literal></entry>
      <entry><literal>f1=&gt;1,f2=&gt;2</literal></entry>
     </row>

     <row>
      <entry><function>hstore(text[])</function></entry>
      <entry><type>hstore</type></entry>
<<<<<<< HEAD
      <entry>construct an <type>hstore</type> from an array, which may be either
=======
<!--
      <entry>construct an <type>hstore</> from an array, which may be either
>>>>>>> doc_ja_10_premerge
       a key/value array, or a two-dimensional array</entry>
-->
      <entry>配列から<type>hstore</type>を生成します。配列はキー、値の配列でも2次元の配列でも構いません</entry>
      <entry><literal>hstore(ARRAY['a','1','b','2']) || hstore(ARRAY[['c','3'],['d','4']])</literal></entry>
      <entry><literal>a=&gt;1, b=&gt;2, c=&gt;3, d=&gt;4</literal></entry>
     </row>

     <row>
      <entry><function>hstore(text[], text[])</function></entry>
      <entry><type>hstore</type></entry>
<<<<<<< HEAD
      <entry>construct an <type>hstore</type> from separate key and value arrays</entry>
=======
<!--
      <entry>construct an <type>hstore</> from separate key and value arrays</entry>
-->
      <entry>キー、値で分けた配列から<type>hstore</type>を作成します。</entry>
>>>>>>> doc_ja_10_premerge
      <entry><literal>hstore(ARRAY['a','b'], ARRAY['1','2'])</literal></entry>
      <entry><literal>"a"=&gt;"1","b"=&gt;"2"</literal></entry>
     </row>

     <row>
      <entry><function>hstore(text, text)</function></entry>
      <entry><type>hstore</type></entry>
<<<<<<< HEAD
      <entry>make single-item <type>hstore</type></entry>
=======
<!--
      <entry>make single-item <type>hstore</></entry>
-->
      <entry><type>hstore</type>型の単一項目を作成します。</entry>
>>>>>>> doc_ja_10_premerge
      <entry><literal>hstore('a', 'b')</literal></entry>
      <entry><literal>"a"=&gt;"b"</literal></entry>
     </row>

     <row>
      <entry><function>akeys(hstore)</function><indexterm><primary>akeys</primary></indexterm></entry>
      <entry><type>text[]</type></entry>
<<<<<<< HEAD
      <entry>get <type>hstore</type>'s keys as an array</entry>
=======
<!--
      <entry>get <type>hstore</>'s keys as an array</entry>
-->
      <entry><type>hstore</type>のキーを配列として入手します。</entry>
>>>>>>> doc_ja_10_premerge
      <entry><literal>akeys('a=&gt;1,b=&gt;2')</literal></entry>
      <entry><literal>{a,b}</literal></entry>
     </row>

     <row>
      <entry><function>skeys(hstore)</function><indexterm><primary>skeys</primary></indexterm></entry>
      <entry><type>setof text</type></entry>
<<<<<<< HEAD
      <entry>get <type>hstore</type>'s keys as a set</entry>
=======
<!--
      <entry>get <type>hstore</>'s keys as a set</entry>
-->
      <entry><type>hstore</type>のキーを集合として入手します。</entry>
>>>>>>> doc_ja_10_premerge
      <entry><literal>skeys('a=&gt;1,b=&gt;2')</literal></entry>
      <entry>
<programlisting>
a
b
</programlisting></entry>
     </row>

     <row>
      <entry><function>avals(hstore)</function><indexterm><primary>avals</primary></indexterm></entry>
      <entry><type>text[]</type></entry>
<<<<<<< HEAD
      <entry>get <type>hstore</type>'s values as an array</entry>
=======
<!--
      <entry>get <type>hstore</>'s values as an array</entry>
-->
      <entry><type>hstore</type>の値を配列として入手します。</entry>
>>>>>>> doc_ja_10_premerge
      <entry><literal>avals('a=&gt;1,b=&gt;2')</literal></entry>
      <entry><literal>{1,2}</literal></entry>
     </row>

     <row>
      <entry><function>svals(hstore)</function><indexterm><primary>svals</primary></indexterm></entry>
      <entry><type>setof text</type></entry>
<<<<<<< HEAD
      <entry>get <type>hstore</type>'s values as a set</entry>
=======
<!--
      <entry>get <type>hstore</>'s values as a set</entry>
-->
      <entry><type>hstore</type>の値を集合として入手します。</entry>
>>>>>>> doc_ja_10_premerge
      <entry><literal>svals('a=&gt;1,b=&gt;2')</literal></entry>
      <entry>
<programlisting>
1
2
</programlisting></entry>
     </row>

     <row>
      <entry><function>hstore_to_array(hstore)</function><indexterm><primary>hstore_to_array</primary></indexterm></entry>
      <entry><type>text[]</type></entry>
<<<<<<< HEAD
      <entry>get <type>hstore</type>'s keys and values as an array of alternating
=======
<!--
      <entry>get <type>hstore</>'s keys and values as an array of alternating
>>>>>>> doc_ja_10_premerge
       keys and values</entry>
-->
      <entry><type>hstore</type>のキーと値を、キーと値を交互に表した配列として入手します。</entry>
      <entry><literal>hstore_to_array('a=&gt;1,b=&gt;2')</literal></entry>
      <entry><literal>{a,1,b,2}</literal></entry>
     </row>

     <row>
      <entry><function>hstore_to_matrix(hstore)</function><indexterm><primary>hstore_to_matrix</primary></indexterm></entry>
      <entry><type>text[]</type></entry>
<<<<<<< HEAD
      <entry>get <type>hstore</type>'s keys and values as a two-dimensional array</entry>
=======
<!--
      <entry>get <type>hstore</>'s keys and values as a two-dimensional array</entry>
-->
      <entry><type>hstore</type>のキーと値を2次元配列として入手します。</entry>
>>>>>>> doc_ja_10_premerge
      <entry><literal>hstore_to_matrix('a=&gt;1,b=&gt;2')</literal></entry>
      <entry><literal>{{a,1},{b,2}}</literal></entry>
     </row>

     <row>
      <entry><function>hstore_to_json(hstore)</function><indexterm><primary>hstore_to_json</primary></indexterm></entry>
      <entry><type>json</type></entry>
<!--
      <entry>get <type>hstore</type> as a <type>json</type> value, converting
       all non-null values to JSON strings</entry>
-->
      <entry>非nullの値をすべてJSON文字列に変換し、<type>hstore</type>を<type>json</type>値として入手します。</entry>
      <entry><literal>hstore_to_json('"a key"=&gt;1, b=&gt;t, c=&gt;null, d=&gt;12345, e=&gt;012345, f=&gt;1.234, g=&gt;2.345e+4')</literal></entry>
      <entry><literal>{"a key": "1", "b": "t", "c": null, "d": "12345", "e": "012345", "f": "1.234", "g": "2.345e+4"}</literal></entry>
     </row>

     <row>
      <entry><function>hstore_to_jsonb(hstore)</function><indexterm><primary>hstore_to_jsonb</primary></indexterm></entry>
      <entry><type>jsonb</type></entry>
<!--
      <entry>get <type>hstore</type> as a <type>jsonb</type> value, converting
       all non-null values to JSON strings</entry>
-->
      <entry>非nullの値をすべてJSON文字列に変換し、<type>hstore</type>を<type>jsonb</type>値として入手します。</entry>
      <entry><literal>hstore_to_jsonb('"a key"=&gt;1, b=&gt;t, c=&gt;null, d=&gt;12345, e=&gt;012345, f=&gt;1.234, g=&gt;2.345e+4')</literal></entry>
      <entry><literal>{"a key": "1", "b": "t", "c": null, "d": "12345", "e": "012345", "f": "1.234", "g": "2.345e+4"}</literal></entry>
     </row>

     <row>
      <entry><function>hstore_to_json_loose(hstore)</function><indexterm><primary>hstore_to_json_loose</primary></indexterm></entry>
      <entry><type>json</type></entry>
<!--
      <entry>get <type>hstore</type> as a <type>json</type> value, but attempt to distinguish numerical and Boolean values so they are unquoted in the JSON</entry>
-->
      <entry><type>hstore</type>を<type>json</type>値として入手します。ですが、数値およびブール値を識別しようとするため、その2つはJSON中では引用符が付きません。</entry>
      <entry><literal>hstore_to_json_loose('"a key"=&gt;1, b=&gt;t, c=&gt;null, d=&gt;12345, e=&gt;012345, f=&gt;1.234, g=&gt;2.345e+4')</literal></entry>
      <entry><literal>{"a key": 1, "b": true, "c": null, "d": 12345, "e": "012345", "f": 1.234, "g": 2.345e+4}</literal></entry>
     </row>

     <row>
      <entry><function>hstore_to_jsonb_loose(hstore)</function><indexterm><primary>hstore_to_jsonb_loose</primary></indexterm></entry>
      <entry><type>jsonb</type></entry>
<!--
      <entry>get <type>hstore</type> as a <type>jsonb</type> value, but attempt to distinguish numerical and Boolean values so they are unquoted in the JSON</entry>
-->
      <entry><type>hstore</type>を<type>jsonb</type>値として入手します。ですが、数値およびブール値を識別しようとするため、その2つはJSON中では引用符が付きません。</entry>
      <entry><literal>hstore_to_jsonb_loose('"a key"=&gt;1, b=&gt;t, c=&gt;null, d=&gt;12345, e=&gt;012345, f=&gt;1.234, g=&gt;2.345e+4')</literal></entry>
      <entry><literal>{"a key": 1, "b": true, "c": null, "d": 12345, "e": "012345", "f": 1.234, "g": 2.345e+4}</literal></entry>
     </row>

     <row>
      <entry><function>slice(hstore, text[])</function><indexterm><primary>slice</primary></indexterm></entry>
      <entry><type>hstore</type></entry>
<<<<<<< HEAD
      <entry>extract a subset of an <type>hstore</type></entry>
=======
<!--
      <entry>extract a subset of an <type>hstore</></entry>
-->
      <entry><type>hstore</type>の部分集合を取り出します。</entry>
>>>>>>> doc_ja_10_premerge
      <entry><literal>slice('a=&gt;1,b=&gt;2,c=&gt;3'::hstore, ARRAY['b','c','x'])</literal></entry>
      <entry><literal>"b"=&gt;"2", "c"=&gt;"3"</literal></entry>
     </row>

     <row>
      <entry><function>each(hstore)</function><indexterm><primary>each</primary></indexterm></entry>
      <entry><type>setof(key text, value text)</type></entry>
<<<<<<< HEAD
      <entry>get <type>hstore</type>'s keys and values as a set</entry>
=======
<!--
      <entry>get <type>hstore</>'s keys and values as a set</entry>
-->
      <entry><type>hstore</type>のキーと値を集合として入手します。</entry>
>>>>>>> doc_ja_10_premerge
      <entry><literal>select * from each('a=&gt;1,b=&gt;2')</literal></entry>
      <entry>
<programlisting>
 key | value
-----+-------
 a   | 1
 b   | 2
</programlisting></entry>
     </row>

     <row>
      <entry><function>exist(hstore,text)</function><indexterm><primary>exist</primary></indexterm></entry>
      <entry><type>boolean</type></entry>
<<<<<<< HEAD
      <entry>does <type>hstore</type> contain key?</entry>
=======
<!--
      <entry>does <type>hstore</> contain key?</entry>
-->
      <entry><type>hstore</type>がキーを含むかどうか。</entry>
>>>>>>> doc_ja_10_premerge
      <entry><literal>exist('a=&gt;1','a')</literal></entry>
      <entry><literal>t</literal></entry>
     </row>

     <row>
      <entry><function>defined(hstore,text)</function><indexterm><primary>defined</primary></indexterm></entry>
      <entry><type>boolean</type></entry>
<<<<<<< HEAD
      <entry>does <type>hstore</type> contain non-<literal>NULL</literal> value for key?</entry>
=======
<!--
      <entry>does <type>hstore</> contain non-<literal>NULL</> value for key?</entry>
-->
      <entry><type>hstore</type>がキーに対して非<literal>NULL</literal>の値を持つかどうか</entry>
>>>>>>> doc_ja_10_premerge
      <entry><literal>defined('a=&gt;NULL','a')</literal></entry>
      <entry><literal>f</literal></entry>
     </row>

     <row>
      <entry><function>delete(hstore,text)</function><indexterm><primary>delete</primary></indexterm></entry>
      <entry><type>hstore</type></entry>
<!--
      <entry>delete pair with matching key</entry>
-->
      <entry>キーに一致する組み合わせを削除します。</entry>
      <entry><literal>delete('a=&gt;1,b=&gt;2','b')</literal></entry>
      <entry><literal>"a"=&gt;"1"</literal></entry>
     </row>

     <row>
      <entry><function>delete(hstore,text[])</function></entry>
      <entry><type>hstore</type></entry>
<!--
      <entry>delete pairs with matching keys</entry>
-->
      <entry>キー(複数)に対応する組み合わせを削除します。</entry>
      <entry><literal>delete('a=&gt;1,b=&gt;2,c=&gt;3',ARRAY['a','b'])</literal></entry>
      <entry><literal>"c"=&gt;"3"</literal></entry>
     </row>

     <row>
      <entry><function>delete(hstore,hstore)</function></entry>
      <entry><type>hstore</type></entry>
<!--
      <entry>delete pairs matching those in the second argument</entry>
-->
      <entry>第二引数内の組み合わせと一致する組み合わせを削除します。</entry>
      <entry><literal>delete('a=&gt;1,b=&gt;2','a=&gt;4,b=&gt;2'::hstore)</literal></entry>
      <entry><literal>"a"=&gt;"1"</literal></entry>
     </row>

     <row>
      <entry><function>populate_record(record,hstore)</function><indexterm><primary>populate_record</primary></indexterm></entry>
      <entry><type>record</type></entry>
<<<<<<< HEAD
      <entry>replace fields in <type>record</type> with matching values from <type>hstore</type></entry>
=======
<!--
      <entry>replace fields in <type>record</> with matching values from <type>hstore</></entry>
-->
      <entry><type>record</type>内のフィールドを<type>hstore</type>の対応する値で置換します。</entry>
<!--
>>>>>>> doc_ja_10_premerge
      <entry>see Examples section</entry>
-->
      <entry>後述の例を参照</entry>
      <entry></entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <note>
   <para>
<!--
     The function <function>hstore_to_json</function> is used when
     an <type>hstore</type> value is cast to <type>json</type>.
     Likewise, <function>hstore_to_jsonb</function> is used when
     an <type>hstore</type> value is cast to <type>jsonb</type>.
-->
<function>hstore_to_json</function>関数は<type>hstore</type>値を<type>json</type>にキャストする時に使われます。
同様に、<function>hstore_to_jsonb</function>関数は<type>hstore</type>値を<type>jsonb</type>にキャストする時に使われます。
   </para>
  </note>

  <note>
   <para>
<!--
    The function <function>populate_record</function> is actually declared
    with <type>anyelement</type>, not <type>record</type>, as its first argument,
    but it will reject non-record types with a run-time error.
-->
<function>populate_record</function>関数の最初の引数は実際には<type>record</type>ではなく<type>anyelement</type>と宣言されています。
しかし、実行時にはレコード型以外は拒絶されます。
   </para>
  </note>
 </sect2>

 <sect2>
<!--
  <title>Indexes</title>
-->
  <title>インデックス</title>

  <para>
<<<<<<< HEAD
   <type>hstore</type> has GiST and GIN index support for the <literal>@&gt;</literal>,
   <literal>?</literal>, <literal>?&amp;</literal> and <literal>?|</literal> operators. For example:
=======
<!--
   <type>hstore</> has GiST and GIN index support for the <literal>@&gt;</>,
   <literal>?</>, <literal>?&amp;</> and <literal>?|</> operators. For example:
-->
<type>hstore</type>は<literal>@&gt;</literal>、<literal>?</literal>、<literal>?&amp;</literal>および<literal>?|</literal>演算子向けのGiSTおよびGINインデックスをサポートします。
以下に例を示します。
>>>>>>> doc_ja_10_premerge
  </para>
<programlisting>
CREATE INDEX hidx ON testhstore USING GIST (h);

CREATE INDEX hidx ON testhstore USING GIN (h);
</programlisting>

  <para>
<<<<<<< HEAD
   <type>hstore</type> also supports <type>btree</type> or <type>hash</type> indexes for
   the <literal>=</literal> operator. This allows <type>hstore</type> columns to be
   declared <literal>UNIQUE</literal>, or to be used in <literal>GROUP BY</literal>,
   <literal>ORDER BY</literal> or <literal>DISTINCT</literal> expressions. The sort ordering
   for <type>hstore</type> values is not particularly useful, but these indexes
   may be useful for equivalence lookups. Create indexes for <literal>=</literal>
=======
<!--
   <type>hstore</> also supports <type>btree</> or <type>hash</> indexes for
   the <literal>=</> operator. This allows <type>hstore</> columns to be
   declared <literal>UNIQUE</>, or to be used in <literal>GROUP BY</>,
   <literal>ORDER BY</> or <literal>DISTINCT</> expressions. The sort ordering
   for <type>hstore</> values is not particularly useful, but these indexes
   may be useful for equivalence lookups. Create indexes for <literal>=</>
>>>>>>> doc_ja_10_premerge
   comparisons as follows:
-->
<type>hstore</type>はまた、<literal>=</literal>演算子向けに<type>btree</type>または<type>hash</type>インデックスをサポートします。
これにより<type>hstore</type>の列を<literal>UNIQUE</literal>と宣言すること、また、<literal>GROUP BY</literal>、<literal>ORDER BY</literal>、<literal>DISTINCT</literal>の式で使用することができます。
<type>hstore</type>値のソート順序付けはあまり有用ではありません。
しかしこれらのインデックスは同値検索の際に有用になるかもしれません。
<literal>=</literal>比較用のインデックスを以下のように作成します。
  </para>
<programlisting>
CREATE INDEX hidx ON testhstore USING BTREE (h);

CREATE INDEX hidx ON testhstore USING HASH (h);
</programlisting>
 </sect2>

 <sect2>
<!--
  <title>Examples</title>
-->
  <title>例</title>

  <para>
<!--
   Add a key, or update an existing key with a new value:
-->
キーを追加、または、既存のキーを新しい値で更新します。
<programlisting>
UPDATE tab SET h = h || hstore('c', '3');
</programlisting>
  </para>

  <para>
<!--
   Delete a key:
-->
キーを削除します。
<programlisting>
UPDATE tab SET h = delete(h, 'k1');
</programlisting>
  </para>

  <para>
<<<<<<< HEAD
   Convert a <type>record</type> to an <type>hstore</type>:
=======
<!--
   Convert a <type>record</> to an <type>hstore</>:
-->
<type>record</type>を<type>hstore</type>に変換します。
>>>>>>> doc_ja_10_premerge
<programlisting>
CREATE TABLE test (col1 integer, col2 text, col3 text);
INSERT INTO test VALUES (123, 'foo', 'bar');

SELECT hstore(t) FROM test AS t;
                   hstore                    
---------------------------------------------
 "col1"=&gt;"123", "col2"=&gt;"foo", "col3"=&gt;"bar"
(1 row)
</programlisting>
  </para>

  <para>
<<<<<<< HEAD
   Convert an <type>hstore</type> to a predefined <type>record</type> type:
=======
<!--
   Convert an <type>hstore</> to a predefined <type>record</> type:
-->
<type>hstore</type>を事前に定義された<type>record</type>型に変換します。
>>>>>>> doc_ja_10_premerge
<programlisting>
CREATE TABLE test (col1 integer, col2 text, col3 text);

SELECT * FROM populate_record(null::test,
                              '"col1"=&gt;"456", "col2"=&gt;"zzz"');
 col1 | col2 | col3 
------+------+------
  456 | zzz  | 
(1 row)
</programlisting>
  </para>

  <para>
<<<<<<< HEAD
   Modify an existing record using the values from an <type>hstore</type>:
=======
<!--
   Modify an existing record using the values from an <type>hstore</>:
-->
<type>hstore</type>の値を使用して既存のレコードを変更します。
>>>>>>> doc_ja_10_premerge
<programlisting>
CREATE TABLE test (col1 integer, col2 text, col3 text);
INSERT INTO test VALUES (123, 'foo', 'bar');

SELECT (r).* FROM (SELECT t #= '"col3"=&gt;"baz"' AS r FROM test t) s;
 col1 | col2 | col3 
------+------+------
  123 | foo  | baz
(1 row)
</programlisting>
  </para>
 </sect2>

 <sect2>
<!--
  <title>Statistics</title>
-->
  <title>統計情報</title>

  <para>
<<<<<<< HEAD
   The <type>hstore</type> type, because of its intrinsic liberality, could
=======
<!--
   The <type>hstore</> type, because of its intrinsic liberality, could
>>>>>>> doc_ja_10_premerge
   contain a lot of different keys. Checking for valid keys is the task of the
   application. The following examples demonstrate several techniques for
   checking keys and obtaining statistics.
-->
内在する自由度のため、<type>hstore</type>型は異なるキーを多く含むことができます。
有効なキーを検査することはアプリケーション側の作業です。
以下の例では、キー検査および統計情報の入手に関する複数の技法を示します。
  </para>

  <para>
<!--
   Simple example:
-->
簡単な例を示します。
<programlisting>
SELECT * FROM each('aaa=&gt;bq, b=&gt;NULL, ""=&gt;1');
</programlisting>
  </para>

  <para>
<!--
   Using a table:
-->
テーブルを使用する例です。
<programlisting>
SELECT (each(h)).key, (each(h)).value INTO stat FROM testhstore;
</programlisting>
  </para>

  <para>
<!--
   Online statistics:
-->
オンライン統計値です。
<programlisting>
SELECT key, count(*) FROM
  (SELECT (each(h)).key FROM testhstore) AS stat
  GROUP BY key
  ORDER BY count DESC, key;
    key    | count
-----------+-------
 line      |   883
 query     |   207
 pos       |   203
 node      |   202
 space     |   197
 status    |   195
 public    |   194
 title     |   190
 org       |   189
...................
</programlisting>
  </para>
 </sect2>

 <sect2>
<!--
  <title>Compatibility</title>
-->
  <title>互換性</title>

  <para>
<<<<<<< HEAD
   As of PostgreSQL 9.0, <type>hstore</type> uses a different internal
=======
<!--
   As of PostgreSQL 9.0, <type>hstore</> uses a different internal
>>>>>>> doc_ja_10_premerge
   representation than previous versions. This presents no obstacle for
   dump/restore upgrades since the text representation (used in the dump) is
   unchanged.
-->
PostgreSQL 9.0から<type>hstore</type>の内部表現はこれまでから変更されました。
(ダンプ内で使用される)テキスト表現には変更がありませんので、ダンプ/リストアによる更新の妨げにはなりません。
  </para>

  <para>
<!--
   In the event of a binary upgrade, upward compatibility is maintained by
   having the new code recognize old-format data. This will entail a slight
   performance penalty when processing data that has not yet been modified by
   the new code. It is possible to force an upgrade of all values in a table
<<<<<<< HEAD
   column by doing an <literal>UPDATE</literal> statement as follows:
=======
   column by doing an <literal>UPDATE</> statement as follows:
-->
バイナリによる更新の際、新しいコードで古い書式のデータを認識させることにより、上位互換が保持されます。
これには、新しいコードによりまだ変更されていないデータを処理する際に、性能の劣化を多少伴います。
以下のように<literal>UPDATE</literal>文を実行することによりテーブル列内のすべての値を強制的に更新することができます。
>>>>>>> doc_ja_10_premerge
<programlisting>
UPDATE tablename SET hstorecol = hstorecol || '';
</programlisting>
  </para>

  <para>
<!--
   Another way to do it is:
-->
上を行う他の方法を以下に示します。
<programlisting>
ALTER TABLE tablename ALTER hstorecol TYPE hstore USING hstorecol || '';
</programlisting>
<<<<<<< HEAD
   The <command>ALTER TABLE</command> method requires an exclusive lock on the table,
=======
<!--
   The <command>ALTER TABLE</> method requires an exclusive lock on the table,
>>>>>>> doc_ja_10_premerge
   but does not result in bloating the table with old row versions.
-->
<command>ALTER TABLE</command>による方法はテーブルに対して排他ロックを必要とします。
しかし、古いバージョンの行でテーブルが膨張することはありません。
  </para>

 </sect2>

 <sect2>
<!--
  <title>Transforms</title>
-->
  <title>変換</title>

  <para>
<!--
   Additional extensions are available that implement transforms for
   the <type>hstore</type> type for the languages PL/Perl and PL/Python.  The
   extensions for PL/Perl are called <literal>hstore_plperl</literal>
   and <literal>hstore_plperlu</literal>, for trusted and untrusted PL/Perl.
   If you install these transforms and specify them when creating a
   function, <type>hstore</type> values are mapped to Perl hashes.  The
   extensions for PL/Python are
   called <literal>hstore_plpythonu</literal>, <literal>hstore_plpython2u</literal>,
   and <literal>hstore_plpython3u</literal>
   (see <xref linkend="plpython-python23"/> for the PL/Python naming
   convention).  If you use them, <type>hstore</type> values are mapped to
   Python dictionaries.
-->
PL/Perl言語やPL/Python言語向けに<type>hstore</type>型の変換を実装した追加の拡張が入手可能です。
PL/Perl向けの拡張は、信頼されたPL/Perlに対しては<literal>hstore_plperl</literal>という名前で、信頼されないものに対しては<literal>hstore_plperlu</literal>という名前です。
関数を作成するときにこの変換をインストールして指定していれば、<type>hstore</type>の値はPerlのハッシュにマップされます。
PL/Python向けの拡張は<literal>hstore_plpythonu</literal>、<literal>hstore_plpython2u</literal>、<literal>hstore_plpython3u</literal>という名前です(PL/Pythonの命名規約については<xref linkend="plpython-python23"/>を参照してください)。
この拡張を使うと<type>hstore</type>の値はPythonの辞書型にマップされます。
  </para>
 </sect2>

 <sect2>
<!--
  <title>Authors</title>
-->
  <title>作者</title>

  <para>
   Oleg Bartunov <email>oleg@sai.msu.su</email>, Moscow, Moscow University, Russia
  </para>

  <para>
   Teodor Sigaev <email>teodor@sigaev.ru</email>, Moscow, Delta-Soft Ltd., Russia
  </para>

  <para>
<!--
   Additional enhancements by Andrew Gierth <email>andrew@tao11.riddles.org.uk</email>,
   United Kingdom
-->
追加の改良はAndrew Gierth <email>andrew@tao11.riddles.org.uk</email>,United Kingdomによりなされました。
  </para>
 </sect2>

</sect1>
