<!-- doc/src/sgml/pgtrgm.sgml 20110528 -->

<sect1 id="pgtrgm" xreflabel="pg_trgm">
 <title>pg_trgm</title>

 <indexterm zone="pgtrgm">
  <primary>pg_trgm</primary>
 </indexterm>

 <para>
<!--
  The <filename>pg_trgm</filename> module provides functions and operators
  for determining the similarity of
  alphanumeric text based on trigram matching, as
  well as index operator classes that support fast searching for similar
  strings.
-->
<filename>pg_trgm</filename>モジュールは、類似文字列の高速検索をサポートするインデックス演算子クラスだけではなく、トライグラム一致に基づく英数字の類似度の決定に関する関数と演算子も提供します。
 </para>

 <sect2>
<!--
  <title>Trigram (or Trigraph) Concepts</title>
-->
  <title>トライグラム（またはトリグラフ）の概念</title>

  <para>
<!--
   A trigram is a group of three consecutive characters taken
   from a string.  We can measure the similarity of two strings by
   counting the number of trigrams they share.  This simple idea
   turns out to be very effective for measuring the similarity of
   words in many natural languages.
-->
トライグラムは文字列から3つの連続する文字を取り出したグループです。
共有するトライグラムの個数を数えることで、２つの文字列の類似度を測定することができます。
この単純な考えが、多くの自然言語における単語の類似度を測定する際に非常に効率的であることが判明しています。
  </para>

  <note>
   <para>
<!--
    <filename>pg_trgm</filename> ignores non-word characters
    (non-alphanumerics) when extracting trigrams from a string.
    Each word is considered to have two spaces
    prefixed and one space suffixed when determining the set
    of trigrams contained in the string.
    For example, the set of trigrams in the string
    <quote><literal>cat</literal></quote> is
    <quote><literal>  c</literal></quote>,
    <quote><literal> ca</literal></quote>,
    <quote><literal>cat</literal></quote>, and
    <quote><literal>at </literal></quote>.
    The set of trigrams in the string
    <quote><literal>foo|bar</literal></quote> is
    <quote><literal>  f</literal></quote>,
    <quote><literal> fo</literal></quote>,
    <quote><literal>foo</literal></quote>,
    <quote><literal>oo </literal></quote>,
    <quote><literal>  b</literal></quote>,
    <quote><literal> ba</literal></quote>,
    <quote><literal>bar</literal></quote>, and
    <quote><literal>ar </literal></quote>.
-->
<filename>pg_trgm</filename>は、文字列からトライグラムを抽出する時に単語以外の文字（英数字以外）を無視します。
文字列内に含まれるトライグラム集合を決める際、文字列の前に２つの空白、後に1つの空白が付いているものとみなされます。
例えば、<quote><literal>cat</literal></quote>という文字列のトライグラム集合は、<quote><literal>  c</literal></quote>、<quote><literal> ca</literal></quote>、<quote><literal>cat</literal></quote>、<quote><literal>at </literal></quote>です。
<quote><literal>foo|bar</literal></quote>という文字列のトライグラム集合は、<quote><literal>  f</literal></quote>、<quote><literal> fo</literal></quote>、<quote><literal>foo</literal></quote>、    <quote><literal>oo </literal></quote>、<quote><literal>  b</literal></quote>、<quote><literal> ba</literal></quote>、<quote><literal>bar</literal></quote>、<quote><literal>ar </literal></quote>です。

   </para>
  </note>
 </sect2>

 <sect2>
<!--
  <title>Functions and Operators</title>
-->
  <title>関数と演算子</title>

  <para>
<!--
   The functions provided by the <filename>pg_trgm</filename> module
   are shown in <xref linkend="pgtrgm-func-table">, the operators
   in <xref linkend="pgtrgm-op-table">.
-->
<filename>pg_trgm</filename>モジュールで提供される関数を<xref linkend="pgtrgm-func-table">に、演算子を<xref linkend="pgtrgm-op-table">に示します。
  </para>

  <table id="pgtrgm-func-table">
<!--
   <title><filename>pg_trgm</filename> Functions</title>
-->
   <title><filename>pg_trgm</filename>関数</title>
   <tgroup cols="3">
    <thead>
     <row>
<!--
      <entry>Function</entry>
      <entry>Returns</entry>
      <entry>Description</entry>
-->
      <entry>関数</entry>
      <entry>戻り値</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><function>similarity(text, text)</function><indexterm><primary>similarity</primary></indexterm></entry>
      <entry><type>real</type></entry>
      <entry>
<!--
       Returns a number that indicates how similar the two arguments are.
       The range of the result is zero (indicating that the two strings are
       completely dissimilar) to one (indicating that the two strings are
       identical).
-->
２つの引数がどの程度似ているかを示す数値を返します。
結果はゼロ（２つの文字列にまったく類似度がないことを示す）から1（２つの文字列が同一であることを示す）までの範囲です。
      </entry>
     </row>
     <row>
      <entry><function>show_trgm(text)</function><indexterm><primary>show_trgm</primary></indexterm></entry>
      <entry><type>text[]</type></entry>
      <entry>
<!--
       Returns an array of all the trigrams in the given string.
       (In practice this is seldom useful except for debugging.)
-->
与えられた文字列内のすべてのトライグラムからなる配列を返します。
（実際これはデバッグ時を除いて役に立つことはほぼありません。）
      </entry>
     </row>
     <row>
      <entry><function>show_limit()</function><indexterm><primary>show_limit</primary></indexterm></entry>
      <entry><type>real</type></entry>
      <entry>
<!--
       Returns the current similarity threshold used by the <literal>%</>
       operator.  This sets the minimum similarity between
       two words for them to be considered similar enough to
       be misspellings of each other, for example.
-->
<literal>%</>演算子で使用される現在の類似度閾値を返します。
これは、例えば２つの単語それぞれでミススペルがあったとしても類似しているものとみなす、その2つの単語間の最低の類似度を設定します。
      </entry>
     </row>
     <row>
      <entry><function>set_limit(real)</function><indexterm><primary>set_limit</primary></indexterm></entry>
      <entry><type>real</type></entry>
      <entry>
<!--
       Sets the current similarity threshold that is used by the <literal>%</>
       operator.  The threshold must be between 0 and 1 (default is 0.3).
       Returns the same value passed in.
-->
<literal>%</>演算子で使用される現在の類似度閾値を設定します。
閾値は0から1までの値でなければなりません（デフォルトは0.3です）。
渡された値と同じ値が返ります。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <table id="pgtrgm-op-table">
<!--
   <title><filename>pg_trgm</filename> Operators</title>
-->
   <title><filename>pg_trgm</filename>演算子</title>
   <tgroup cols="3">
    <thead>
     <row>
<!--
      <entry>Operator</entry>
      <entry>Returns</entry>
      <entry>Description</entry>
-->
      <entry>演算子</entry>
      <entry>戻り値</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><type>text</> <literal>%</literal> <type>text</></entry>
      <entry><type>boolean</type></entry>
      <entry>
<!--
       Returns <literal>true</> if its arguments have a similarity that is
       greater than the current similarity threshold set by
       <function>set_limit</>.
-->
２つの引数が<function>set_limit</>で設定された類似度閾値以上の類似度を持つ場合<literal>true</>を返します。
      </entry>
     </row>
     <row>
      <entry><type>text</> <literal>&lt;-&gt;</literal> <type>text</></entry>
      <entry><type>real</type></entry>
      <entry>
<!--
       Returns the <quote>distance</> between the arguments, that is
       one minus the <function>similarity()</> value.
-->
引数間の<quote>距離</>、つまり1 - <function>similarity()</>の値を返します。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect2>

 <sect2>
<!--
  <title>Index Support</title>
-->
  <title>インデックスサポート</title>

  <para>
<!--
   The <filename>pg_trgm</filename> module provides GiST and GIN index
   operator classes that allow you to create an index over a text column for
   the purpose of very fast similarity searches.  These index types support
   the above-described similarity operators, and additionally support
   trigram-based index searches for <literal>LIKE</>, <literal>ILIKE</>,
   <literal>~</> and <literal>~*</> queries.  (These indexes do not
   support equality nor simple comparison operators, so you may need a
   regular B-tree index too.)
-->
<literal>pg_trgm</literal>モジュールは、テキスト列全体に非常に高速な類似度検索を行うためのインデックスを作成することができるように、GiSTおよびGINインデックス演算子クラスを提供します。
これらのインデックス種類は上記類似度演算子をサポートし、さらに<literal>LIKE</>、<literal>ILIKE</>、<literal>~</>および<literal>~*</>問い合わせにおけるトライグラムを基にしたインデックス検索をサポートします。
（これらのインデックスは等価性や単純な比較演算子をサポートしません。ですので通常のB-treeインデックスも必要になるかもしれません。）
  </para>

  <para>
<!--
   Example:
-->
例：

<programlisting>
CREATE TABLE test_trgm (t text);
CREATE INDEX trgm_idx ON test_trgm USING gist (t gist_trgm_ops);
</programlisting>
<!--
or
-->
または
<programlisting>
CREATE INDEX trgm_idx ON test_trgm USING gin (t gin_trgm_ops);
</programlisting>
  </para>

  <para>
<!--
   At this point, you will have an index on the <structfield>t</> column that
   you can use for similarity searching.  A typical query is
-->
この段階で、テキスト列<structfield>t</>に類似度検索で使用可能なインデックスがあります。
典型的な問い合わせを以下に示します。
<programlisting>
SELECT t, similarity(t, '<replaceable>word</>') AS sml
  FROM test_trgm
  WHERE t % '<replaceable>word</>'
  ORDER BY sml DESC, t;
</programlisting>
<!--
   This will return all values in the text column that are sufficiently
   similar to <replaceable>word</>, sorted from best match to worst.  The
   index will be used to make this a fast operation even over very large data
   sets.
-->
これは<replaceable>word</>に十分似たテキスト列の値をすべて、類似度の高い順番に返します。
インデックスは非常に大規模なデータ群に対する高速操作を行うために使用されます。
  </para>

  <para>
<!--
   A variant of the above query is
-->
以下は上の問い合わせを変形させたものです。
<programlisting>
SELECT t, t &lt;-&gt; '<replaceable>word</>' AS dist
  FROM test_trgm
  ORDER BY dist LIMIT 10;
</programlisting>
<!--
   This can be implemented quite efficiently by GiST indexes, but not
   by GIN indexes.  It will usually beat the first formulation when only
   a small number of the closest matches is wanted.
-->
これはGINインデックスではなくGiSTインデックスにより非常に効率的に実装することができます。
通常、類似度が高いものの中から少ない個数のみを必要とする場合、1番目の式よりも効率的です。
  </para>

  <para>
<!--
   Beginning in <productname>PostgreSQL</> 9.1, these index types also support
   index searches for <literal>LIKE</> and <literal>ILIKE</>, for example
-->
<productname>PostgreSQL</> 9.1から、これらのインデックス種類は<literal>LIKE</>および<literal>ILIKE</>におけるインデックス検索をサポートします。
以下に例を示します。
<programlisting>
SELECT * FROM test_trgm WHERE t LIKE '%foo%bar';
</programlisting>
<!--
   The index search works by extracting trigrams from the search string
   and then looking these up in the index.  The more trigrams in the search
   string, the more effective the index search is.  Unlike B-tree based
   searches, the search string need not be left-anchored.
-->
インデックス検索は、検索文字列からトライグラムを抽出し、それらをインデックスから検索することによって動作します。
検索文字列内のトライグラムが多ければ、よりインデックス検索が効率的になります。
B-treeを基にした検索とは異なり、検索文字列の左側が固定されている必要はありません。
  </para>

  <para>
<!--
   Beginning in <productname>PostgreSQL</> 9.3, these index types also support
   index searches for regular-expression matches
   (<literal>~</> and <literal>~*</> operators), for example
-->
<productname>PostgreSQL</> 9.3から、これらの種類のインデックスは正規表現一致（<literal>~</>および<literal>~*</>演算子）に対するインデックス検索もサポートします。
以下に例を示します。
<programlisting>
SELECT * FROM test_trgm WHERE t ~ '(foo|bar)';
</programlisting>
<!--
   The index search works by extracting trigrams from the regular expression
   and then looking these up in the index.  The more trigrams that can be
   extracted from the regular expression, the more effective the index search
   is.  Unlike B-tree based searches, the search string need not be
   left-anchored.
-->
インデックス検索は、正規表現からトライグラムを抽出し、それらをインデックスから検索することで動作します。
より多くのトライグラムが正規表現から抽出される場合、インデックス検索はより効率的になります。
B-treeを基にした検索と異なり、検索文字列は先頭一致である必要はありません。
  </para>

  <para>
<!--
   For both <literal>LIKE</> and regular-expression searches, keep in mind
   that a pattern with no extractable trigrams will degenerate to a full-index
   scan.
-->
<literal>LIKE</>および正規表現検索の両方で、トライグラムが抽出されないパターンでは完全インデックススキャンより性能が落ちることに注意してください。
  </para>

  <para>
<!--
   The choice between GiST and GIN indexing depends on the relative
   performance characteristics of GiST and GIN, which are discussed elsewhere.
   As a rule of thumb, a GIN index is faster to search than a GiST index, but
   slower to build or update; so GIN is better suited for static data and GiST
   for often-updated data.
-->
GiSTまたはGINインデックスの選択は、他で説明されるGiSTとGINの相対的な性能特性に依存します。
まとめとしては、GINインデックスはGiSTインデックスより検索が高速ですが、構築または更新は低速です。
このためGINは静的なデータに、GiSTはよく更新されるデータに適しています。
  </para>
 </sect2>

 <sect2>
<!--
  <title>Text Search Integration</title>
-->
  <title>テキスト検索の統合</title>

  <para>
<!--
   Trigram matching is a very useful tool when used in conjunction
   with a full text index.  In particular it can help to recognize
   misspelled input words that will not be matched directly by the
   full text search mechanism.
-->
トライグラム一致は全文テキストインデックスと一緒に使用する時、非常に有用なツールです。
特に、全文検索機構では直接一致しない、ミススペルがある入力単語の認識を行うために役に立ちます。
  </para>

  <para>
<!--
   The first step is to generate an auxiliary table containing all
   the unique words in the documents:
-->
第一段階は文書内で一意な単語からなる補助テーブルを生成することです。

<programlisting>
CREATE TABLE words AS SELECT word FROM
        ts_stat('SELECT to_tsvector(''simple'', bodytext) FROM documents');
</programlisting>

<!--
   where <structname>documents</> is a table that has a text field
   <structfield>bodytext</> that we wish to search.  The reason for using
   the <literal>simple</> configuration with the <function>to_tsvector</>
   function, instead of using a language-specific configuration,
   is that we want a list of the original (unstemmed) words.
-->
ここで<structname>documents</>は、検索対象の<structfield>bodytext</>テキストフィールドを持つテーブルです。
言語固有の設定を使用するのではなく、<function>to_tsvector</>関数で<literal>simple</>設定を使用する理由は、元の（語幹抽出されていない）単語のリストが欲しいためです。
  </para>

  <para>
<!--
   Next, create a trigram index on the word column:
-->
次にword列にトライグラムインデックスを作成します。

<programlisting>
CREATE INDEX words_idx ON words USING gin(word gin_trgm_ops);
</programlisting>

<!--
   Now, a <command>SELECT</command> query similar to the previous example can
   be used to suggest spellings for misspelled words in user search terms.
   A useful extra test is to require that the selected words are also of
   similar length to the misspelled word.
-->
これで、上の例に似た<literal>SELECT</literal>問い合わせを使用して、ユーザの検索語内でミススペルのある単語を提示できるようになります。
有用な追加された試験は、選択された単語の長さがミススペルのある単語の長さとほぼ同じになることを要求するものです。
  </para>

  <note>
   <para>
<!--
    Since the <structname>words</> table has been generated as a separate,
    static table, it will need to be periodically regenerated so that
    it remains reasonably up-to-date with the document collection.
    Keeping it exactly current is usually unnecessary.
-->
<structname>words</>テーブルは別に生成された静的なテーブルですので、文書群の更新に合理的に追従できるよう定期的に再生成する必要があります。
正確に最新状態を維持する必要性は通常ありません。
   </para>
  </note>
 </sect2>

 <sect2>
<!--
  <title>References</title>
-->
  <title>参考</title>

  <para>
<!--
   GiST Development Site
-->
GiST開発サイト
   <ulink url="http://www.sai.msu.su/~megera/postgres/gist/"></ulink>
  </para>
  <para>
<!--
   Tsearch2 Development Site
-->
Tsearch2開発サイト
   <ulink url="http://www.sai.msu.su/~megera/postgres/gist/tsearch/V2/"></ulink>
  </para>
 </sect2>

 <sect2>
<!--
  <title>Authors</title>
-->
  <title>作者</title>

  <para>
   Oleg Bartunov <email>oleg@sai.msu.su</email>, Moscow, Moscow University, Russia
  </para>
  <para>
   Teodor Sigaev <email>teodor@sigaev.ru</email>, Moscow, Delta-Soft Ltd.,Russia
  </para>
  <para>
<!--
   Documentation: Christopher Kings-Lynne
-->
   文書作成: Christopher Kings-Lynne
  </para>

  <para>
<!--
   This module is sponsored by Delta-Soft Ltd., Moscow, Russia.
-->
本モジュールはロシアモスクワのDelta-Soft Ltd.による後援です。
  </para>
 </sect2>

</sect1>

