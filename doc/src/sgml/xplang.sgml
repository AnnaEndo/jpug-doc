<!-- doc/src/sgml/xplang.sgml -->

 <chapter id="xplang">
<!--
  <title>Procedural Languages</title>
-->
  <title>手続き言語</title>

  <indexterm zone="xplang">
<!--
   <primary>procedural language</primary>
-->
   <primary>手続き言語</primary>
  </indexterm>

  <para>
<!--
   <productname>PostgreSQL</productname> allows user-defined functions
   to be written in other languages besides SQL and C.  These other
   languages are generically called <firstterm>procedural
   languages</firstterm> (<acronym>PL</>s).  For a function
   written in a procedural language, the database server has
   no built-in knowledge about how to interpret the function's source
   text. Instead, the task is passed to a special handler that knows
   the details of the language.  The handler could either do all the
   work of parsing, syntax analysis, execution, etc. itself, or it
   could serve as <quote>glue</quote> between
   <productname>PostgreSQL</productname> and an existing implementation
   of a programming language.  The handler itself is a
   C language function compiled into a shared object and
   loaded on demand, just like any other C function.
-->
<productname>PostgreSQL</productname>では、SQLやC言語以外の言語でユーザ定義の関数を作成することができます。
これらの他の言語は一般に<firstterm>手続き言語</firstterm>（<acronym>PL</>）と呼ばれます。
手続き言語で関数が記述されていた場合、データベースサーバにはその関数のソースをどのように解釈すればよいかについての知識が組み込まれていません。
代わりに、その処理はその言語を解釈する特別なハンドラに引き渡されます。
そのハンドラは解析、構文分析、実行などすべてのことを行うこともできますし、<productname>PostgreSQL</productname>と存在するプログラミング言語の実装との<quote>橋渡し</quote>ともなり得ます。
ハンドラそのものはC言語関数で、他のC言語関数と同様に、共有オブジェクトにコンパイルされ、要求に応じてロードされます。
  </para>

  <para>
<!--
   There are currently four procedural languages available in the
   standard <productname>PostgreSQL</productname> distribution:
   <application>PL/pgSQL</application> (<xref linkend="plpgsql">),
   <application>PL/Tcl</application> (<xref linkend="pltcl">),
   <application>PL/Perl</application> (<xref linkend="plperl">), and
   <application>PL/Python</application> (<xref linkend="plpython">).
   There are additional procedural languages available that are not
   included in the core distribution. <xref linkend="external-projects">
   has information about finding them. In addition other languages can
   be defined by users; the basics of developing a new procedural
   language are covered in <xref linkend="plhandler">.
-->
現在<productname>PostgreSQL</productname>の標準配布物では、<application>PL/pgSQL</application>（<xref linkend="plpgsql">）、<application>PL/Tcl</application>（<xref linkend="pltcl">）、<application>PL/Perl</application>（<xref linkend="plperl">）、<application>PL/Python</application>（<xref linkend="plpython">）という4つの手続き言語があります。
さらに、コア配布物には含まれない手続き言語があります。
<xref linkend="external-projects">でその見つけ方を説明します。
ユーザは他の言語を定義することもできます。
新しい手続き言語の開発について、その基礎を<xref linkend="plhandler">で説明します。
  </para>

  <sect1 id="xplang-install">
<!--
   <title>Installing Procedural Languages</title>
-->
   <title>手続き言語のインストール</title>

   <para>
<!--
    A procedural language must be <quote>installed</quote> into each
    database where it is to be used.  But procedural languages installed in
    the database <literal>template1</> are automatically available in all
    subsequently created databases, since their entries in
    <literal>template1</> will be copied by <command>CREATE DATABASE</>.
    So the database administrator can
    decide which languages are available in which databases and can make
    some languages available by default if he chooses.
-->
手続き言語は、それらが使用されるデータベースすべてに<quote>インストール</quote>されている必要があります。
しかし、<literal>template1</>データベースにインストールされた手続き言語は、<literal>template1</>内の項目は<command>CREATE DATABASE</>によってコピーされますので、その後に作成されたすべてのデータベースで自動的に使用できます。
したがって、データベース管理者はどのデータベースにどの言語を使用するかを決定できますし、デフォルトで使用できる言語も決定できます。
   </para>

   <para>
<!--
    For the languages supplied with the standard distribution, it is
    only necessary to execute <command>CREATE EXTENSION</>
    <replaceable>language_name</> to install the language into the
    current database.  Alternatively, the program <xref
    linkend="app-createlang"> can be used to do this from the shell
    command line.  For example, to install the language
    <application>PL/Perl</application> into the database
    <literal>template1</>, use:
-->
標準配布物で提供される言語では、その言語を現在のデータベースにインストールするには<command>CREATE EXTENSION</> <replaceable>language_name</>の実行のみが必要です。
シェルコマンドラインから<xref linkend="app-createlang">プログラムを使用してこれを行うこともできます。
例えば、<application>PL/Perl</application>を<literal>template1</>データベースにインストールするには、下記のように実行してください。
<programlisting>
createlang plperl template1
</programlisting>
<!--
    The manual procedure described below is only recommended for
    installing languages that have not been packaged as extensions.
-->
下記の手作業は、拡張機能としてパッケージ化されていない言語をインストールする場合にのみ行うことを推奨します。
   </para>

   <procedure>
    <title>
<!--
     Manual Procedural Language Installation
-->
手続き言語の手作業によるインストール方法
    </title>

    <para>
<!--
     A procedural language is installed in a database in five steps,
     which must be carried out by a database superuser.  In most cases
     the required SQL commands should be packaged as the installation script
     of an <quote>extension</>, so that <command>CREATE EXTENSION</> can be
     used to execute them.
-->
手続き言語を次の5段階でデータベースにインストールすることができます。
この作業はデータベースのスーパーユーザで行う必要があります。
ほとんどの場合、必要なSQLコマンドは<quote>拡張機能</>のインストールスクリプトとしてパッケージ化されていますので、この作業を実行するのに<command>CREATE EXTENSION</>が利用できます。
    </para>

    <step performance="required" id="xplang-install-cr1">
     <para>
<!--
      The shared object for the language handler must be compiled and
      installed into an appropriate library directory.  This works in the same
      way as building and installing modules with regular user-defined C
      functions does; see <xref linkend="dfunc">.  Often, the language
      handler will depend on an external library that provides the actual
      programming language engine; if so, that must be installed as well.
-->
その言語ハンドラ用の共有オブジェクトがコンパイルされ、適切なライブラリディレクトリにインストールされている必要があります。
これは、通常のユーザ定義のC関数を作成してインストールする時と同じです。
<xref linkend="dfunc">を参照してください。
実際のプログラミング言語エンジンを提供する外部ライブラリに、言語ハンドラが依存していることがよくあります。
この場合はそのライブラリもインストールしなければなりません。
     </para>
    </step>

    <step performance="required" id="xplang-install-cr2">
     <para>
<!--
      The handler must be declared with the command
-->
ハンドラは下記のコマンドで宣言されなければなりません。
<synopsis>
CREATE FUNCTION <replaceable>handler_function_name</replaceable>()
    RETURNS language_handler
    AS '<replaceable>path-to-shared-object</replaceable>'
    LANGUAGE C;
</synopsis>
<!--
      The special return type of <type>language_handler</type> tells
      the database system that this function does not return one of
      the defined <acronym>SQL</acronym> data types and is not directly usable
      in <acronym>SQL</acronym> statements.
-->
<type>language_handler</type>という特別な戻り値の型は、この関数が定義済みの<acronym>SQL</acronym>データ型を返さず、<acronym>SQL</acronym>文では直接使用できないことをデータベースシステムに伝えます。
     </para>
    </step>

    <step performance="optional" id="xplang-install-cr3">
     <para>
<!--
      Optionally, the language handler can provide an <quote>inline</>
      handler function that executes anonymous code blocks
      (<xref linkend="sql-do"> commands)
      written in this language.  If an inline handler function
      is provided by the language, declare it with a command like
-->
省略可能ですが、言語ハンドラは、この言語で書かれた無名コードブロック(<xref linkend="sql-do"> コマンド)を実行する<quote>インライン</>ハンドラ関数を提供することができます。
インラインハンドラ関数が言語により提供されるのであれば、以下のようなコマンドで宣言されます。
<synopsis>
CREATE FUNCTION <replaceable>inline_function_name</replaceable>(internal)
    RETURNS void
    AS '<replaceable>path-to-shared-object</replaceable>'
    LANGUAGE C;
</synopsis>
     </para>
    </step>

    <step performance="optional" id="xplang-install-cr4">
     <para>
<!--
      Optionally, the language handler can provide a <quote>validator</>
      function that checks a function definition for correctness without
      actually executing it.  The validator function is called by
      <command>CREATE FUNCTION</> if it exists.  If a validator function
      is provided by the language, declare it with a command like
-->
省略可能ですが、言語ハンドラは、実際に実行することなく関数定義の正確性を検査する<quote>有効性検査</>関数を提供することができます。
もし存在すれば、有効性検査関数は<command>CREATE FUNCTION</>で呼び出されます。
有効性検査関数が言語により提供されるのであれば、以下のようなコマンドで宣言されます。
<synopsis>
CREATE FUNCTION <replaceable>validator_function_name</replaceable>(oid)
    RETURNS void
    AS '<replaceable>path-to-shared-object</replaceable>'
    LANGUAGE C STRICT;
</synopsis>
     </para>
    </step>

    <step performance="required" id="xplang-install-cr5">
     <para>
<!--
      Finally, the PL must be declared with the command
-->
最終的に、PLは下記のコマンドで宣言されなければいけません。
<synopsis>
CREATE <optional>TRUSTED</optional> <optional>PROCEDURAL</optional> LANGUAGE <replaceable>language-name</replaceable>
    HANDLER <replaceable>handler_function_name</replaceable>
    <optional>INLINE <replaceable>inline_function_name</replaceable></optional>
    <optional>VALIDATOR <replaceable>validator_function_name</replaceable></optional> ;
</synopsis>
<!--
      The optional key word <literal>TRUSTED</literal> specifies that
      the language does not grant access to data that the user would
      not otherwise have.  Trusted languages are designed for ordinary
      database users (those without superuser privilege) and allows them
      to safely create functions and trigger
      procedures. Since PL functions are executed inside the database
      server, the <literal>TRUSTED</literal> flag should only be given
      for languages that do not allow access to database server
      internals or the file system. The languages
      <application>PL/pgSQL</application>,
      <application>PL/Tcl</application>, and
      <application>PL/Perl</application>
      are considered trusted; the languages
      <application>PL/TclU</application>,
      <application>PL/PerlU</application>, and
      <application>PL/PythonU</application>
      are designed to provide unlimited functionality and should
      <emphasis>not</emphasis> be marked trusted.
-->
<literal>TRUSTED</literal>というオプションキーワードは、ユーザがアクセス権を持たないデータに対して、その言語がアクセス権を持たないことを指定します。
<literal>TRUSTED</literal>である言語は（スーパーユーザ権限を持たない）一般ユーザ用に設計されており、安全に関数やトリガプロシージャを作成できます。
PL関数はデータベースサーバの内部で実行されますので、<literal>TRUSTED</literal>フラグはデータベースサーバ内部やファイルシステムへのアクセスを持たない言語のみが使わなければなりません。
<application>PL/pgSQL</application>と<application>PL/Tcl</application>、<application>PL/Perl</application>言語は<literal>TRUSTED</literal>と考えられています。
提供される機能が無制限に設計されている<application>PL/TclU</application>、<application>PL/PerlU</application>、<application>PL/PythonU</application>言語については、<literal>TRUSTED</literal>を指定しては<emphasis>なりません</emphasis>。
     </para>
    </step>
   </procedure>

   <para>
<!--
    <xref linkend="xplang-install-example"> shows how the manual
    installation procedure would work with the language
    <application>PL/Perl</application>.
-->
<xref linkend="xplang-install-example">に、手作業によるインストール手順が<application>PL/Perl</application>言語でどのように動作するかを示します。
   </para>

   <example id="xplang-install-example">
<!--
    <title>Manual Installation of <application>PL/Perl</application></title>
-->
<title><application>PL/Perl</application>の手作業によるインストール</title>

     <para>
<!--
      The following command tells the database server where to find the
      shared object for the <application>PL/Perl</application> language's call
      handler function:
-->
以下のコマンドは、データベースサーバに<application>PL/Perl</application>言語の呼び出しハンドラ関数用の共有ライブラリの存在場所を通知します。

<programlisting>
CREATE FUNCTION plperl_call_handler() RETURNS language_handler AS
    '$libdir/plperl' LANGUAGE C;
</programlisting>
     </para>

     <para>
<!--
      <application>PL/Perl</application> has an inline handler function
      and a validator function, so we declare those too:
-->
<application>PL/Perl</application>はインラインハンドラ関数と有効性検査関数を有していますので、以下のようにも宣言できます。

<programlisting>
CREATE FUNCTION plperl_inline_handler(internal) RETURNS void AS
    '$libdir/plperl' LANGUAGE C;

CREATE FUNCTION plperl_validator(oid) RETURNS void AS
    '$libdir/plperl' LANGUAGE C STRICT;
</programlisting>
     </para>

     <para>
<!--
      The command:
-->
以下のコマンドは、直前に宣言された関数を、言語属性が<literal>plperl</literal>である関数やトリガプロシージャ用に呼び出さなければならないことを定義します。
<programlisting>
CREATE TRUSTED PROCEDURAL LANGUAGE plperl
    HANDLER plperl_call_handler
    INLINE plperl_inline_handler
    VALIDATOR plperl_validator;
</programlisting>
<!--
      then defines that the previously declared functions
      should be invoked for functions and trigger procedures where the
      language attribute is <literal>plperl</literal>.
-->
     </para>
  </example>

   <para>
<!--
    In a default <productname>PostgreSQL</productname> installation,
    the handler for the <application>PL/pgSQL</application> language
    is built and installed into the <quote>library</quote>
    directory; furthermore, the <application>PL/pgSQL</application> language
    itself is installed in all databases.
    If <application>Tcl</> support is configured in, the handlers for
    <application>PL/Tcl</> and <application>PL/TclU</> are built and installed
    in the library directory, but the language itself is not installed in any
    database by default.
    Likewise, the <application>PL/Perl</> and <application>PL/PerlU</>
    handlers are built and installed if Perl support is configured, and the
    <application>PL/PythonU</> handler is installed if Python support is
    configured, but these languages are not installed by default.
-->
デフォルトの<productname>PostgreSQL</productname>インストレーションでは、<application>PL/pgSQL</application>言語用のハンドラは構築され、<quote>library</quote>ディレクトリにインストールされます。
さらに、<application>PL/pgSQL</application>言語自体がデータベースすべてにインストールされます。
<application>Tcl</>のサポート付きで構築した場合、<application>PL/Tcl</>と<application>PL/TclU</>用のハンドラも構築され同じ場所にインストールされますが、言語自体はデフォルトではどのデータベースにもインストールされません．
同様に、Perlサポート付きで構築した場合は<application>PL/Perl</>と<application>PL/PerlU</>ハンドラが、Pythonサポート付きで構築した場合は<application>PL/PythonU</>ハンドラが構築され、インストールされますが、言語自体はデフォルトではインストールされません。
   </para>

  </sect1>

</chapter>
