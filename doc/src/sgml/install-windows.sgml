<!-- doc/src/sgml/install-windows.sgml -->

<chapter id="install-windows">
<!--
 <title>Installation from Source Code on <productname>Windows</productname></title>
-->
 <title><productname>Windows</productname>におけるソースコードからのインストール</title>

 <indexterm>
<!--
  <primary>installation</primary>
  <secondary>on Windows</secondary>
-->
  <primary>インストール</primary>
  <secondary>Windowsにおける</secondary>
 </indexterm>

 <para>
 <!--
  It is recommended that most users download the binary distribution for
  Windows, available as a graphical installer package
  from the <productname>PostgreSQL</productname> website. Building from source
  is only intended for people developing <productname>PostgreSQL</productname>
  or extensions.
 -->
ほとんどのユーザには、<productname>PostgreSQL</productname>ウェブサイトからグラフィカルインストーラパッケージとして入手可能なWindows用のバイナリ配布物をダウンロードすることを推奨します。
ソースからの構築は<productname>PostgreSQL</productname>そのもの、もしくはその拡張の開発者のみを対象としています。
 </para>

 <para>
<!--
  There are several different ways of building PostgreSQL on
  <productname>Windows</productname>. The simplest way to build with
  Microsoft tools is to install <productname>Visual Studio Express 2013
  for Windows Desktop</productname> and use the included
  compiler. It is also possible to build with the full
  <productname>Microsoft Visual C++ 2005 to 2013</productname>.
  In some cases that requires the installation of the
  <productname>Windows SDK</productname> in addition to the compiler.
-->
<productname>Windows</productname>でPostgreSQLを構築する方法は複数存在します。
Microsoftのツールを使用した最も単純な構築方法では、<productname>Visual Studio Express 2013 for Windows Desktop</productname>をインストールし、それに含まれるコンパイラをインストールします。
また完全な<productname>Microsoft Visual C++ 2005から2013まで</productname>を使用しても構築することができます。
コンパイラの他に<productname>Windows SDK</productname>のインストールが必要となる場合があります。
 </para>

 <para>
<!--
  It is also possible to build PostgreSQL using the GNU compiler tools
  provided by <productname>MinGW</productname>, or using
  <productname>Cygwin</productname> for older versions of
  <productname>Windows</productname>.
-->
また、<productname>MinGW</productname>で提供されるGNUコンパイラツール、または、古めの<productname>Windows</productname>では<productname>Cygwin</productname>を使用してPostgreSQLを構築することができます。
 </para>

 <para>
<!--
  Finally, the client access library
  (<application>libpq</application>) can be built using
  <productname>Visual C++ 7.1</productname> or
  <productname>Borland C++</productname> for compatibility with statically
  linked applications built using these tools.
-->
最後に、クライアントアクセスライブラリ（<application>libpq</application>）は、<productname>Visual C++ 7.1</productname>または<productname>Borland C++</productname>を使用して構築された静的リンクのアプリケーションとの互換性のため、<productname>Visual C++ 7.1</productname>または<productname>Borland C++</productname>を用いて構築することができます。
 </para>

 <para>
<!--
  Building using <productname>MinGW</productname> or
  <productname>Cygwin</productname> uses the normal build system, see
  <xref linkend="installation"> and the specific notes in
  <xref linkend="installation-notes-mingw"> and <xref linkend="installation-notes-cygwin">.
  To produce native 64 bit binaries in these environments, use the tools from
  <productname>MinGW-w64</productname>. These tools can also be used to
  cross-compile for 32 bit and 64 bit <productname>Windows</productname>
  targets on other hosts, such as <productname>Linux</productname> and
  <productname>Darwin</productname>.
  <productname>Cygwin</productname> is not recommended for running a
  production server, and it should only be used for running on
  older versions of <productname>Windows</productname> where
  the native build does not work, such as
  <productname>Windows 98</productname>. The official
  binaries are built using <productname>Visual Studio</productname>.
 -->
<productname>MinGW</productname>または<productname>Cygwin</productname>を使用した構築では、通常の構築システムを使用します。
<xref linkend="installation">、<xref linkend="installation-notes-mingw">および<xref linkend="installation-notes-cygwin">にある固有の注記を参照してください。
これらの環境で64ビットバイナリを生成するためには<productname>MinGW-w64</productname>のツールを使用します。また、これらのツールは32ビットと64ビット<productname>Windows</productname>上で、<productname>Linux</productname>や<productname>Darwin</productname>などの他のホストを対象としたクロスコンパイルをする際にも使用されます。
<productname>Cygwin</productname>は商用サーバでの稼動は推奨されません。
これは、<productname>Windows 98</productname>などのネイティブな構築ができない古めのバージョンの<productname>Windows</productname>での使用に限定してください。
<productname>MinGW</productname>は、それを使用して他のモジュールを構築したい場合にのみ推奨します。
公式のバイナリは<productname>Visual Studio</productname>を使用して構築しています。
 </para>

 <para>
  <!--
  Native builds of <application>psql</application> don't support command
  line editing. The <productname>Cygwin</productname> build does support
  command line editing, so it should be used where psql is needed for
  interactive use on  <productname>Windows</productname>.
  -->
  <application>psql</application>のネイティブな構築はコマンドライン編集をサポートしていません。<productname>Cygwin</productname>による構築はコマンドライン編集をサポートしているので、
  <productname>Windows</productname>上でインタラクティブなpsqlの振る舞いが必要になる場合はこちらを使うべきでしょう。
 </para>

 <sect1 id="install-windows-full">
<!--
  <title>Building with <productname>Visual C++</productname> or the
  <productname>Microsoft Windows SDK</productname></title>
-->
<title><productname>Visual C++</productname>または<productname>Microsoft Windows SDK</productname>を使用した構築</title>

 <para>
<!--
  PostgreSQL can be built using the Visual C++ compiler suite from Microsoft.
  These compilers can be either from <productname>Visual Studio</productname>,
  <productname>Visual Studio Express</productname> or some versions of the
  <productname>Microsoft Windows SDK</productname>. If you do not already have a
  <productname>Visual Studio</productname> environment set up, the easiest
  ways are to use the compilers from <productname>Visual Studio Express 2013
  for Windows Desktop</productname> or those in the <productname>Windows SDK
  7.1</productname>, which are both free downloads from Microsoft.
-->
Microsoftが提供するVisual C++コンパイラスィートを使用してPostgreSQLを構築することができます。
これらのコンパイラは<productname>Visual Studio</productname>、<productname>Visual Studio Express</productname>、いくつかのバージョンの<productname>Microsoft Windows SDK</productname>にあります。
すでに<productname>Visual Studio</productname>環境が設定されているのでなければ、Microsoftから無料でダウンロードできる<productname>Visual Studio Express 2013 for Windows Desktop</productname>のコンパイラや<productname>Windows SDK 7.1</productname>のものを使用することが最も簡単な方法です。
 </para>

 <para>
<!--
  PostgreSQL is known to support compilation using the compilers shipped with
  <productname>Visual Studio 2005</productname> to
  <productname>Visual Studio 2013</productname> (including Express editions),
  as well as standalone Windows SDK releases 6.0 to 7.1.
  64-bit PostgreSQL builds are only supported with
  <productname>Microsoft Windows SDK</productname> version 6.0a to 7.1 or
  <productname>Visual Studio 2008</productname> and above.
-->
PostgreSQLは<productname>Visual Studio 2005</productname>から<productname>Visual Studio 2013</productname>(Expressエディション含む)までに付属のコンパイラをサポートします。
単体のWindows SDKの6.0から7.1までについても同様です。
64ビットPostgreSQLの構築は<productname>Microsoft Windows SDK</productname>のバージョン6.0aから7.1、もしくは<productname>Visual Studio 2008</productname>かそれ以上のバージョンでのみサポートしています。
 </para>

 <para>
<!--
  The tools for building using <productname>Visual C++</productname> or
  <productname>Platform SDK</productname> are in the
  <filename>src/tools/msvc</filename> directory. When building, make sure
  there are no tools from <productname>MinGW</productname> or
  <productname>Cygwin</productname> present in your system PATH. Also, make
  sure you have all the required Visual C++ tools available in the PATH. In
  <productname>Visual Studio</productname>, start the
  <application>Visual Studio Command Prompt</application>.
  If you wish to build a 64-bit version, you must use the 64-bit version of
  the command, and vice versa.
  In the <productname>Microsoft Windows SDK</productname>, start the
  <application>CMD shell</application> listed under the SDK on the Start Menu.
  In recent SDK versions you can change the targeted CPU architecture, build
  type, and target OS by using the <command>setenv</command> command, e.g.
  <command>setenv /x86 /release /xp</command> to target Windows XP or later
  with a 32-bit release build. See <command>/?</command> for other options to
  <command>setenv</command>.  All commands should be run from the
  <filename>src\tools\msvc</filename> directory.
-->
<productname>Visual C++</productname>または<productname>Platform SDK</productname>を使用して構築するためのツールが<filename>src/tools/msvc</filename>ディレクトリに存在します。
構築する際に、<productname>MinGW</productname>や<productname>Cygwin</productname>に付属するツールがシステムPATHに存在しないことを確認してください。
また、PATH上で必要なVisual C++ツールがすべて利用可能になっていることを確認してください。
<productname>Visual Studio</productname>では、<application>Visual Studio コマンドプロンプト</application>を起動してください。
64ビット版を構築したい場合には、それぞれ64ビット版のコマンドを使用する必要があります。
<productname>Microsoft Windows SDK</productname>では、SDKのスタートメニューにある<application>CMD shell</application>を起動してください。
最近のSDKでは、<command>setenv</command>コマンドを使うことで対象のCPUアーキテクチャ、構築種類、対象OSを変更することができます。
例えば<command>setenv /x86 /release /xp</command>は対象をWindows XP以降の32ビットリリース版として構築します。
その他の<command>setenv</command>のオプションについては<command>/?</command>を参照してください。
すべてのコマンドは<filename>src\tools\msvc</filename>ディレクトリから実行しなければなりません。
 </para>

 <para>
<!--
  Before you build, you may need to edit the file <filename>config.pl</filename>
  to reflect any configuration options you want to change, or the paths to
  any third party libraries to use. The complete configuration is determined
  by first reading and parsing the file <filename>config_default.pl</filename>,
  and then apply any changes from <filename>config.pl</filename>. For example,
  to specify the location of your <productname>Python</productname> installation,
  put the following in <filename>config.pl</filename>:
-->
構築する前に、<filename>config.pl</filename>ファイルを編集して、変更したい設定オプションや使用する何らかのサードパーティ製のライブラリのパスを反映させる必要があるかもしれません。
まず<filename>config_default.pl</filename>ファイルを読み取り、解析することから始まり、そして<filename>config.pl</filename>内の何らかの変更が適用されて、すべての設定が決定されます。
例えば、<productname>Python</productname>インストレーションの場所を指定する場合、以下を<filename>config.pl</filename>に記載します。
<programlisting>
$config->{python} = 'c:\python26';
</programlisting>
<!--
  You only need to specify those parameters that are different from what's in
  <filename>config_default.pl</filename>.
-->
<filename>config_default.pl</filename>内の指定と異なるパラメータのみを指定する必要があります。
 </para>

 <para>
<!--
  If you need to set any other environment variables, create a file called
  <filename>buildenv.pl</filename> and put the required commands there. For
  example, to add the path for bison when it's not in the PATH, create a file
  containing:
-->
何か他に環境変数を設定する必要があれば、<filename>buildenv.pl</filename>という名前のファイルを作成し、そこに必要なコマンドを記載してください。
たとえば、PATHにbison用のパスを追加したいのであれば、以下を含むファイルを作成してください。
<programlisting>
$ENV{PATH}=$ENV{PATH} . ';c:\some\where\bison\bin';
</programlisting>
 </para>

 <sect2>
<!--
  <title>Requirements</title>
-->
  <title>必要条件</title>
  <para>
<!--
   The following additional products are required to build
   <productname>PostgreSQL</productname>. Use the
   <filename>config.pl</filename> file to specify which directories the libraries
   are available in.
-->
<productname>PostgreSQL</productname>を構築するには以下の追加製品が必要です。
<filename>config.pl</filename>ファイルを使用してライブラリを利用できるディレクトリを指定してください。

   <variablelist>
    <varlistentry>
     <term><productname>Microsoft Windows SDK</productname></term>
     <listitem><para>
<!--
      If your build environment doesn't ship with a supported version of the
      <productname>Microsoft Windows SDK</productname> it
      is recommended that you upgrade to the latest version (currently
      version 7.1), available for download from
      <ulink url="http://www.microsoft.com/downloads/"></>.
-->
もしあなたの構築環境がサポートされている<productname>Microsoft Windows SDK</productname>のバージョンを搭載していないのであれば、入手可能な最新版(現在はバージョン7.1)までアップグレードすることを推奨します。
<ulink url="http://www.microsoft.com/downloads/"></>からダウンロードできます。
     </para>
     <para>
<!--
      You must always include the
      <application>Windows Headers and Libraries</application> part of the SDK.
      If you install a <productname>Windows SDK</productname>
      including the <application>Visual C++ Compilers</application>,
      you don't need <productname>Visual Studio</productname> to build.
      Note that as of Version 8.0a the Windows SDK no longer ships with a
      complete command-line build environment.
-->
SDKの<application>Windows Headers and Libraries</application>を常にインクルードしなければなりません。
<application>Visual C++ Compilers</application>に含まれる<productname>Windows SDK</productname>をインストールしている場合、構築のために<productname>Visual Studio</productname>は必要ありません。
バージョン8.0aでは、Windows SDKは完全なコマンドライン構築環境を提供していないことに注意してください。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>ActiveState Perl</productname></term>
     <listitem><para>
<!--
      ActiveState Perl is required to run the build generation scripts. MinGW
      or Cygwin Perl will not work. It must also be present in the PATH.
      Binaries can be downloaded from
      <ulink url="http://www.activestate.com"></> (Note: version 5.8 or later is required,
      the free Standard Distribution is sufficient).
-->
ActiveState Perlが構築生成スクリプトを実行するために必要です。
MinGWまたはCygwinのPerlでは動作しません。
また、PATH内に含められていなければなりません。
<ulink url="http://www.activestate.com"></>からバイナリをダウンロードできます
（注意：バージョン5.8以降が必要です。フリー版の標準配布で十分です）。
     </para></listitem>
    </varlistentry>

   </variablelist>
  </para>
  <para>
<!--
   The following additional products are not required to get started,
   but are required to build the complete package. Use the
   <filename>config.pl</filename> file to specify which directories the libraries
   are available in.
-->
使用できるようになることが目的であれば以下の追加製品は必要ありませんが、完全なパッケージを構築する場合には必要です。
<filename>config.pl</filename>を使用してライブラリが利用できるディレクトリを指定してください。

   <variablelist>
    <varlistentry>
     <term><productname>ActiveState TCL</productname></term>
     <listitem><para>
<!--
      Required for building <application>PL/TCL</application> (Note: version
      8.4 is required, the free Standard Distribution is sufficient).
-->
<application>PL/TCL</application>を構築する時に必要です
（注意：バージョン8.4が必要です。フリー版の標準配布で十分です）。
     </para></listitem>
    </varlistentry>

    <varlistentry>
<!--
     <term><productname>Bison</productname> and
      <productname>Flex</productname></term>
-->
     <term><productname>Bison</productname>および<productname>Flex</productname></term>
     <listitem>
     <para>
<!--
      <productname>Bison</productname> and <productname>Flex</productname> are
      required to build from Git, but not required when building from a release
      file. Only <productname>Bison</productname> 1.875 or versions 2.2 and later
      will work. <productname>Flex</productname> must be version 2.5.31 or later.
-->
Gitから構築する場合は<productname>Bison</productname>および<productname>Flex</productname>が必要です。
しかしリリースファイルから構築する場合は不要です。
<productname>Bison</productname> 1.875またはバージョン2.2以降のみで動作します。
<productname>Flex</productname>はバージョン2.5.31以降でなければなりません。
     </para>

     <para>
<!--
      Both <productname>Bison</productname> and <productname>Flex</productname>
      are included in the <productname>msys</productname> tool suite, available
      from <ulink url="http://www.mingw.org/wiki/MSYS"></> as part of the
      <productname>MinGW</productname> compiler suite. You can also get
      <productname>msys</productname> as part of
      <productname>msysGit</productname> from <ulink url="http://git-scm.com/"></>.
-->
<productname>Bison</productname>および<productname>Flex</productname>の両方が、<productname>MinGW</productname>コンパイラ一式の一部として<ulink url="http://www.mingw.org/wiki/MSYS"></>から入手できる、<productname>msys</productname>ツール一式に含まれています。
また<ulink url="http://git-scm.com/"></>から<productname>msysGit</productname>の一部として<productname>msys</productname>を入手することもできます。
     </para>

     <para>
<!--
      You will need to add the directory containing
      <filename>flex.exe</filename> and <filename>bison.exe</filename> to the
      PATH environment variable in <filename>buildenv.pl</filename> unless
      they are already in PATH. In the case of MinGW, the directory is the
      <filename>\msys\1.0\bin</filename> subdirectory of your MinGW
      installation directory. For msysGit, it's the <filename>bin</filename>
      directory in your Git install directory. Do not add the MinGW compiler
      tools themselves to PATH.
-->
すでにPATHが通っていない場合は、<filename>buildenv.pl</filename>の中で<filename>flex.exe</filename>および<filename>bison.exe</filename>があるディレクトリをPATH環境変数に追加する必要があります。
MinGWの場合、このディレクトリはMinGWのインストールディレクトリの<filename>\msys\1.0\bin</filename>副ディレクトリです。
msysGitの場合は、Gitインストールディレクトリ内の<filename>bin</filename>です。
MinGWコンパイラツール自体をPATHに追加しないでください。
     </para>

     <note>
      <para>
      <!--
        The Bison distribution from GnuWin32 appears to have a bug that
        causes Bison to malfunction when installed in a directory with
        spaces in the name, such as the default location on English
        installations <filename>C:\Program Files\GnuWin32</filename>.
        Consider installing into <filename>C:\GnuWin32</filename> or use the
        NTFS short name path to GnuWin32 in your PATH environment setting
        (e.g. <filename>C:\PROGRA~1\GnuWin32</filename>).
-->
GnuWin32からのBisonディストリビューションでは、<filename>C:\Program Files\GnuWin32</filename>の様に名前に空白を持つディレクトリにインストールされると正常に機能しないというバグがあります。
代わりに<filename>C:\GnuWin32</filename>へのインストール、または、PATH環境設定におけるGnuWin32へのNTFSショートネームパスの使用（例えば<filename>C:\PROGRA~1\GnuWin32</filename>）を検討してください。
       </para>
     </note>

     <note>
       <para>
<!--
       The obsolete "winflex" binaries distributed on the PostgreSQL FTP site
       and referenced in older documentation will fail with "flex: fatal
       internal error, exec failed" on 64-bit Windows hosts. Use flex from
       msys instead.
-->
PostgreSQL FTPサイトで配布され、古い文書で参照していた古い"winflex"は、64ビットWindowsホストでは"flex: fatal internal error, exec failed"で失敗します。
代わりにmsysからのflexを使用してください。
       </para>
     </note>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>Diff</productname></term>
     <listitem><para>
<!--
      Diff is required to run the regression tests, and can be downloaded
      from <ulink url="http://gnuwin32.sourceforge.net"></>.
-->
リグレッションテストを実行するにはdiffが必要です。
<ulink url="http://gnuwin32.sourceforge.net"></>からダウンロードできます。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>Gettext</productname></term>
     <listitem><para>
<!--
      Gettext is required to build with NLS support, and can be downloaded
      from <ulink url="http://gnuwin32.sourceforge.net"></>. Note that binaries,
      dependencies and developer files are all needed.
-->
NLSサポート付きで構築する場合はgettextが必要です。
<ulink url="http://gnuwin32.sourceforge.net"></>からダウンロードできます。
バイナリ、依存物、開発用ファイルすべてが必要であることに注意してください。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>MIT Kerberos</productname></term>
     <listitem><para>
<!--
      Required for GSSAPI authentication support. MIT Kerberos can be
      downloaded from
      <ulink url="http://web.mit.edu/Kerberos/dist/index.html"></>.
-->
GSSAPI認証をサポートする場合に必要です。
MIT Kerberosは<ulink url="http://web.mit.edu/Kerberos/dist/index.html"></>からダウンロードできます。
     </para></listitem>
    </varlistentry>

    <varlistentry>
<!--
     <term><productname>libxml2</productname> and
      <productname>libxslt</productname></term>
-->
     <term><productname>libxml2</productname>および<productname>libxslt</productname></term>
     <listitem><para>
<!--
      Required for XML support. Binaries can be downloaded from
      <ulink url="http://zlatkovic.com/pub/libxml"></> or source from
      <ulink url="http://xmlsoft.org"></>. Note that libxml2 requires iconv,
      which is available from the same download location.
-->
XMLサポートのために必要です。
バイナリは<ulink url="http://zlatkovic.com/pub/libxml"></>から、ソースは<ulink url="http://xmlsoft.org"></>からダウンロードできます。
libxml2はiconvを必要とすることに注意してください。
同じ場所からダウンロードできます。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>openssl</productname></term>
     <listitem><para>
<!--
      Required for SSL support. Binaries can be downloaded from
      <ulink url="http://www.slproweb.com/products/Win32OpenSSL.html"></>
      or source from <ulink url="http://www.openssl.org"></>.
-->
SSLサポートのために必要です。
バイナリは<ulink url="http://www.slproweb.com/products/Win32OpenSSL.html"></>から、ソースは<ulink url="http://www.openssl.org"></>からダウンロードできます。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>ossp-uuid</productname></term>
     <listitem><para>
<!--
      Required for UUID-OSSP support (contrib only). Source can be
      downloaded from
      <ulink url="http://www.ossp.org/pkg/lib/uuid/"></>.
-->
UUID-OSSPサポート（contribのみ）で必要です。
ソースは<ulink url="http://www.ossp.org/pkg/lib/uuid/"></>にあります。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>Python</productname></term>
     <listitem><para>
<!--
      Required for building <application>PL/Python</application>. Binaries can
      be downloaded from <ulink url="http://www.python.org"></>.
-->
<application>PL/Python</application>を構築する場合に必要です。
バイナリは<ulink url="http://www.python.org"></>からダウンロードできます。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term><productname>zlib</productname></term>
     <listitem><para>
<!--
      Required for compression support in <application>pg_dump</application>
      and <application>pg_restore</application>. Binaries can be downloaded
      from <ulink url="http://www.zlib.net"></>.
-->
<application>pg_dump</application>および<application>pg_restore</application>における圧縮をサポートするために必要です。
バイナリは<ulink url="http://www.zlib.net"></>からダウンロードできます。
     </para></listitem>
    </varlistentry>

   </variablelist>
  </para>
 </sect2>

 <sect2>
<!--
  <title>Special Considerations for 64-bit Windows</title>
-->
  <title>64ビット版のWindowsにおける特別な考慮事項</title>

  <para>
<!--
   PostgreSQL will only build for the x64 architecture on 64-bit Windows, there
   is no support for Itanium processors.
-->
64ビット版Windowsにおいてx64アーキテクチャのみでPostgreSQLを構築することができます。
Itaniumプロセッサをサポートしていません。
  </para>

  <para>
<!--
   Mixing 32- and 64-bit versions in the same build tree is not supported.
   The build system will automatically detect if it's running in a 32- or
   64-bit environment, and build PostgreSQL accordingly. For this reason, it
   is important to start the correct command prompt before building.
-->
同じ構築用ツリーで32ビット版と64ビット版を混在させることはサポートされません。
構築システムは32ビット環境で動作しているか64ビット環境で動作しているかを自動的に検出し、それにしたがってPostgreSQLを構築します。
このため構築作業を始める前に正しいコマンドプロンプトを開始することが重要です。
  </para>

  <para>
<!--
   To use a server-side third party library such as <productname>python</> or
   <productname>openssl</>, this library <emphasis>must</emphasis> also be
   64-bit. There is no support for loading a 32-bit library in a 64-bit
   server. Several of the third party libraries that PostgreSQL supports may
   only be available in 32-bit versions, in which case they cannot be used with
   64-bit PostgreSQL.
-->
<productname>python</>や<productname>openssl</>などのサーバサイドのサードパーティ製ライブラリを使用するためには、ライブラリも64ビット版である<emphasis>必要があります</emphasis>。
64ビット版のサーバで32ビット版のライブラリをロードすることはサポートされていません。
PostgreSQLがサポートするサードパーティ製のライブラリで32ビット版しか利用できないものが複数あります。
こうした場合、64ビット版のPostgreSQLで使用することはできません。
  </para>
 </sect2>

 <sect2>
<!--
  <title>Building</title>
-->
  <title>構築</title>

  <para>
<!--
   To build all of PostgreSQL in release configuration (the default), run the
   command:
-->
リリース条件（デフォルト）でPostgreSQLをすべて構築するためには、以下のコマンドを実行してください。
<screen>
<userinput>build</userinput>
</screen>
<!--
   To build all of PostgreSQL in debug configuration, run the command:
-->
デバッグ条件でPostgreSQLをすべて構築するためには、以下のコマンドを実行してください。
<screen>
<userinput>build DEBUG</userinput>
</screen>
<!--
   To build just a single project, for example psql, run the commands:
-->
単一のプロジェクトのみを構築するためには、たとえばpsqlであれば、以下のコマンドを実行してください。
<screen>
<userinput>build psql</userinput>
<userinput>build DEBUG psql</userinput>
</screen>
<!--
   To change the default build configuration to debug, put the following
   in the <filename>buildenv.pl</filename> file:
-->
デバッグのためにデフォルトの構築条件を変更するためには、以下を<filename>buildenv.pl</filename>ファイルに記載してください。
<programlisting>
$ENV{CONFIG}="Debug";
</programlisting>
  </para>

  <para>
<!--
   It is also possible to build from inside the Visual Studio GUI. In this
   case, you need to run:
-->
また、Visual Studio GUI内から構築することも可能です。
この場合はコマンドプロンプトから以下を実行しなければなりません。
<screen>
<userinput>perl mkvcbuild.pl</userinput>
</screen>
<!--
   from the command prompt, and then open the generated
   <filename>pgsql.sln</filename> (in the root directory of the source tree)
   in Visual Studio.
-->
その後に、生成された<filename>pgsql.sln</filename>（ソースツリーのトップディレクトリに存在します。）をVisual Studioで開いてください。
  </para>
 </sect2>

 <sect2>
<!--
  <title>Cleaning and Installing</title>
-->
  <title>整理およびインストール</title>

  <para>
<!--
   Most of the time, the automatic dependency tracking in Visual Studio will
   handle changed files. But if there have been large changes, you may need
   to clean the installation. To do this, simply run the
   <filename>clean.bat</filename> command, which will automatically clean out
   all generated files. You can also run it with the
   <parameter>dist</parameter> parameter, in which case it will behave like
   <userinput>make distclean</userinput> and remove the flex/bison output files
   as well.
-->
ほとんどの場合、Visual Studioの持つ自動依存関係追跡により変更されたファイルが扱われます。
しかし、大規模な変更が行われた場合、インストレーションを整理する必要があるかもしれません。
このためには、<filename>clean.bat</filename>コマンドを実行してください。
これにより、生成されたファイルがすべて自動的に消去されます。
また、<parameter>dist</parameter>パラメータを使用して実行することも可能です。
この場合、<userinput>make distclean</userinput>のように振舞い、flex/bisonの出力ファイルも削除します。
  </para>

  <para>
<!--
   By default, all files are written into a subdirectory of the
   <filename>debug</filename> or <filename>release</filename> directories. To
   install these files using the standard layout, and also generate the files
   required to initialize and use the database, run the command:
-->
デフォルトで、すべてのファイルは<filename>debug</filename>または<filename>release</filename>ディレクトリ以下のサブディレクトリに書き出されます。
これらのファイルを標準レイアウトでインストールし、データベースの初期化や使用に必要なファイルを生成するためには、以下のコマンドを実行してください。
<screen>
<userinput>install c:\destination\directory</userinput>
</screen>
  </para>

  <para>
<!--
   If you want to install only the client applications and
   interface libraries, then you can use these commands:
-->
クライアントアプリケーションとインタフェースライブラリだけをインストールしたいのであれば、以下のコマンドが使えます。
<screen>
<userinput>install c:\destination\directory client</userinput>
</screen>
  </para>
 </sect2>

 <sect2>
<!--
  <title>Running the Regression Tests</title>
-->
  <title>リグレッションテストの実行</title>

  <para>
<!--
   To run the regression tests, make sure you have completed the build of all
   required parts first. Also, make sure that the DLLs required to load all
   parts of the system (such as the Perl and Python DLLs for the procedural
   languages) are present in the system path. If they are not, set it through
   the <filename>buildenv.pl</filename> file. To run the tests, run one of
   the following commands from the <filename>src\tools\msvc</filename>
   directory:
-->
リグレッションテストを実行するためには、まず必要なすべての部品の構築が完了していることを確認してください。
また、システムのすべての部品で必要とするDLL（手続き言語用のPerlのDLLやPythonのDLLなど）がシステムパスに含まれていることを確認してください。
もし含まれていなければ、<filename>buildenv.pl</filename>ファイルを介して設定してください。
試験を実行するためには、以下のコマンドのいずれかを<filename>src\tools\msvc</filename>ディレクトリから実行してください。
<screen>
<userinput>vcregress check</userinput>
<userinput>vcregress installcheck</userinput>
<userinput>vcregress plcheck</userinput>
<userinput>vcregress contribcheck</userinput>
</screen>

<!--
   To change the schedule used (default is parallel), append it to the
   command line like:
-->
使用するスケジュール（デフォルトはparallelです）を変更するためには、コマンドラインに以下のように追加してください。
<screen>
<userinput>vcregress check serial</userinput>
</screen>

<!--
   For more information about the regression tests, see
   <xref linkend="regress">.
-->
リグレッションテストの詳細については<xref linkend="regress">を参照してください。
  </para>
 </sect2>

 <sect2>
<!--
  <title>Building the Documentation</title>
-->
  <title>文書の構築</title>

  <para>
<!--
   Building the PostgreSQL documentation in HTML format requires several tools
   and files. Create a root directory for all these files, and store them
   in the subdirectories in the list below.
-->
PostgreSQLの文書をHTML書式で構築するためには、いくつかツールやファイルが必要です。
これらのファイルをすべて格納するためのトップディレクトリを作成し、以下のリストに記載したサブディレクトリに格納してください。
   <variablelist>
    <varlistentry>
     <term>OpenJade 1.3.1-2</term>
     <listitem><para>
<!--
      Download from
      <ulink url="http://sourceforge.net/projects/openjade/files/openjade/1.3.1/openjade-1_3_1-2-bin.zip/download"></>
      and uncompress in the subdirectory <filename>openjade-1.3.1</filename>.
-->
<ulink url="http://sourceforge.net/projects/openjade/files/openjade/1.3.1/openjade-1_3_1-2-bin.zip/download"></>からダウンロードし、<filename>openjade-1.3.1</filename>サブディレクトリで伸長してください。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term>DocBook DTD 4.2</term>
     <listitem><para>
<!--
      Download from
      <ulink url="http://www.oasis-open.org/docbook/sgml/4.2/docbook-4.2.zip"></>
      and uncompress in the subdirectory <filename>docbook</filename>.
-->
<ulink url="http://www.oasis-open.org/docbook/sgml/4.2/docbook-4.2.zip"></>からダウンロードし、<filename>docbook</filename>サブディレクトリで伸長してください。
     </para></listitem>
    </varlistentry>

    <varlistentry>
     <term>DocBook DSSSL 1.79</term>
     <listitem><para>
<!--
      Download from
      <ulink url="http://sourceforge.net/projects/docbook/files/docbook-dsssl/1.79/docbook-dsssl-1.79.zip/download"></>
      and uncompress in the subdirectory
      <filename>docbook-dsssl-1.79</filename>.
-->
<ulink url="http://sourceforge.net/projects/docbook/files/docbook-dsssl/1.79/docbook-dsssl-1.79.zip/download"></>からダウンロードし、<filename>docbook-dsssl-1.79</filename>サブディレクトリで伸長してください。
     </para></listitem>
    </varlistentry>

    <varlistentry>
<!--
     <term>ISO character entities</term>
-->
     <term>ISO文字エンティティ</term>
     <listitem><para>
<!--
      Download from
      <ulink url="http://www.oasis-open.org/cover/ISOEnts.zip"></> and
      uncompress in the subdirectory <filename>docbook</filename>.
-->
<ulink url="http://www.oasis-open.org/cover/ISOEnts.zip"></>からダウンロードし、<filename>docbook</filename>サブディレクトリで伸長してください。
     </para></listitem>
    </varlistentry>
   </variablelist>
<!--
   Edit the <filename>buildenv.pl</filename> file, and add a variable for the
   location of the root directory, for example:
-->
<filename>buildenv.pl</filename>ファイルを編集し、このトップディレクトリの場所を示す変数を追加してください。
例を示します。
<programlisting>
$ENV{DOCROOT}='c:\docbook';
</programlisting>
<!--
   To build the documentation, run the command
   <filename>builddoc.bat</filename>. Note that this will actually run the
   build twice, in order to generate the indexes. The generated HTML files
   will be in <filename>doc\src\sgml</filename>.
-->
文書を構築するためには、<filename>builddoc.bat</filename>コマンドを実行してください。
これは実際にはインデックスを作成するために、2回構築を行うことに注意してください。
生成されたHTMLファイルは<filename>doc\src\sgml</filename>に格納されます。
  </para>
 </sect2>

 </sect1>

 <sect1 id="install-windows-libpq">
<!--
  <title>Building <application>libpq</application> with
  <productname>Visual C++</productname> or
  <productname>Borland C++</productname></title>
-->
  <title><productname>Visual C++</productname>または<productname>Borland C++</productname>を使用した<application>libpq</application>の構築</title>


 <para>
<!--
  Using <productname>Visual C++ 7.1-9.0</productname> or
  <productname>Borland C++</productname> to build libpq is only recommended
  if you need a version with different debug/release flags, or if you need a
  static library to link into an application. For normal use the
  <productname>MinGW</productname> or
  <productname>Visual Studio</productname> or
  <productname>Windows SDK</productname> method is recommended.
-->
異なるデバッグ用フラグやリリース用フラグを付けたバージョンを必要とする場合や静的リンクでアプリケーションとリンクする必要がある場合に限って、libpqを構築する際に<productname>Visual C++ 7.1-9.0</productname>または<productname>Borland C++</productname>を使用することが推奨されます。
普通に使用するのであれば、<productname>MinGW</productname>、<productname>Visual Studio</productname>、<productname>Windows SDK</productname>による方法を推奨します。
 </para>

 <para>
<!--
  To build the <application>libpq</application> client library using
  <productname>Visual Studio 7.1 or later</productname>, change into the
  <filename>src</filename> directory and type the command:
-->
<productname>Visual Studio 7.1</productname>以降を使用して<application>libpq</application>クライアントライブラリを構築するためには、<filename>src</filename>ディレクトリに移動し、以下のコマンドを入力してください。
<screen>
<userinput>nmake /f win32.mak</userinput>
</screen>
 </para>
 <para>
<!--
 To build a 64-bit version of the <application>libpq</application>
 client library using <productname>Visual Studio 8.0 or
 later</productname>, change into the <filename>src</filename>
 directory and type in the command:
-->
<productname>Visual Studio 6.0</productname>以降を使用して64ビット版の<application>libpq</application>クライアントライブラリを構築するためには、<filename>src</filename>ディレクトリに移動し、以下のコマンドを入力してください。
<screen>
<userinput>nmake /f win32.mak CPU=AMD64</userinput>
</screen>
<!--
 See the <filename>win32.mak</filename> file for further details
 about supported variables.
-->
サポートされる変数の詳細については<filename>win32.mak</filename>ファイルを参照してください。
 </para>

 <para>
<!--
  To build the <application>libpq</application> client library using
  <productname>Borland C++</productname>, change into the
  <filename>src</filename> directory and type the command:
-->
<productname>Borland C++</productname>以降を使用して<application>libpq</application>クライアントライブラリを構築するためには、<filename>src</filename>ディレクトリに移動し、以下のコマンドを入力してください。
<screen>
<userinput>make -N -DCFG=Release /f bcc32.mak</userinput>
</screen>
 </para>

 <sect2>
<!--
 <title>Generated Files</title>
-->
 <title>生成されるファイル</title>
 <para>
<!--
  The following files will be built:
-->
以下のファイルが構築されます。

  <variablelist>
   <varlistentry>
    <term><filename>interfaces\libpq\Release\libpq.dll</filename></term>
    <listitem>
     <para>
<!--
      The dynamically linkable frontend library
-->
動的リンク可能なフロントエンドライブラリ
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><filename>interfaces\libpq\Release\libpqdll.lib</filename></term>
    <listitem>
     <para>
<!--
      Import library to link your programs to <filename>libpq.dll</filename>
-->
ユーザのプログラムを<filename>libpq.dll</filename>にリンクする際に使用するインポートライブラリ
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><filename>interfaces\libpq\Release\libpq.lib</filename></term>
    <listitem>
     <para>
<!--
      Static version of the frontend library
-->
静的なフロントエンドライブラリ
     </para>
    </listitem>
   </varlistentry>

  </variablelist>
 </para>

 <para>
<!--
  Normally you do not need to install any of the client files. You should
  place the <filename>libpq.dll</filename> file in the same directory
  as your applications executable file. Do not install
  <filename>libpq.dll</filename> into your <filename>Windows</>,
  <filename>System</> or <filename>System32</> directory unless
  absolutely necessary.
  If this file is installed using a setup program, then it should
  be installed with version checking using the
  <symbol>VERSIONINFO</symbol> resource included in the file, to
  ensure that a newer version of the library is not overwritten.
-->
通常何らかのクライアント用のファイルをインストールする必要はありません。
アプリケーションの実行ファイルと同じディレクトリに<filename>libpq.dll</filename>ファイルを格納しなければなりません。
絶対に必要な理由がない限り、<filename>libpq.dll</filename>を<filename>Windows</>の<filename>System</>や<filename>System32</>ディレクトリにインストールしないでください。
このファイルがセットアッププログラムを使ってインストールされるならば、ライブラリの新しいバージョンが上書きされないように、ファイルに含まれる<symbol>VERSIONINFO</symbol>リソースを使ったバージョン検査をしなければいけません。
 </para>

 <para>
<!--
  If you are planning to do development using <application>libpq</application>
  on this machine, you will have to add the
  <filename>src\include</filename> and
  <filename>src\interfaces\libpq</filename> subdirectories of the source
  tree to the include path in your compiler's settings.
-->
もしこのマシンで<application>libpq</application>を使った開発を行う場合は、<filename>src\include</filename>と<filename>src\interfaces\libpq</filename>というソースツリーのサブディレクトリをコンパイラ設定のインクルードパスに追加する必要があります。
 </para>

 <para>
<!--
  To use the library, you must add the
  <filename>libpqdll.lib</filename> file to your project.  (In Visual
  C++, just right-click on the project and choose to add it.)
-->
ライブラリを使うためには、プロジェクトに<filename>libpqdll.lib</filename>ファイルを追加しなくてはいけません。
（Visual C++ではプロジェクトを右クリックし、追加を選択してください。）
 </para>
 </sect2>
 </sect1>
</chapter>
