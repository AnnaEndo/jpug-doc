<!-- doc/src/sgml/contrib-spi.sgml -->

<sect1 id="contrib-spi" xreflabel="spi">
 <title>spi</title>

 <indexterm zone="contrib-spi">
  <primary>SPI</primary>
  <secondary>examples</secondary>
 </indexterm>

 <para>
<!--
  The <application>spi</> module provides several workable examples
  of using SPI and triggers.  While these functions are of some value in
  their own right, they are even more useful as examples to modify for
  your own purposes.  The functions are general enough to be used
  with any table, but you have to specify table and field names (as described
  below) while creating a trigger.
-->
<application>spi</>モジュールは、SPIおよびトリガを使用した、動作可能な例を複数提供します。
これらの関数は独自の何らかの価値を持つものですが、目的に応じて変更するための例としてより有用です。
関数は任意のテーブルと使用できるほど一般的なものですが、トリガを作成する場合は（後述のように）テーブル名とフィールド名を指定する必要があります。
 </para>

 <para>
<!--
  Each of the groups of functions described below is provided as a
  separately-installable extension.
-->
以下で説明する関数グループのそれぞれは、別々にインストールすることができる拡張として提供されます。
 </para>

 <sect2>
<!--
  <title>refint &mdash; Functions for Implementing Referential Integrity</title>
-->
  <title>refint &mdash; 参照整合性を実装する関数</title>

  <para>
<!--
   <function>check_primary_key()</> and
   <function>check_foreign_key()</> are used to check foreign key constraints.
   (This functionality is long since superseded by the built-in foreign
   key mechanism, of course, but the module is still useful as an example.)
-->
<function>check_primary_key()</>および<function>check_foreign_key()</>は、外部キー制約を検査するために使用されます。
（当然ながら、この機能はかなり前に組み込みの外部キー機能に取って代わりました。しかし例としてはまだ有用です。）
  </para>

  <para>
<!--
   <function>check_primary_key()</> checks the referencing table.
   To use, create a <literal>BEFORE INSERT OR UPDATE</> trigger using this
   function on a table referencing another table. Specify as the trigger
   arguments: the referencing table's column name(s) which form the foreign
   key, the referenced table name, and the column names in the referenced table
   which form the primary/unique key.  To handle multiple foreign
   keys, create a trigger for each reference.
-->
<function>check_primary_key()</>は参照テーブルを検査します。
使用方法は、この関数を使用する<literal>BEFORE INSERT OR UPDATE</>トリガを他のテーブルを参照するテーブルに作成することです。
トリガ引数は、外部キーを形成する参照テーブルの列名、被参照テーブル名、プライマリ/一意キーを形成する被参照テーブルの列名です。
複数の外部キーを扱うためには、各参照に対してトリガを作成してください。
  </para>

  <para>
<!--
   <function>check_foreign_key()</> checks the referenced table.
   To use, create a <literal>BEFORE DELETE OR UPDATE</> trigger using this
   function on a table referenced by other table(s).  Specify as the trigger
   arguments: the number of referencing tables for which the function has to
   perform checking, the action if a referencing key is found
   (<literal>cascade</> &mdash; to delete the referencing row,
   <literal>restrict</> &mdash; to abort transaction if referencing keys
   exist, <literal>setnull</> &mdash; to set referencing key fields to null),
   the triggered table's column names which form the primary/unique key, then
   the referencing table name and column names (repeated for as many
   referencing tables as were specified by first argument).  Note that the
   primary/unique key columns should be marked NOT NULL and should have a
   unique index.
-->
<function>check_foreign_key()</>は被参照テーブルを検査します。
使用方法は、この関数を使用する<literal>BEFORE DELETE OR UPDATE</>トリガを他のテーブルで参照されるテーブルに作成することです。
トリガ引数は、この関数が検査を実行しなければならない参照テーブル数、参照キーが見つかった場合の動作（<literal>cascade</> &mdash; 参照行を削除、<literal>restrict</> &mdash; 参照キーが存在する場合トランザクションをアボート、<literal>setnull</> &mdash;参照キーフィールドをNULLに設定）、プライマリ/一意キーを形成するトリガを発行したテーブルの列名、参照テーブルの名前と列名（最初の引数で指定された数のテーブル分繰り返す）です。
プライマリ/一意キー列はNOT NULLと指定されていなければならず、また、一意性インデックスを持つべきであることに注意してください。
  </para>

  <para>
<!--
   There are examples in <filename>refint.example</>.
-->
<filename>refint.example</>に例があります。
  </para>
 </sect2>

 <sect2>
<!--
  <title>timetravel &mdash; Functions for Implementing Time Travel</title>
-->
  <title>timetravel &mdash; 時間旅行を実装する関数</title>

  <para>
<!--
   Long ago, <productname>PostgreSQL</> had a built-in time travel feature
   that kept the insert and delete times for each tuple.  This can be
   emulated using these functions.  To use these functions,
   you must add to a table two columns of <type>abstime</> type to store
   the date when a tuple was inserted (start_date) and changed/deleted
   (stop_date):
-->
かなり前に<productname>PostgreSQL</>は各タプルで挿入時間、削除時間を保持する時間旅行機能が組み込まれました。
これをこれらの関数を使用して模擬することができます。
これらの関数を使用するためには、<type>abstime</>型の、タプルの挿入日付（start_date）および変更/削除日付（stop_date）を格納するために2つの列をテーブルに追加しなければなりません。

<programlisting>
CREATE TABLE mytab (
        ...             ...
        start_date      abstime,
        stop_date       abstime
        ...             ...
);
</programlisting>

<!--
   The columns can be named whatever you like, but in this discussion
   we'll call them start_date and stop_date.
-->
この列には好みの名前を付けることができますが、以下の説明ではstart_date、stop_dateを使用します。
  </para>

  <para>
<!--
   When a new row is inserted, start_date should normally be set to
   current time, and stop_date to <literal>infinity</>.  The trigger
   will automatically substitute these values if the inserted data
   contains nulls in these columns.  Generally, inserting explicit
   non-null data in these columns should only be done when re-loading
   dumped data.
-->
新しく行が挿入される時、start_dateは通常現在時刻に、stop_dateは<literal>infinity</>に設定されるはずです。
挿入されるデータにおけるこれらの列がNULLの場合、トリガは自動的にこれらの値を置き換えます。
一般的には、これらの列に非NULLのデータを明示的に挿入することは、ダンプデータの再ロードを行う時にしかないはずです。
  </para>

  <para>
<!--
   Tuples with stop_date equal to <literal>infinity</> are <quote>valid
   now</quote>, and can be modified.  Tuples with a finite stop_date cannot
   be modified anymore &mdash; the trigger will prevent it.  (If you need
   to do that, you can turn off time travel as shown below.)
-->
stop_dateが<literal>infinity</>のstop_dateを持つタプルは<quote>現在有効</quote>で、変更可能です。
トリガが防止するため、有限のstop_dateを持つタプルを変更することはできません。
（変更する必要がある場合は、以下のように時間旅行を無効にすることができます。）
  </para>

  <para>
<!--
   For a modifiable row, on update only the stop_date in the tuple being
   updated will be changed (to current time) and a new tuple with the modified
   data will be inserted.  Start_date in this new tuple will be set to current
   time and stop_date to <literal>infinity</>.
-->
変更可能な行では、更新時、更新されようとしているタプルのstop_dateのみが（現在時刻に）変更され、変更されたデータを持った新しいタプルが挿入されます。
この新しいタプルのstart_dateは現在時刻となり、stop_dateは<literal>infinity</>になります。
  </para>

  <para>
<!--
   A delete does not actually remove the tuple but only sets its stop_date
   to current time.
-->
削除では実際にタプルの削除は行われず、そのstop_dateが現在時刻になります。
  </para>

  <para>
<!--
   To query for tuples <quote>valid now</quote>, include
   <literal>stop_date = 'infinity'</> in the query's WHERE condition.
   (You might wish to incorporate that in a view.)  Similarly, you can
   query for tuples valid at any past time with suitable conditions on
   start_date and stop_date.
-->
<quote>現在有効</quote>なタプルを問い合わせるには、問い合わせのWHERE条件に<literal>stop_date = 'infinity'</>を含めてください。
（これをビューに組み込もうと考えるかもしれません。）
同様に、start_dateとstop_dateに適切な条件を付けることで任意の時点で有効だったタプルを問い合わせることもできます。
  </para>

  <para>
<!--
   <function>timetravel()</> is the general trigger function that supports
   this behavior.  Create a <literal>BEFORE INSERT OR UPDATE OR DELETE</>
   trigger using this function on each time-traveled table. Specify two
   trigger arguments: the actual
   names of the start_date and stop_date columns.
   Optionally, you can specify one to three more arguments, which must refer
   to columns of type <type>text</>.  The trigger will store the name of
   the current user into the first of these columns during INSERT, the
   second column during UPDATE, and the third during DELETE.
-->
<function>timetravel()</>は、こうした動作をサポートする、一般的なトリガ関数です。
時間旅行を行うテーブル毎にこの関数を使用した<literal>BEFORE INSERT OR UPDATE OR DELETE</>トリガを作成してください。
2つのトリガ引数で、start_dateとstop_date列の実際の名前を指定してください。
省略可能ですが、1から3つの引数を追加して指定することもできます。
これらは<type>text</>型の列を参照しなければなりません。
トリガは現在のユーザ名を、INSERT時に最初の列、UPDATE時に2番目の列、DELETE時に3番目の列に格納します。
  </para>

  <para>
<!--
   <function>set_timetravel()</> allows you to turn time-travel on or off for
   a table.
   <literal>set_timetravel('mytab', 1)</> will turn TT ON for table <literal>mytab</>.
   <literal>set_timetravel('mytab', 0)</> will turn TT OFF for table <literal>mytab</>.
   In both cases the old status is reported.  While TT is off, you can modify
   the start_date and stop_date columns freely.  Note that the on/off status
   is local to the current database session &mdash; fresh sessions will
   always start out with TT ON for all tables.
-->
<function>set_timetravel()</>により、テーブル単位で時間旅行を有効または無効にすることができます。
<literal>set_timetravel('mytab', 1)</>は<literal>mytab</>テーブルの時間旅行を有効にします。
<literal>set_timetravel('mytab', 0)</>は<literal>mytab</>テーブルの時間旅行を無効にします。
時間旅行が無効な時、start_dateとstop_date列を自由に変更することができます。
有効状態は現在のデータベースセッション内で局所的な状態であることに注意してください。
新規セッションでは常に、すべてのテーブルの時間旅行は有効状態で始まります。
  </para>

  <para>
<!--
   <function>get_timetravel()</> returns the TT state for a table without
   changing it.
-->
<function>get_timetravel()</>は、状態変更を行うことなく、時間旅行の状態を返します。
  </para>

  <para>
<!--
   There is an example in <filename>timetravel.example</>.
-->
<filename>timetravel.example</>に例が存在します。
  </para>
 </sect2>

 <sect2>
<!--
  <title>autoinc &mdash; Functions for Autoincrementing Fields</title>
-->
  <title>autoinc &mdash; フィールド自動増分用の関数</title>

  <para>
<!--
   <function>autoinc()</> is a trigger that stores the next value of
   a sequence into an integer field.  This has some overlap with the
   built-in <quote>serial column</> feature, but it is not the same:
   <function>autoinc()</> will override attempts to substitute a
   different field value during inserts, and optionally it can be
   used to increment the field during updates, too.
-->
<function>autoinc()</>は、整数型フィールドにシーケンスの次の値を格納するトリガです。
これは、組み込みの<quote>連番列</>機能と一部重複しますが、同一ではありません。
<function>autoinc()</>は挿入時に別のフィールド値に置き換える試みを上書きし、さらに省略可能ですが、更新時にフィールドを増加させるために使用することもできます。
  </para>

  <para>
<!--
   To use, create a <literal>BEFORE INSERT</> (or optionally <literal>BEFORE
   INSERT OR UPDATE</>) trigger using this function.  Specify two
   trigger arguments: the name of the integer column to be modified,
   and the name of the sequence object that will supply values.
   (Actually, you can specify any number of pairs of such names, if
   you'd like to update more than one autoincrementing column.)
-->
使用方法は、この関数を使用する<literal>BEFORE INSERT</>（または <literal>BEFORE INSERT OR UPDATE</>）トリガを作成することです。
2つのトリガ引数、変更する整数型列の名前と値を生み出すシーケンスオブジェクトの名前を指定します。
（実際、自動増分列を複数更新したい場合、これらの名前の組み合わせを任意の数指定することができます。）
  </para>

  <para>
<!--
   There is an example in <filename>autoinc.example</>.
-->
<filename>autoinc.example</>に例があります。
  </para>

 </sect2>

 <sect2>
<!--
  <title>insert_username &mdash; Functions for Tracking Who Changed a Table</title>
-->
  <title>insert_username &mdash; 誰がテーブルを変更したかを追跡する関数</title>

  <para>
<!--
   <function>insert_username()</> is a trigger that stores the current
   user's name into a text field.  This can be useful for tracking
   who last modified a particular row within a table.
-->
<function>insert_username()</>は現在のユーザ名をテキスト型のフィールドに格納するトリガです。
これはテーブル内のある行を最後に変更したユーザを追跡する際に有用です。
  </para>

  <para>
<!--
   To use, create a <literal>BEFORE INSERT</> and/or <literal>UPDATE</>
   trigger using this function.  Specify a single trigger
   argument: the name of the text column to be modified.
-->
使用方法は、この関数を使用する<literal>BEFORE INSERT</>、<literal>UPDATE</>またはその両方のトリガを作成することです。
1つのトリガ引数、変更するテキスト型の列の名前を指定してください。
  </para>

  <para>
<!--
   There is an example in <filename>insert_username.example</>.
-->
<filename>insert_username.example</>に例があります。
  </para>

 </sect2>

 <sect2>
<!--
  <title>moddatetime &mdash; Functions for Tracking Last Modification Time</title>
-->
  <title>moddatetime &mdash; 最終更新時刻を追跡する関数</title>

  <para>
<!--
   <function>moddatetime()</> is a trigger that stores the current
   time into a <type>timestamp</> field.  This can be useful for tracking
   the last modification time of a particular row within a table.
-->
<function>moddatetime()</>は現在時刻を<type>timestamp</>型のフィールドに格納するトリガです。
これは、テーブル内のある行の最終更新時刻を追跡する際に有用です。
  </para>

  <para>
<!--
   To use, create a <literal>BEFORE UPDATE</>
   trigger using this function.  Specify a single trigger
   argument: the name of the column to be modified.
   The column must be of type <type>timestamp</> or <type>timestamp with
   time zone</>.
-->
使用方法は、この関数を使用する<literal>BEFORE UPDATE</>トリガを作成することです。
1つのトリガ引数、変更する列名を指定してください。
この列は<type>timestamp</>型または<type>timestamp with time zone</>型でなければなりません。
  </para>

  <para>
<!--
   There is an example in <filename>moddatetime.example</>.
-->
<filename>moddatetime.example</>に例があります。
  </para>

 </sect2>

</sect1>
