<!-- doc/src/sgml/citext.sgml -->

<sect1 id="citext" xreflabel="citext">
 <title>citext</title>

 <indexterm zone="citext">
  <primary>citext</primary>
 </indexterm>

 <para>
<<<<<<< HEAD
<!--
  The <filename>citext</> module provides a case-insensitive
  character string type, <type>citext</>. Essentially, it internally calls
  <function>lower</> when comparing values. Otherwise, it behaves almost
  exactly like <type>text</>.
-->
<filename>citext</>モジュールは、大文字小文字の区別がない文字列型を提供します。
これは値の比較の際、基本的に内部で<function>lower</>を呼び出します。
この他はほぼ<type>text</>と同様に動作します。
=======
  The <filename>citext</filename> module provides a case-insensitive
  character string type, <type>citext</type>. Essentially, it internally calls
  <function>lower</function> when comparing values. Otherwise, it behaves almost
  exactly like <type>text</type>.
>>>>>>> REL_11_0
 </para>

 <sect2>
<!--
  <title>Rationale</title>
-->
  <title>原理</title>

  <para>
<!--
   The standard approach to doing case-insensitive matches
   in <productname>PostgreSQL</productname> has been to use the <function>lower</function>
   function when comparing values, for example
-->
<productname>PostgreSQL</>において大文字小文字の区別のない比較を行う標準的な手法は、値を比べる際に以下のように<function>lower</>関数を使用することでした。例です。

<programlisting>
SELECT * FROM tab WHERE lower(col) = LOWER(?);
</programlisting>
  </para>

  <para>
<!--
   This works reasonably well, but has a number of drawbacks:
-->
これはまあまあ動作しますが、数多くの欠点があります。
  </para>

   <itemizedlist>
    <listitem>
     <para>
<!--
      It makes your SQL statements verbose, and you always have to remember to
<<<<<<< HEAD
      use <function>lower</> on both the column and the query value.
-->
作成するSQL文を冗長にします。
また常に列と問い合わせの値両方に<function>lower</>を使用することを忘れないようにしなければなりません。
=======
      use <function>lower</function> on both the column and the query value.
>>>>>>> REL_11_0
     </para>
    </listitem>
    <listitem>
     <para>
<!--
      It won't use an index, unless you create a functional index using
<<<<<<< HEAD
      <function>lower</>.
-->
<function>lower</>を使用して関数インデックスを作成していない限り、インデックスを使用しません。
=======
      <function>lower</function>.
>>>>>>> REL_11_0
     </para>
    </listitem>
    <listitem>
     <para>
<<<<<<< HEAD
<!--
      If you declare a column as <literal>UNIQUE</> or <literal>PRIMARY
      KEY</>, the implicitly generated index is case-sensitive.  So it's
=======
      If you declare a column as <literal>UNIQUE</literal> or <literal>PRIMARY
      KEY</literal>, the implicitly generated index is case-sensitive.  So it's
>>>>>>> REL_11_0
      useless for case-insensitive searches, and it won't enforce
      uniqueness case-insensitively.
-->
<literal>UNIQUE</>または<literal>PRIMARY KEY</>として列を宣言するのであれば、暗黙的に生成されるインデックスは大文字小文字を区別します。
このため、大文字小文字を区別しない検索では使えず、また、大文字小文字を区別しない一意性を強制させられません。
     </para>
    </listitem>
   </itemizedlist>

   <para>
<<<<<<< HEAD
<!--
    The <type>citext</> data type allows you to eliminate calls
    to <function>lower</> in SQL queries, and allows a primary key to
    be case-insensitive. <type>citext</> is locale-aware, just
    like <type>text</>, which means that the matching of upper case and
=======
    The <type>citext</type> data type allows you to eliminate calls
    to <function>lower</function> in SQL queries, and allows a primary key to
    be case-insensitive. <type>citext</type> is locale-aware, just
    like <type>text</type>, which means that the matching of upper case and
>>>>>>> REL_11_0
    lower case characters is dependent on the rules of
    the database's <literal>LC_CTYPE</literal> setting. Again, this behavior is
    identical to the use of <function>lower</function> in queries. But because it's
    done transparently by the data type, you don't have to remember to do
    anything special in your queries.
-->
<type>citext</>データ型によりSQL問い合わせ内の<function>lower</>呼び出しを省くことができます。
さらに、大文字小文字の区別がない主キーを実現できます。
<type>citext</>は<type>text</>と同様にロケールも考慮します。
つまり大文字と小文字のマッチングは、<literal>LC_CTYPE</>データベース設定の規則に依存します。
繰り返しますが、この動作は<function>lower</>を使用した問い合わせと同一です。
しかしこのデータ型により、ロケールの考慮は透過的に行われますので、問い合わせで特殊なことを行うことを覚えておく必要はありません。
   </para>

 </sect2>

 <sect2>
<!--
  <title>How to Use It</title>
-->
  <title>使用方法</title>

  <para>
<!--
   Here's a simple example of usage:
-->
簡単な例を示します。

<programlisting>
CREATE TABLE users (
    nick CITEXT PRIMARY KEY,
    pass TEXT   NOT NULL
);

INSERT INTO users VALUES ( 'larry',  sha256(random()::text::bytea) );
INSERT INTO users VALUES ( 'Tom',    sha256(random()::text::bytea) );
INSERT INTO users VALUES ( 'Damian', sha256(random()::text::bytea) );
INSERT INTO users VALUES ( 'NEAL',   sha256(random()::text::bytea) );
INSERT INTO users VALUES ( 'Bj&oslash;rn',  sha256(random()::text::bytea) );

SELECT * FROM users WHERE nick = 'Larry';
</programlisting>

<<<<<<< HEAD
<!--
   The <command>SELECT</> statement will return one tuple, even though
   the <structfield>nick</> column was set to <literal>larry</> and the query
   was for <literal>Larry</>.
-->
<command>SELECT</>文は、<structfield>nick</>列が<literal>larry</>に設定され、問い合わせが<literal>Larry</>に対してであっても、１つのタプルを返します。
=======
   The <command>SELECT</command> statement will return one tuple, even though
   the <structfield>nick</structfield> column was set to <literal>larry</literal> and the query
   was for <literal>Larry</literal>.
>>>>>>> REL_11_0
  </para>
 </sect2>

 <sect2>
<!--
  <title>String Comparison Behavior</title>
-->
  <title>文字列比較の動作</title>

  <para>
<<<<<<< HEAD
<!--
   <type>citext</> performs comparisons by converting each string to lower
   case (as though <function>lower</> were called) and then comparing the
   results normally.  Thus, for example, two strings are considered equal
   if <function>lower</> would produce identical results for them.
-->
<type>citext</>はそれぞれの文字列を（<function>lower</>が呼ばれますが）小文字に変換して結果を普通に比較します。
よって、例えば<function>lower</>で小文字にした場合に同じ結果となるような２つの文字列が等しいとみなされます。
=======
   <type>citext</type> performs comparisons by converting each string to lower
   case (as though <function>lower</function> were called) and then comparing the
   results normally.  Thus, for example, two strings are considered equal
   if <function>lower</function> would produce identical results for them.
>>>>>>> REL_11_0
  </para>

  <para>
<!--
   In order to emulate a case-insensitive collation as closely as possible,
   there are <type>citext</type>-specific versions of a number of string-processing
   operators and functions.  So, for example, the regular expression
   operators <literal>~</literal> and <literal>~*</literal> exhibit the same behavior when
   applied to <type>citext</type>: they both match case-insensitively.
   The same is true
<<<<<<< HEAD
   for <literal>!~</> and <literal>!~*</>, as well as for the
   <literal>LIKE</> operators <literal>~~</> and <literal>~~*</>, and
   <literal>!~~</> and <literal>!~~*</>. If you'd like to match
   case-sensitively, you can cast the operator's arguments to <type>text</>.
-->
大文字小文字の区別のない照合をできる限り正確にエミュレートするために、数多くの<type>citext</>独自版の各種文字列処理演算子と関数があります。
したがって、例えば正規表現演算子<literal>~</>および<literal>~*</>は、<type>citext</>に適用する時に同じ動作を提供します。
これら両方は大文字小文字を区別することなくマッチします。
<literal>!~</>や<literal>!~*</>だけではなく<literal>LIKE</>演算子、<literal>~~</>、<literal>~~*</>、<literal>!~~</>、<literal>!~~*</>でも同じことが言えます。
もし大文字小文字を区別して比較したい場合は、演算子の引数を<type>text</>にキャストすることができます。
=======
   for <literal>!~</literal> and <literal>!~*</literal>, as well as for the
   <literal>LIKE</literal> operators <literal>~~</literal> and <literal>~~*</literal>, and
   <literal>!~~</literal> and <literal>!~~*</literal>. If you'd like to match
   case-sensitively, you can cast the operator's arguments to <type>text</type>.
>>>>>>> REL_11_0
  </para>

  <para>
<!--
   Similarly, all of the following functions perform matching
<<<<<<< HEAD
   case-insensitively if their arguments are <type>citext</>:
-->
引数が<type>citext</>であれば、同様にして以下の関数は大文字小文字を区別しない一致を実行します。
=======
   case-insensitively if their arguments are <type>citext</type>:
>>>>>>> REL_11_0
  </para>

  <itemizedlist>
   <listitem>
    <para>
      <function>regexp_match()</function>
    </para>
   </listitem>
   <listitem>
    <para>
      <function>regexp_matches()</function>
    </para>
   </listitem>
   <listitem>
    <para>
      <function>regexp_replace()</function>
    </para>
   </listitem>
   <listitem>
    <para>
      <function>regexp_split_to_array()</function>
    </para>
   </listitem>
   <listitem>
    <para>
      <function>regexp_split_to_table()</function>
    </para>
   </listitem>
   <listitem>
    <para>
      <function>replace()</function>
    </para>
   </listitem>
   <listitem>
    <para>
      <function>split_part()</function>
    </para>
   </listitem>
   <listitem>
    <para>
      <function>strpos()</function>
    </para>
   </listitem>
   <listitem>
    <para>
      <function>translate()</function>
    </para>
   </listitem>
  </itemizedlist>

  <para>
<!--
   For the regexp functions, if you want to match case-sensitively, you can
   specify the <quote>c</quote> flag to force a case-sensitive match.  Otherwise,
   you must cast to <type>text</type> before using one of these functions if
   you want case-sensitive behavior.
-->
正規表現関数（RegExp関数）では、大文字小文字を区別して一致させたい場合<quote>c</>フラグを付けて、強制的に大文字小文字を区別して一致させることができます。
そうしないと、大文字小文字を区別させたい場合にはこれらの関数のいずれかを使用する前段階で<type>text</>にキャストしなければなりません。
  </para>

 </sect2>

 <sect2>
<!--
  <title>Limitations</title>
-->
  <title>制限</title>

   <itemizedlist>
    <listitem>
     <para>
<<<<<<< HEAD
<!--
      <type>citext</>'s case-folding behavior depends on
      the <literal>LC_CTYPE</> setting of your database. How it compares
=======
      <type>citext</type>'s case-folding behavior depends on
      the <literal>LC_CTYPE</literal> setting of your database. How it compares
>>>>>>> REL_11_0
      values is therefore determined when the database is created.
      It is not truly
      case-insensitive in the terms defined by the Unicode standard.
      Effectively, what this means is that, as long as you're happy with your
      collation, you should be happy with <type>citext</type>'s comparisons. But
      if you have data in different languages stored in your database, users
      of one language may find their query results are not as expected if the
      collation is for another language.
-->
<type>citext</>の大文字小文字を区別しない動作は使用するデータベースの<literal>LC_CTYPE</>に依存します。
どのように値を比較するかは、データベースが作成されたときに決定されます。
Unicode標準の定義という観点では、真に大文字小文字の区別がないわけではありません。
実質的に何を意味しているかというと、使用している照合が十分なものであれば、<type>citext</>による比較も十分なものになるはずです。
しかしデータベースに様々な言語でデータを格納している場合は、ある言語のユーザは照合が他の言語用のものであった場合想定外の問い合わせ結果を得るかもしれません。
     </para>
    </listitem>

    <listitem>
     <para>
<<<<<<< HEAD
<!--
      As of <productname>PostgreSQL</> 9.1, you can attach a
      <literal>COLLATE</> specification to <type>citext</> columns or data
      values.  Currently, <type>citext</> operators will honor a non-default
      <literal>COLLATE</> specification while comparing case-folded strings,
=======
      As of <productname>PostgreSQL</productname> 9.1, you can attach a
      <literal>COLLATE</literal> specification to <type>citext</type> columns or data
      values.  Currently, <type>citext</type> operators will honor a non-default
      <literal>COLLATE</literal> specification while comparing case-folded strings,
>>>>>>> REL_11_0
      but the initial folding to lower case is always done according to the
      database's <literal>LC_CTYPE</literal> setting (that is, as though
      <literal>COLLATE "default"</literal> were given).  This may be changed in a
      future release so that both steps follow the input <literal>COLLATE</literal>
      specification.
-->
<productname>PostgreSQL</> 9.1では、<literal>COLLATE</>指定を<type>citext</>列もしくはデータ値に付け加えることができます。
現状では、<type>citext</>演算子は大文字小文字を含んだ文字列を比較する際に、デフォルトではない<literal>COLLATE</>指定を重んじます。
しかし、最初の小文字変換はデータベースの<literal>LC_CTYPE</>設定にしたがって、常に実行されます（つまり、<literal>COLLATE "default"</>が指定されたようになります）
これは、両方のステップが入力された<literal>COLLATE</>指定に従うように、将来のリリースにおいて変更されるでしょう。
     </para>
    </listitem>

    <listitem>
     <para>
<<<<<<< HEAD
<!--
       <type>citext</> is not as efficient as <type>text</> because the
=======
       <type>citext</type> is not as efficient as <type>text</type> because the
>>>>>>> REL_11_0
       operator functions and the B-tree comparison functions must make copies
       of the data and convert it to lower case for comparisons. It is,
       however, slightly more efficient than using <function>lower</function> to get
       case-insensitive matching.
-->
演算子関数およびB-tree比較関数でデータの複製を作成しそれを比較のために小文字に変換しなければなりませんので、<type>citext</>は<type>text</>ほど効率的ではありません。
しかし大文字小文字の区別をしない一致をさせるために<function>lower</>を使用する場合よりかなり効率的です。
     </para>
    </listitem>

    <listitem>
     <para>
<<<<<<< HEAD
<!--
      <type>citext</> doesn't help much if you need data to compare
=======
      <type>citext</type> doesn't help much if you need data to compare
>>>>>>> REL_11_0
      case-sensitively in some contexts and case-insensitively in other
      contexts.  The standard answer is to use the <type>text</type> type and
      manually use the <function>lower</function> function when you need to compare
      case-insensitively; this works all right if case-insensitive comparison
      is needed only infrequently.  If you need case-insensitive behavior most
      of the time and case-sensitive infrequently, consider storing the data
      as <type>citext</type> and explicitly casting the column to <type>text</type>
      when you want case-sensitive comparison.  In either situation, you will
      need two indexes if you want both types of searches to be fast.
-->
<type>citext</>は、ある文脈では大文字小文字の区別を行い、またある文脈では大文字小文字の区別を行わない比較をする必要がある場合、あまり役に立ちません。
標準的な解法は<type>text</>型を使用し、大文字小文字を区別する比較が必要であれば手作業で<function>lower</>関数を使用することです。
これは大文字小文字を区別しない比較の必要性がまれであれば、問題なく動作します。
大文字小文字を区別しない比較がほとんどで、大文字小文字を区別する比較の必要性がまれである場合は、データを<type>citext</>として格納し、大文字小文字を区別する比較の際にその列を明示的に<type>text</>にキャストすることを検討してください。
どちらの場合でも、2種類の検索の両方を高速にするために２つのインデックスを作成しなければならないでしょう。
    </para>
    </listitem>

    <listitem>
     <para>
<<<<<<< HEAD
<!--
      The schema containing the <type>citext</> operators must be
      in the current <varname>search_path</> (typically <literal>public</>);
      if it is not, the normal case-sensitive <type>text</> operators
=======
      The schema containing the <type>citext</type> operators must be
      in the current <varname>search_path</varname> (typically <literal>public</literal>);
      if it is not, the normal case-sensitive <type>text</type> operators
>>>>>>> REL_11_0
      will be invoked instead.
-->
<type>citext</>演算子を含んだスキーマは、現在の<varname>search_path</>(典型的には<literal>public</>)に
存在しなければいけません。もし無い場合は通常の大文字小文字が区別される<type>text</>比較が代わりに呼び出されます。
    </para>
    </listitem>
   </itemizedlist>
 </sect2>

 <sect2>
<!--
  <title>Author</title>
-->
  <title>作者</title>

  <para>
   David E. Wheeler <email>david@kineticode.com</email>
  </para>

  <para>
<<<<<<< HEAD
<!--
    Inspired by the original <type>citext</> module by Donald Fraser.
-->
    Donald Fraserによる<type>citext</>モジュール原本からのヒント
=======
    Inspired by the original <type>citext</type> module by Donald Fraser.
>>>>>>> REL_11_0
  </para>

 </sect2>

</sect1>
