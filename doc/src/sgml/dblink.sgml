<!-- doc/src/sgml/dblink.sgml -->

<sect1 id="dblink" xreflabel="dblink">
 <title>dblink</title>

 <indexterm zone="dblink">
  <primary>dblink</primary>
 </indexterm>

 <para>
<!-- 
  <filename>dblink</> is a module that supports connections to
  other <productname>PostgreSQL</> databases from within a database
  session.
-->
<filename>dblink</>は、データベースセッション内から他の<productname>PostgreSQL</>データベースへの接続をサポートするモジュールです。
 </para>

 <para>
<!--
  See also <xref linkend="postgres-fdw">, which provides roughly the same
  functionality using a more modern and standards-compliant infrastructure.
-->
<xref linkend="postgres-fdw">も参照して下さい。より新しく標準に対する互換性の高い基盤を使ってほぼ同じ機能を提供しています。
 </para>

 <refentry id="CONTRIB-DBLINK-CONNECT">
  <indexterm>
   <primary>dblink_connect</primary>
  </indexterm>

  <refmeta>
   <refentrytitle>dblink_connect</refentrytitle>
   <manvolnum>3</manvolnum>
  </refmeta>

  <refnamediv>
   <refname>dblink_connect</refname>
<!--
   <refpurpose>opens a persistent connection to a remote database</refpurpose>
-->
   <refpurpose>リモートデータベースへの永続的な接続を開きます</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
<synopsis>
dblink_connect(text connstr) returns text
dblink_connect(text connname, text connstr) returns text
</synopsis>
  </refsynopsisdiv>

  <refsect1>
<!--
   <title>Description</title>
-->
   <title>説明</title>

   <para>
<!--
    <function>dblink_connect()</> establishes a connection to a remote
    <productname>PostgreSQL</> database.  The server and database to
    be contacted are identified through a standard <application>libpq</>
    connection string.  Optionally, a name can be assigned to the
    connection.  Multiple named connections can be open at once, but
    only one unnamed connection is permitted at a time.  The connection
    will persist until closed or until the database session is ended.
-->
<function>dblink_connect()</>はリモートの<productname>PostgreSQL</>データベースへの接続を確立します。
接続先のサーバとデータベースは標準の<application>libpq</>接続文字列を通して識別されます。
省略可能ですが、名前を接続に割り当てることも可能です。
複数の名前付きの接続を一度に開くことができますが、無名の接続は同時に1つしか許されません。
接続は、閉ざされるまで、または、データベースセッションが終わるまで永続します。
   </para>

   <para>
<!--
    The connection string may also be the name of an existing foreign
    server.  It is recommended to use the foreign-data wrapper
    <literal>dblink_fdw</literal> when defining the foreign
    server.  See the example below, as well as
    <xref linkend="sql-createserver"> and
    <xref linkend="sql-createusermapping">.
-->
接続文字列は同時に既存の外部サーバ名であっても構いません。
外部サーバを定義する場合、外部データラッパー<literal>dblink_fdw</literal>を使用することを推奨します。
後述の例と<xref linkend="sql-createserver">、<xref linkend="sql-createusermapping">を参照してください。
   </para>

  </refsect1>

  <refsect1>
<!--
   <title>Arguments</title>
-->
   <title>引数</title>

   <variablelist>
    <varlistentry>
     <term><parameter>conname</parameter></term>
     <listitem>
      <para>
<!--
       The name to use for this connection; if omitted, an unnamed
       connection is opened, replacing any existing unnamed connection.
-->
接続に使用する名前です。省略した場合、既存の無名の接続を閉ざし、無名の接続を開きます。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>connstr</parameter></term>
     <listitem>
<!--
      <para><application>libpq</>-style connection info string, for example
       <literal>hostaddr=127.0.0.1 port=5432 dbname=mydb user=postgres
       password=mypasswd</>.
       For details see <xref linkend="libpq-connstring">.
       Alternatively, the name of a foreign server.
-->
      <para>
例えば<literal>hostaddr=127.0.0.1 port=5432 dbname=mydb user=postgres  password=mypasswd</>といった<application>libpq</>形式の接続情報文字列です。
詳細は<xref linkend="libpq-connstring">を参照してください。
もしくは外部サーバ名です。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
<!--
   <title>Return Value</title>
-->
   <title>戻り値</title>

   <para>
<!--
    Returns status, which is always <literal>OK</> (since any error
    causes the function to throw an error instead of returning).
-->
状態を返します。
これは常に<literal>OK</>です（何らかのエラーが起きるとこの関数は戻らずエラーとなるためです）。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Notes</title>
-->
   <title>注釈</title>

   <para>
<!--
    Only superusers may use <function>dblink_connect</> to create
    non-password-authenticated connections.  If non-superusers need this
    capability, use <function>dblink_connect_u</> instead.
-->
スーパーユーザのみがパスワード認証がない接続を作成するために<function>dblink_connect</>を使用することができます。
スーパーユーザ以外でこの機能が必要ならば<function>dblink_connect_u</>を代わりに使用してください。
   </para>

   <para>
<!--
    It is unwise to choose connection names that contain equal signs,
    as this opens a risk of confusion with connection info strings
    in other <filename>dblink</> functions.
-->
他の<filename>dblink</>関数内で接続情報文字列が混乱する危険が発生しますので、等号記号を含む接続名を選択することは勧めません。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Examples</title>
-->
   <title>例</title>

<screen>
SELECT dblink_connect('dbname=postgres');
 dblink_connect
----------------
 OK
(1 row)

SELECT dblink_connect('myconn', 'dbname=postgres');
 dblink_connect
----------------
 OK
(1 row)

<!--
&#045;&#045; FOREIGN DATA WRAPPER functionality
&#045;&#045; Note: local connection must require password authentication for this to work properly
&#045;&#045;       Otherwise, you will receive the following error from dblink_connect():
-->
-- 外部データラッパー（FOREIGN DATA WRAPPER）の機能
-- 注意：これが正常に機能するにはローカル接続にパスワード認証が必須です。
--       さもないと、dblink_connect():から以下のエラーを受け取ります。
--       ----------------------------------------------------------------------
--       ERROR:  password is required
--       DETAIL:  Non-superuser cannot connect if the server does not request a password.
--       HINT:  Target server's authentication method must be changed.

CREATE SERVER fdtest FOREIGN DATA WRAPPER dblink_fdw OPTIONS (hostaddr '127.0.0.1', dbname 'contrib_regression');

CREATE USER dblink_regression_test WITH PASSWORD 'secret';
CREATE USER MAPPING FOR dblink_regression_test SERVER fdtest OPTIONS (user 'dblink_regression_test', password 'secret');
GRANT USAGE ON FOREIGN SERVER fdtest TO dblink_regression_test;
GRANT SELECT ON TABLE foo TO dblink_regression_test;

\set ORIGINAL_USER :USER
\c - dblink_regression_test
SELECT dblink_connect('myconn', 'fdtest');
 dblink_connect 
----------------
 OK
(1 row)

SELECT * FROM dblink('myconn','SELECT * FROM foo') AS t(a int, b text, c text[]);
 a  | b |       c       
----+---+---------------
  0 | a | {a0,b0,c0}
  1 | b | {a1,b1,c1}
  2 | c | {a2,b2,c2}
  3 | d | {a3,b3,c3}
  4 | e | {a4,b4,c4}
  5 | f | {a5,b5,c5}
  6 | g | {a6,b6,c6}
  7 | h | {a7,b7,c7}
  8 | i | {a8,b8,c8}
  9 | j | {a9,b9,c9}
 10 | k | {a10,b10,c10}
(11 rows)

\c - :ORIGINAL_USER
REVOKE USAGE ON FOREIGN SERVER fdtest FROM dblink_regression_test;
REVOKE SELECT ON TABLE foo FROM dblink_regression_test;
DROP USER MAPPING FOR dblink_regression_test SERVER fdtest;
DROP USER dblink_regression_test;
DROP SERVER fdtest;
</screen>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-CONNECT-U">
  <indexterm>
   <primary>dblink_connect_u</primary>
  </indexterm>

  <refmeta>
   <refentrytitle>dblink_connect_u</refentrytitle>
   <manvolnum>3</manvolnum>
  </refmeta>

  <refnamediv>
   <refname>dblink_connect_u</refname>
<!--
   <refpurpose>opens a persistent connection to a remote database, insecurely</refpurpose>
-->
   <refpurpose>リモートデータベースへの永続的な危険な接続を開きます</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
<synopsis>
dblink_connect_u(text connstr) returns text
dblink_connect_u(text connname, text connstr) returns text
</synopsis>
  </refsynopsisdiv>

  <refsect1>
<!--
   <title>Description</title>
-->
   <title>説明</title>

   <para>
<!--
    <function>dblink_connect_u()</> is identical to
    <function>dblink_connect()</>, except that it will allow non-superusers
    to connect using any authentication method.
-->
<function>dblink_connect_u()</>は、非スーパーユーザが任意の認証方式を使用して接続することができる点を除き、<function>dblink_connect()</>と同じです。
   </para>

   <para>
<!--
    If the remote server selects an authentication method that does not
    involve a password, then impersonation and subsequent escalation of
    privileges can occur, because the session will appear to have
    originated from the user as which the local <productname>PostgreSQL</>
    server runs.  Also, even if the remote server does demand a password,
    it is possible for the password to be supplied from the server
    environment, such as a <filename>~/.pgpass</> file belonging to the
    server's user.  This opens not only a risk of impersonation, but the
    possibility of exposing a password to an untrustworthy remote server.
    Therefore, <function>dblink_connect_u()</> is initially
    installed with all privileges revoked from <literal>PUBLIC</>,
    making it un-callable except by superusers.  In some situations
    it may be appropriate to grant <literal>EXECUTE</> permission for
    <function>dblink_connect_u()</> to specific users who are considered
    trustworthy, but this should be done with care.  It is also recommended
    that any <filename>~/.pgpass</> file belonging to the server's user
    <emphasis>not</> contain any records specifying a wildcard host name.
-->
リモートサーバがパスワードを含まない認証方式を選択していた場合、セッションがローカルな<productname>PostgreSQL</>サーバを実行するユーザから構成されたものとなりますので、なりすましやその後の権限昇格が起こり得ます。
また、リモートサーバがパスワードを要求したとしても、サーバ側のユーザに属する<filename>~/.pgpass</>ファイルなどサーバの環境から提供されるパスワードになる可能性があります。
これはなりすましの危険性だけでなく、信頼できないリモートサーバへのパスワードが漏れる可能性を引き起こします。
このため<function>dblink_connect_u()</>はまず、スーパーユーザ以外から呼び出すことができないように、<literal>PUBLIC</>からすべての権限を取り除いた形でインストールされます。
状況によっては、信頼できるとみなされた特定のユーザに<function>dblink_connect_u()</>の<literal>EXECUTE</>権限を与えることが適切となる場合があります。
しかしこれは注意して行わなければなりません。
また、サーバのユーザに属する<filename>~/.pgpass</>ファイルにはすべて、ホスト名としてワイルドカードを指定した項目をまったく<emphasis>含めない</>ことを推奨します。
   </para>

   <para>
<!--
    For further details see <function>dblink_connect()</>.
-->
この他の情報は<function>dblink_connect()</>を参照してください。
   </para>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-DISCONNECT">
  <indexterm>
   <primary>dblink_disconnect</primary>
  </indexterm>

  <refmeta>
   <refentrytitle>dblink_disconnect</refentrytitle>
   <manvolnum>3</manvolnum>
  </refmeta>

  <refnamediv>
   <refname>dblink_disconnect</refname>
<!--
   <refpurpose>closes a persistent connection to a remote database</refpurpose>
-->
   <refpurpose>リモートデータベースへの永続的な接続を閉ざします</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
<synopsis>
dblink_disconnect() returns text
dblink_disconnect(text connname) returns text
</synopsis>
  </refsynopsisdiv>

  <refsect1>
<!--
   <title>Description</title>
-->
   <title>説明</title>

   <para>
<!--
    <function>dblink_disconnect()</> closes a connection previously opened
    by <function>dblink_connect()</>.  The form with no arguments closes
    an unnamed connection.
-->
<function>dblink_disconnect()</>は<function>dblink_connect()</>で開かれた既存の接続を閉ざします。
引数がない構文では無名の接続を閉ざします。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Arguments</title>
-->
   <title>引数</title>

   <variablelist>
    <varlistentry>
     <term><parameter>conname</parameter></term>
     <listitem>
      <para>
<!--
       The name of a named connection to be closed.
-->
閉ざす名前付き接続の名前です。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
<!--
   <title>Return Value</title>
-->
   <title>戻り値</title>

   <para>
<!--
    Returns status, which is always <literal>OK</> (since any error
    causes the function to throw an error instead of returning).
-->
状態を返します。
これは常に<literal>OK</>です（何らかのエラーが起きるとこの関数は戻らずエラーとなるためです）。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Examples</title>
-->
   <title>例</title>

<screen>
SELECT dblink_disconnect();
 dblink_disconnect
-------------------
 OK
(1 row)

SELECT dblink_disconnect('myconn');
 dblink_disconnect
-------------------
 OK
(1 row)
</screen>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-FUNCTION">
  <indexterm>
   <primary>dblink</primary>
  </indexterm>

  <refmeta>
   <refentrytitle>dblink</refentrytitle>
   <manvolnum>3</manvolnum>
  </refmeta>

  <refnamediv>
   <refname>dblink</refname>
<!--
   <refpurpose>executes a query in a remote database</refpurpose>
-->
   <refpurpose>リモートデータベースで問い合わせを実行します</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
<synopsis>
dblink(text connname, text sql [, bool fail_on_error]) returns setof record
dblink(text connstr, text sql [, bool fail_on_error]) returns setof record
dblink(text sql [, bool fail_on_error]) returns setof record
</synopsis>
  </refsynopsisdiv>

  <refsect1>
<!--
   <title>Description</title>
-->
   <title>説明</title>

   <para>
<!--
    <function>dblink</> executes a query (usually a <command>SELECT</>,
    but it can be any SQL statement that returns rows) in a remote database.
-->
<function>dblink</>はリモートデータベースで問い合わせ（通常は<command>SELECT</>ですが行を返す任意のSQLコマンドを行うことができます）を実行します。
   </para>

   <para>
<!--
    When two <type>text</> arguments are given, the first one is first
    looked up as a persistent connection's name; if found, the command
    is executed on that connection.  If not found, the first argument
    is treated as a connection info string as for <function>dblink_connect</>,
    and the indicated connection is made just for the duration of this command.
-->
2つの<type>text</>型の引数が与えられた場合、一番目の引数はまず永続接続の名前を検索するために使われます。
もし見つかれば、コマンドがその接続上で実行されます。
見つからなければ、一番目の引数は<function>dblink_connect</>用の接続情報文字列として扱われ、このコマンド実行時と同様に指定された接続が開きます。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Arguments</title>
-->
   <title>引数</title>

   <variablelist>
    <varlistentry>
     <term><parameter>conname</parameter></term>
     <listitem>
      <para>
<!--
       Name of the connection to use; omit this parameter to use the
       unnamed connection.
-->
使用する接続の名前です。
無名の接続を使用する場合はこのパラメータを省略します。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>connstr</parameter></term>
     <listitem>
      <para>
<!--
       A connection info string, as previously described for
       <function>dblink_connect</>.
-->
上で<function>dblink_connect</>で説明した接続情報文字列です。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>sql</parameter></term>
     <listitem>
      <para>
<!--
       The SQL query that you wish to execute in the remote database,
       for example <literal>select * from foo</>.
-->
例えば<literal>select * from foo</>といった、リモートデータベースで実行させるSQL問い合わせです。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>fail_on_error</parameter></term>
     <listitem>
      <para>
<!--
       If true (the default when omitted) then an error thrown on the
       remote side of the connection causes an error to also be thrown
       locally. If false, the remote error is locally reported as a NOTICE,
       and the function returns no rows.
-->
真（省略時のデフォルト）の場合、接続のリモート側で発生したエラーによりローカル側でもエラーが発生します。
偽の場合リモート側のエラーはローカル側にはNOTICEとして報告され、この関数は行を返しません。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
<!--
   <title>Return Value</title>
-->
   <title>戻り値</title>

   <para>
<!--
    The function returns the row(s) produced by the query.  Since
    <function>dblink</> can be used with any query, it is declared
    to return <type>record</>, rather than specifying any particular
    set of columns.  This means that you must specify the expected
    set of columns in the calling query &mdash; otherwise
    <productname>PostgreSQL</> would not know what to expect.
    Here is an example:
-->
この関数は問い合わせにより生成された行を返します。
<function>dblink</>は任意の問い合わせで使用することができますので、これは特定の列集合を指定するのではなく、<type>record</>型を返すものと宣言されています。
これは呼び出し元の問い合わせで想定列集合を指定しなければならないことを意味します。
さもないと<productname>PostgreSQL</>は何が想定されているかわかりません。
以下に例を示します。

<programlisting>
SELECT *
    FROM dblink('dbname=mydb', 'select proname, prosrc from pg_proc')
      AS t1(proname name, prosrc text)
    WHERE proname LIKE 'bytea%';
</programlisting>

<!--
    The <quote>alias</> part of the <literal>FROM</> clause must
    specify the column names and types that the function will return.
    (Specifying column names in an alias is actually standard SQL
    syntax, but specifying column types is a <productname>PostgreSQL</>
    extension.)  This allows the system to understand what
    <literal>*</> should expand to, and what <structname>proname</>
    in the <literal>WHERE</> clause refers to, in advance of trying
    to execute the function.  At run time, an error will be thrown
    if the actual query result from the remote database does not
    have the same number of columns shown in the <literal>FROM</> clause.
    The column names need not match, however, and <function>dblink</>
    does not insist on exact type matches either.  It will succeed
    so long as the returned data strings are valid input for the
    column type declared in the <literal>FROM</> clause.
-->
<literal>FROM</>句の<quote>別名</>部分は関数が返す列名とその型を指定しなければなりません。
（別名内の列名の指定はSQL標準の構文ですが、列の型の指定は<productname>PostgreSQL</>の拡張です。）
これによりシステムは、関数を実行する前に、<literal>*</>がどのように展開されるか、<literal>WHERE</>句内の<structname>proname</>が何を参照するかを理解します。
実行時、リモートデータベースから返る実際の問い合わせの結果が<literal>FROM</>句で示された列数と異なる場合エラーが発生します。
しかし、列名は一致する必要はありません。
また、<function>dblink</>は正確な型一致も強制しません。
返されるデータ文字列が<literal>FROM</>句で宣言された列型の有効な入力である限り成功します。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Notes</title>
-->
   <title>注釈</title>

   <para>
<!--
    A convenient way to use <function>dblink</> with predetermined
    queries is to create a view.
    This allows the column type information to be buried in the view,
    instead of having to spell it out in every query.  For example,
-->
前もって判明している問い合わせを<function>dblink</>で使用する簡便な方法はビューを作成することです。
これにより問い合わせの度に列型の情報を記載することなく、ビュー内に隠すことができます。
以下に例を示します。

<programlisting>
CREATE VIEW myremote_pg_proc AS
  SELECT *
    FROM dblink('dbname=postgres', 'select proname, prosrc from pg_proc')
    AS t1(proname name, prosrc text);

SELECT * FROM myremote_pg_proc WHERE proname LIKE 'bytea%';
</programlisting></para>
  </refsect1>

  <refsect1>
<!--
   <title>Examples</title>
-->
   <title>例</title>

<screen>
SELECT * FROM dblink('dbname=postgres', 'select proname, prosrc from pg_proc')
  AS t1(proname name, prosrc text) WHERE proname LIKE 'bytea%';
  proname   |   prosrc
------------+------------
 byteacat   | byteacat
 byteaeq    | byteaeq
 bytealt    | bytealt
 byteale    | byteale
 byteagt    | byteagt
 byteage    | byteage
 byteane    | byteane
 byteacmp   | byteacmp
 bytealike  | bytealike
 byteanlike | byteanlike
 byteain    | byteain
 byteaout   | byteaout
(12 rows)

SELECT dblink_connect('dbname=postgres');
 dblink_connect
----------------
 OK
(1 row)

SELECT * FROM dblink('select proname, prosrc from pg_proc')
  AS t1(proname name, prosrc text) WHERE proname LIKE 'bytea%';
  proname   |   prosrc
------------+------------
 byteacat   | byteacat
 byteaeq    | byteaeq
 bytealt    | bytealt
 byteale    | byteale
 byteagt    | byteagt
 byteage    | byteage
 byteane    | byteane
 byteacmp   | byteacmp
 bytealike  | bytealike
 byteanlike | byteanlike
 byteain    | byteain
 byteaout   | byteaout
(12 rows)

SELECT dblink_connect('myconn', 'dbname=regression');
 dblink_connect
----------------
 OK
(1 row)

SELECT * FROM dblink('myconn', 'select proname, prosrc from pg_proc')
  AS t1(proname name, prosrc text) WHERE proname LIKE 'bytea%';
  proname   |   prosrc
------------+------------
 bytearecv  | bytearecv
 byteasend  | byteasend
 byteale    | byteale
 byteagt    | byteagt
 byteage    | byteage
 byteane    | byteane
 byteacmp   | byteacmp
 bytealike  | bytealike
 byteanlike | byteanlike
 byteacat   | byteacat
 byteaeq    | byteaeq
 bytealt    | bytealt
 byteain    | byteain
 byteaout   | byteaout
(14 rows)
</screen>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-EXEC">
  <indexterm>
   <primary>dblink_exec</primary>
  </indexterm>

  <refmeta>
   <refentrytitle>dblink_exec</refentrytitle>
   <manvolnum>3</manvolnum>
  </refmeta>

  <refnamediv>
   <refname>dblink_exec</refname>
<!--
   <refpurpose>executes a command in a remote database</refpurpose>
-->
   <refpurpose>リモートデータベースでコマンドを実行します</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
<synopsis>
dblink_exec(text connname, text sql [, bool fail_on_error]) returns text
dblink_exec(text connstr, text sql [, bool fail_on_error]) returns text
dblink_exec(text sql [, bool fail_on_error]) returns text
</synopsis>
  </refsynopsisdiv>

  <refsect1>
<!--
   <title>Description</title>
-->
   <title>説明</title>

   <para>
<!--
    <function>dblink_exec</> executes a command (that is, any SQL statement
    that doesn't return rows) in a remote database.
-->
<function>dblink_exec</>はリモートデータベースでコマンド（つまり行を返さない任意のSQL文）を実行します。
   </para>

   <para>
<!--
    When two <type>text</> arguments are given, the first one is first
    looked up as a persistent connection's name; if found, the command
    is executed on that connection.  If not found, the first argument
    is treated as a connection info string as for <function>dblink_connect</>,
    and the indicated connection is made just for the duration of this command.
-->
2つの<type>text</>型の引数が与えられた場合、一番目の引数はまず永続接続の名前を検索するために使われます。
もし見つかれば、コマンドがその接続上で実行されます。
見つからなければ、一番目の引数は<function>dblink_connect</>用の接続情報文字列として扱われ、このコマンド実行時と同様に指定された接続が開きます。
   </para>
  </refsect1>

  <refsect1>
<!-- 
   <title>Arguments</title>
-->
   <title>引数</title>

   <variablelist>
    <varlistentry>
     <term><parameter>conname</parameter></term>
     <listitem>
      <para>
<!--
       Name of the connection to use; omit this parameter to use the
       unnamed connection.
-->
使用する接続の名前です。
無名の接続を使用する場合はこのパラメータを省略します。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>connstr</parameter></term>
     <listitem>
      <para>
<!--
       A connection info string, as previously described for
       <function>dblink_connect</>.
-->
上で<function>dblink_connect</>で説明した接続情報文字列です。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>sql</parameter></term>
     <listitem>
      <para>
<!--
       The SQL command that you wish to execute in the remote database,
       for example
       <literal>insert into foo values(0,'a','{"a0","b0","c0"}')</>.
-->
例えば<literal>insert into foo values(0,'a','{"a0","b0","c0"}')</>といった、リモートデータベースで実行させるSQL問い合わせです。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>fail_on_error</parameter></term>
     <listitem>
      <para>
<!--
       If true (the default when omitted) then an error thrown on the
       remote side of the connection causes an error to also be thrown
       locally. If false, the remote error is locally reported as a NOTICE,
       and the function's return value is set to <literal>ERROR</>.
-->
真（省略時のデフォルト）の場合、接続のリモート側で発生したエラーによりローカル側でもエラーが発生します。
偽の場合リモート側のエラーはローカル側にはNOTICEとして報告され、この関数の戻り値は<literal>ERROR</>になります。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
<!--
   <title>Return Value</title>
-->
   <title>戻り値</title>

   <para>
<!--
    Returns status, either the command's status string or <literal>ERROR</>.
-->
状態、つまりコマンドの状態または<literal>ERROR</>を返します。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Examples</title>
-->
   <title>例</title>

<screen>
SELECT dblink_connect('dbname=dblink_test_standby');
 dblink_connect
----------------
 OK
(1 row)

SELECT dblink_exec('insert into foo values(21,''z'',''{"a0","b0","c0"}'');');
   dblink_exec
-----------------
 INSERT 943366 1
(1 row)

SELECT dblink_connect('myconn', 'dbname=regression');
 dblink_connect
----------------
 OK
(1 row)

SELECT dblink_exec('myconn', 'insert into foo values(21,''z'',''{"a0","b0","c0"}'');');
   dblink_exec
------------------
 INSERT 6432584 1
(1 row)

SELECT dblink_exec('myconn', 'insert into pg_class values (''foo'')',false);
NOTICE:  sql error
DETAIL:  ERROR:  null value in column "relnamespace" violates not-null constraint

 dblink_exec
-------------
 ERROR
(1 row)
</screen>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-OPEN">
  <indexterm>
   <primary>dblink_open</primary>
  </indexterm>

  <refmeta>
   <refentrytitle>dblink_open</refentrytitle>
   <manvolnum>3</manvolnum>
  </refmeta>

  <refnamediv>
   <refname>dblink_open</refname>
<!--
   <refpurpose>opens a cursor in a remote database</refpurpose>
-->
   <refpurpose>リモートデータベースでカーソルを開きます</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
<synopsis>
dblink_open(text cursorname, text sql [, bool fail_on_error]) returns text
dblink_open(text connname, text cursorname, text sql [, bool fail_on_error]) returns text
</synopsis>
  </refsynopsisdiv>

  <refsect1>
<!--
   <title>Description</title>
-->
   <title>説明</title>

   <para>
<!--
    <function>dblink_open()</> opens a cursor in a remote database.
    The cursor can subsequently be manipulated with
    <function>dblink_fetch()</> and <function>dblink_close()</>.
-->
<function>dblink_open()</>はリモートデータベースでカーソルを開きます。
その後カーソルを<function>dblink_fetch()</>と<function>dblink_close()</>で操作することができます。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Arguments</title>
-->
   <title>引数</title>

   <variablelist>
    <varlistentry>
     <term><parameter>conname</parameter></term>
     <listitem>
      <para>
<!--
       Name of the connection to use; omit this parameter to use the
       unnamed connection.
-->
使用する接続の名前です。
無名の接続を使用する場合はこのパラメータを省略します。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>cursorname</parameter></term>
     <listitem>
      <para>
<!--
       The name to assign to this cursor.
-->
このカーソルに割り当てる名前です。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>sql</parameter></term>
     <listitem>
      <para>
<!--
       The <command>SELECT</> statement that you wish to execute in the remote
       database, for example <literal>select * from pg_class</>.
-->
例えば<literal>select * from pg_class</>といった、リモートデータベースで実行させたい<command>SELECT</>文です。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>fail_on_error</parameter></term>
     <listitem>
      <para>
<!--
       If true (the default when omitted) then an error thrown on the
       remote side of the connection causes an error to also be thrown
       locally. If false, the remote error is locally reported as a NOTICE,
       and the function's return value is set to <literal>ERROR</>.
-->
真（省略時のデフォルト）の場合、接続のリモート側で発生したエラーによりローカル側でもエラーが発生します。
偽の場合リモート側のエラーはローカル側にはNOTICEとして報告され、この関数の戻り値は<literal>ERROR</>になります。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
<!--
   <title>Return Value</title>
-->
   <title>戻り値</title>

   <para>
<!--
    Returns status, either <literal>OK</> or <literal>ERROR</>.
-->
状態、つまり<literal>OK</>または<literal>ERROR</>を返します。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Notes</title>
-->
   <title>注釈</title>

   <para>
<!--
    Since a cursor can only persist within a transaction,
    <function>dblink_open</> starts an explicit transaction block
    (<command>BEGIN</>) on the remote side, if the remote side was
    not already within a transaction.  This transaction will be
    closed again when the matching <function>dblink_close</> is
    executed.  Note that if
    you use <function>dblink_exec</> to change data between
    <function>dblink_open</> and <function>dblink_close</>,
    and then an error occurs or you use <function>dblink_disconnect</> before
    <function>dblink_close</>, your change <emphasis>will be
    lost</> because the transaction will be aborted.
-->
カーソルはトランザクション内でのみ持続することができますので、リモート側がまだトランザクションの内部でない場合、<function>dblink_open</>はリモート側で明示的なトランザクションブロックを開始（<command>BEGIN</>）します。
このトランザクションは対応する<function>dblink_close</>が実行された時に同様に閉ざされます。
<function>dblink_open</>と<function>dblink_close</>の間に<function>dblink_exec</>を使用してデータを変更した場合、エラーが発生することに注意してください。
また、<function>dblink_close</>の前に<function>dblink_disconnect</>を使用すると、トランザクションがアボートしますので変更が<emphasis>失われる</>ことに注意してください。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Examples</title>
-->
   <title>例</title>

<screen>
SELECT dblink_connect('dbname=postgres');
 dblink_connect
----------------
 OK
(1 row)

SELECT dblink_open('foo', 'select proname, prosrc from pg_proc');
 dblink_open
-------------
 OK
(1 row)
</screen>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-FETCH">
  <indexterm>
   <primary>dblink_fetch</primary>
  </indexterm>

  <refmeta>
   <refentrytitle>dblink_fetch</refentrytitle>
   <manvolnum>3</manvolnum>
  </refmeta>

  <refnamediv>
   <refname>dblink_fetch</refname>
<!--
   <refpurpose>returns rows from an open cursor in a remote database</refpurpose>
-->
   <refpurpose>リモートデータベースで開いているカーソルから行を取り出します</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
<synopsis>
dblink_fetch(text cursorname, int howmany [, bool fail_on_error]) returns setof record
dblink_fetch(text connname, text cursorname, int howmany [, bool fail_on_error]) returns setof record
</synopsis>
  </refsynopsisdiv>

  <refsect1>
<!--
   <title>Description</title>
-->
   <title>説明</title>

   <para>
<!--
    <function>dblink_fetch</> fetches rows from a cursor previously
    established by <function>dblink_open</>.
-->
<function>dblink_fetch</>は<function>dblink_open</>によりあらかじめ確立したカーソルから行を取り出します。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Arguments</title>
-->
   <title>引数</title>

   <variablelist>
    <varlistentry>
     <term><parameter>conname</parameter></term>
     <listitem>
      <para>
<!--
       Name of the connection to use; omit this parameter to use the
       unnamed connection.
-->
使用する接続の名前です。
無名の接続を使用する場合はこのパラメータを省略します。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>cursorname</parameter></term>
     <listitem>
      <para>
<!--
       The name of the cursor to fetch from.
-->
行を取り出すカーソルの名前です。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>howmany</parameter></term>
     <listitem>
      <para>
<!--
       The maximum number of rows to retrieve. The next <parameter>howmany</>
       rows are fetched, starting at the current cursor position, moving
       forward. Once the cursor has reached its end, no more rows are produced.
-->
受け取る行の最大数です。
カーソルの現在位置から次の<parameter>howmany</>行を取り出し、カーソルの位置を前方に移動します。
カーソルが終端まで達すると、これ以上の行は生成されません。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>fail_on_error</parameter></term>
     <listitem>
      <para>
<!--
       If true (the default when omitted) then an error thrown on the
       remote side of the connection causes an error to also be thrown
       locally. If false, the remote error is locally reported as a NOTICE,
       and the function returns no rows.
-->
真（省略時のデフォルト）の場合、接続のリモート側で発生したエラーによりローカル側でもエラーが発生します。
偽の場合リモート側のエラーはローカル側にはNOTICEとして報告され、この関数は行を返しません。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
<!--
   <title>Return Value</title>
-->
   <title>戻り値</title>

   <para>
<!--
    The function returns the row(s) fetched from the cursor.  To use this
    function, you will need to specify the expected set of columns,
    as previously discussed for <function>dblink</>.
-->
この関数はカーソルから取り出された行を返します。
この関数を使用するためには、<function>dblink</>で説明したように、想定する列集合を指定する必要があります。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Notes</title>
-->
   <title>注釈</title>

   <para>
<!-- 
    On a mismatch between the number of return columns specified in the
    <literal>FROM</> clause, and the actual number of columns returned by the
    remote cursor, an error will be thrown. In this event, the remote cursor
    is still advanced by as many rows as it would have been if the error had
    not occurred.  The same is true for any other error occurring in the local
    query after the remote <command>FETCH</> has been done.
-->
リモートカーソルから返る実際の列数と<literal>FROM</>句で指定された列数と異なる場合エラーが発生します。
この場合リモート側のカーソルは、エラーが発生しなかった場合と同じ行数分位置が変わります。
リモート側の<command>FETCH</>が完了した後にローカル側でこの他のエラーが発生した場合も同じです。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Examples</title>
-->
   <title>例</title>

<screen>
SELECT dblink_connect('dbname=postgres');
 dblink_connect
----------------
 OK
(1 row)

SELECT dblink_open('foo', 'select proname, prosrc from pg_proc where proname like ''bytea%''');
 dblink_open
-------------
 OK
(1 row)

SELECT * FROM dblink_fetch('foo', 5) AS (funcname name, source text);
 funcname |  source
----------+----------
 byteacat | byteacat
 byteacmp | byteacmp
 byteaeq  | byteaeq
 byteage  | byteage
 byteagt  | byteagt
(5 rows)

SELECT * FROM dblink_fetch('foo', 5) AS (funcname name, source text);
 funcname  |  source
-----------+-----------
 byteain   | byteain
 byteale   | byteale
 bytealike | bytealike
 bytealt   | bytealt
 byteane   | byteane
(5 rows)

SELECT * FROM dblink_fetch('foo', 5) AS (funcname name, source text);
  funcname  |   source
------------+------------
 byteanlike | byteanlike
 byteaout   | byteaout
(2 rows)

SELECT * FROM dblink_fetch('foo', 5) AS (funcname name, source text);
 funcname | source
----------+--------
(0 rows)
</screen>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-CLOSE">
  <indexterm>
   <primary>dblink_close</primary>
  </indexterm>

  <refmeta>
   <refentrytitle>dblink_close</refentrytitle>
   <manvolnum>3</manvolnum>
  </refmeta>

  <refnamediv>
   <refname>dblink_close</refname>
<!-- 
   <refpurpose>closes a cursor in a remote database</refpurpose>
-->
   <refpurpose>リモートデータベースでカーソルを閉ざします</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
<synopsis>
dblink_close(text cursorname [, bool fail_on_error]) returns text
dblink_close(text connname, text cursorname [, bool fail_on_error]) returns text
</synopsis>
  </refsynopsisdiv>

  <refsect1>
<!--
   <title>Description</title>
-->
   <title>説明</title>

   <para>
<!--
    <function>dblink_close</> closes a cursor previously opened with
    <function>dblink_open</>.
-->
<function>dblink_close</>は前もって<function>dblink_open</>で開かれたカーソルを閉ざします。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Arguments</title>
-->
   <title>引数</title>

   <variablelist>
    <varlistentry>
     <term><parameter>conname</parameter></term>
     <listitem>
      <para>
<!--
       Name of the connection to use; omit this parameter to use the
       unnamed connection.
-->
使用する接続の名前です。
無名の接続を使用する場合はこのパラメータを省略します。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>cursorname</parameter></term>
     <listitem>
      <para>
<!--
       The name of the cursor to close.
-->
閉ざすカーソルの名前です。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>fail_on_error</parameter></term>
     <listitem>
      <para>
<!--
       If true (the default when omitted) then an error thrown on the
       remote side of the connection causes an error to also be thrown
       locally. If false, the remote error is locally reported as a NOTICE,
       and the function's return value is set to <literal>ERROR</>.
-->
真（省略時のデフォルト）の場合、接続のリモート側で発生したエラーによりローカル側でもエラーが発生します。
偽の場合リモート側のエラーはローカル側にはNOTICEとして報告され、この関数の戻り値は<literal>ERROR</>になります。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
<!--
   <title>Return Value</title>
-->
   <title>戻り値</title>

   <para>
<!--
    Returns status, either <literal>OK</> or <literal>ERROR</>.
-->
状態、つまり<literal>OK</>または<literal>ERROR</>を返します。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Notes</title>
-->
   <title>注釈</title>

   <para>
<!--
    If <function>dblink_open</> started an explicit transaction block,
    and this is the last remaining open cursor in this connection,
    <function>dblink_close</> will issue the matching <command>COMMIT</>.
-->
<function>dblink_open</>が明示的なトランザクションブロックを開始し、これが接続上で最後まで開き続けているカーソルであった場合、<function>dblink_close</>は対応する<command>COMMIT</>を発行します。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Examples</title>
-->
   <title>例</title>

<screen>
SELECT dblink_connect('dbname=postgres');
 dblink_connect
----------------
 OK
(1 row)

SELECT dblink_open('foo', 'select proname, prosrc from pg_proc');
 dblink_open
-------------
 OK
(1 row)

SELECT dblink_close('foo');
 dblink_close
--------------
 OK
(1 row)
</screen>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-GET-CONNECTIONS">
  <indexterm>
   <primary>dblink_get_connections</primary>
  </indexterm>

  <refmeta>
   <refentrytitle>dblink_get_connections</refentrytitle>
   <manvolnum>3</manvolnum>
  </refmeta>

  <refnamediv>
   <refname>dblink_get_connections</refname>
<!--
   <refpurpose>returns the names of all open named dblink connections</refpurpose>
-->
   <refpurpose>接続中の名前付きdblink接続すべての名前を返します</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
<synopsis>
dblink_get_connections() returns text[]
</synopsis>
  </refsynopsisdiv>

  <refsect1>
<!--
   <title>Description</title>
-->
   <title>説明</title>

   <para>
<!--
    <function>dblink_get_connections</> returns an array of the names
    of all open named <filename>dblink</> connections.
-->
<function>dblink_get_connections</>は、接続中の名前付きの<filename>dblink</>接続すべての名前を配列として返します。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Return Value</title>
-->
   <title>戻り値</title>

<!--
   <para>Returns a text array of connection names, or NULL if none.</para>
-->
   <para>接続名のテキスト型配列を返します。なければNULLです。</para>
  </refsect1>

  <refsect1>
<!--
   <title>Examples</title>
-->
   <title>例</title>

<programlisting>
SELECT dblink_get_connections();
</programlisting>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-ERROR-MESSAGE">
  <indexterm>
   <primary>dblink_error_message</primary>
  </indexterm>

  <refmeta>
   <refentrytitle>dblink_error_message</refentrytitle>
   <manvolnum>3</manvolnum>
  </refmeta>

  <refnamediv>
   <refname>dblink_error_message</refname>
<!--
   <refpurpose>gets last error message on the named connection</refpurpose>
-->
   <refpurpose>名前付き接続上の最後のエラーメッセージを入手します</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
<synopsis>
dblink_error_message(text connname) returns text
</synopsis>
  </refsynopsisdiv>

  <refsect1>
<!--
   <title>Description</title>
-->
   <title>説明</title>

   <para>
<!--
    <function>dblink_error_message</> fetches the most recent remote
    error message for a given connection.
-->
<function>dblink_error_message</>は指定された接続における、最後のリモートエラーメッセージを取り出します。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Arguments</title>
-->
   <title>引数</title>

   <variablelist>
    <varlistentry>
     <term><parameter>conname</parameter></term>
     <listitem>
      <para>
<!--
       Name of the connection to use.
-->
使用する接続名です。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
<!--
   <title>Return Value</title>
-->
   <title>戻り値</title>

   <para>
<!--
    Returns last error message, or an empty string if there has been
    no error in this connection.
-->
最後のエラーメッセージを返します。
接続においてエラーが存在しなかった場合は空文字列を返します。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Examples</title>
-->
   <title>例</title>

<programlisting>
SELECT dblink_error_message('dtest1');
</programlisting>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-SEND-QUERY">
  <indexterm>
   <primary>dblink_send_query</primary>
  </indexterm>

  <refmeta>
   <refentrytitle>dblink_send_query</refentrytitle>
   <manvolnum>3</manvolnum>
  </refmeta>

  <refnamediv>
   <refname>dblink_send_query</refname>
<!--
   <refpurpose>sends an async query to a remote database</refpurpose>
-->
   <refpurpose>リモートデータベースに非同期問い合わせを送信します</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
<synopsis>
dblink_send_query(text connname, text sql) returns int
</synopsis>
  </refsynopsisdiv>

  <refsect1>
<!--
   <title>Description</title>
-->
   <title>説明</title>

   <para>
<!--
    <function>dblink_send_query</> sends a query to be executed
    asynchronously, that is, without immediately waiting for the result.
    There must not be an async query already in progress on the
    connection.
-->
<function>dblink_send_query</>は非同期に、つまり、結果をすぐに待機することなく実行する問い合わせを送信します。
接続上で進行中の非同期問い合わせが存在してはなりません。
   </para>

   <para>
<!--
    After successfully dispatching an async query, completion status
    can be checked with <function>dblink_is_busy</>, and the results
    are ultimately collected with <function>dblink_get_result</>.
    It is also possible to attempt to cancel an active async query
    using <function>dblink_cancel_query</>.
-->
非同期問い合わせの登録が成功した後、<function>dblink_is_busy</>を使用して完了状況を検査することができます。
そして最後に、<function>dblink_get_result</>を使用して結果を収集します。
また、<function>dblink_cancel_query</>を使用して実行中の非同期問い合わせを取り消すことができます。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Arguments</title>
-->
   <title>引数</title>

   <variablelist>
    <varlistentry>
     <term><parameter>conname</parameter></term>
     <listitem>
      <para>
<!--
       Name of the connection to use.
-->
使用する接続名です。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>sql</parameter></term>
     <listitem>
      <para>
<!--
       The SQL statement that you wish to execute in the remote database,
       for example <literal>select * from pg_class</>.
-->
例えば<literal>select * from pg_class</>といった、リモートデータベースで実行させたいSQL文です。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
<!--
   <title>Return Value</title>
-->
   <title>戻り値</title>

   <para>
<!--
    Returns 1 if the query was successfully dispatched, 0 otherwise.
-->
問い合わせの登録に成功した場合1を返します。
失敗した場合は0を返します。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Examples</title>
-->
   <title>例</title>

<programlisting>
SELECT dblink_send_query('dtest1', 'SELECT * FROM foo WHERE f1 &lt; 3');
</programlisting>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-IS-BUSY">
  <indexterm>
   <primary>dblink_is_busy</primary>
  </indexterm>

  <refmeta>
   <refentrytitle>dblink_is_busy</refentrytitle>
   <manvolnum>3</manvolnum>
  </refmeta>

  <refnamediv>
   <refname>dblink_is_busy</refname>
<!--
   <refpurpose>checks if connection is busy with an async query</refpurpose>
-->
   <refpurpose>接続において非同期問い合わせが実行中か検査します</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
<synopsis>
dblink_is_busy(text connname) returns int
</synopsis>
  </refsynopsisdiv>

  <refsect1>
<!--
   <title>Description</title>
-->
   <title>説明</title>

   <para>
<!--
    <function>dblink_is_busy</> tests whether an async query is in progress.
-->
<function>dblink_is_busy</>は非同期問い合わせが進行中かどうか試験します。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Arguments</title>
-->
   <title>引数</title>

   <variablelist>
    <varlistentry>
     <term><parameter>conname</parameter></term>
     <listitem>
      <para>
<!--
       Name of the connection to check.
-->
検査対象の接続名です。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
<!--
   <title>Return Value</title>
-->
   <title>戻り値</title>

   <para>
<!--
    Returns 1 if connection is busy, 0 if it is not busy.
    If this function returns 0, it is guaranteed that
    <function>dblink_get_result</> will not block.
-->
接続において進行中だった場合は1、さもなくば0を返します。
この関数が0を返した場合、<function>dblink_get_result</>がブロックされないことが保証されます。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Examples</title>
-->
   <title>例</title>

<programlisting>
SELECT dblink_is_busy('dtest1');
</programlisting>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-GET-NOTIFY">
  <indexterm>
   <primary>dblink_get_notify</primary>
  </indexterm>

  <refmeta>
   <refentrytitle>dblink_get_notify</refentrytitle>
   <manvolnum>3</manvolnum>
  </refmeta>

  <refnamediv>
   <refname>dblink_get_notify</refname>
<!--
   <refpurpose>retrieve async notifications on a connection</refpurpose>
-->
   <refpurpose>接続上の非同期通知を取り出します</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
<synopsis>
dblink_get_notify() returns setof (notify_name text, be_pid int, extra text)
dblink_get_notify(text connname) returns setof (notify_name text, be_pid int, extra text)
</synopsis>
  </refsynopsisdiv>

  <refsect1>
<!--
   <title>Description</title>
-->
   <title>説明</title>

   <para>
<!--
    <function>dblink_get_notify</> retrieves notifications on either
    the unnamed connection, or on a named connection if specified.
    To receive notifications via dblink, <function>LISTEN</> must
    first be issued, using <function>dblink_exec</>.
    For details see <xref linkend="sql-listen"> and <xref linkend="sql-notify">.
-->
<function>dblink_get_notify</>は名前の付いていない接続、または、もし指定されて名前が付いている接続いずれからも通知を取り出します。
dblink経由で通知を受け取るには、<function>dblink_exec</>を使用して<function>LISTEN</>を最初に発行しなければなりません。
詳細は<xref linkend="sql-listen">と<xref linkend="sql-notify">を参照ください。
   </para>

  </refsect1>

  <refsect1>
<!--
   <title>Arguments</title>
-->
   <title>引数</title>

   <variablelist>
    <varlistentry>
     <term><parameter>conname</parameter></term>
     <listitem>
      <para>
<!--
       The name of a named connection to get notifications on.
-->
通知を受け取る名前つきの接続の名前
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
<!--
   <title>Return Value</title>
-->
   <title>戻り値</title>
<!--
    <para>Returns <type>setof (notify_name text, be_pid int, extra text)</type>, or an empty set if none.</para>
-->
    <para><type>setof (notify_name text, be_pid int, extra text)</type>または存在しない場合は空集合を返します。</para>
  </refsect1>

  <refsect1>
<!--
   <title>Examples</title>
-->
   <title>例</title>

<screen>
SELECT dblink_exec('LISTEN virtual');
 dblink_exec 
-------------
 LISTEN
(1 row)

SELECT * FROM dblink_get_notify();
 notify_name | be_pid | extra
-------------+--------+-------
(0 rows)

NOTIFY virtual;
NOTIFY

SELECT * FROM dblink_get_notify();
 notify_name | be_pid | extra
-------------+--------+-------
 virtual     |   1229 |
(1 row)
</screen>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-GET-RESULT">
  <indexterm>
   <primary>dblink_get_result</primary>
  </indexterm>

  <refmeta>
   <refentrytitle>dblink_get_result</refentrytitle>
   <manvolnum>3</manvolnum>
  </refmeta>

  <refnamediv>
   <refname>dblink_get_result</refname>
<!--
   <refpurpose>gets an async query result</refpurpose>
-->
   <refpurpose>非同期問い合わせの結果を入手します</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
<synopsis>
dblink_get_result(text connname [, bool fail_on_error]) returns setof record
</synopsis>
  </refsynopsisdiv>

  <refsect1>
<!--
   <title>Description</title>
-->
   <title>説明</title>

   <para>
<!--
    <function>dblink_get_result</> collects the results of an
    asynchronous query previously sent with <function>dblink_send_query</>.
    If the query is not already completed, <function>dblink_get_result</>
    will wait until it is.
-->
<function>dblink_get_result</>は、事前に<function>dblink_send_query</>で送信された非同期問い合わせの結果を収集します。
問い合わせがまだ完了していなかった場合、<function>dblink_get_result</>は終わるまで待機します。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Arguments</title>
-->
   <title>引数</title>

   <variablelist>
    <varlistentry>
     <term><parameter>conname</parameter></term>
     <listitem>
      <para>
<!--
       Name of the connection to use.
-->
使用する接続名です。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>fail_on_error</parameter></term>
     <listitem>
      <para>
<!--
       If true (the default when omitted) then an error thrown on the
       remote side of the connection causes an error to also be thrown
       locally. If false, the remote error is locally reported as a NOTICE,
       and the function returns no rows.
-->
真（省略時のデフォルト）の場合、接続のリモート側で発生したエラーによりローカル側でもエラーが発生します。
偽の場合リモート側のエラーはローカル側にはNOTICEとして報告され、この関数は行を返しません。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
<!--
   <title>Return Value</title>
-->
   <title>戻り値</title>

   <para>
<!--
    For an async query (that is, a SQL statement returning rows),
    the function returns the row(s) produced by the query.  To use this
    function, you will need to specify the expected set of columns,
    as previously discussed for <function>dblink</>.
-->
非同期問い合わせ（行を返すSQL文の場合）について、この関数は問い合わせで生成された行を返します。
この関数を使用するためには、上の<function>dblink</>で説明したように想定する列集合を指定する必要があります。
   </para>

   <para>
<!--
    For an async command (that is, a SQL statement not returning rows),
    the function returns a single row with a single text column containing
    the command's status string.  It is still necessary to specify that
    the result will have a single text column in the calling <literal>FROM</>
    clause.
-->
非同期コマンド（行を返さないSQL文の場合）について、この関数はコマンド状態文字列からなるテキスト列を1つ持つ1行を返します。
この場合も呼び出し元の<literal>FROM</>句で結果が単一のテキスト列を持つことを指定する必要があります。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Notes</title>
-->
   <title>注釈</title>

   <para>
<!--
    This function <emphasis>must</> be called if
    <function>dblink_send_query</> returned 1.
    It must be called once for each query
    sent, and one additional time to obtain an empty set result,
    before the connection can be used again.
-->
<function>dblink_send_query</>が1を返した場合にこの関数を<emphasis>呼び出さなければなりません</>。
接続を再度利用できるようになる前に、送信した問い合わせに対し一度呼び出されなければなりません。
もう一度実行すると空の結果集合を得ることになります。
   </para>

   <para>
<!--
    When using <function>dblink_send_query</> and
    <function>dblink_get_result</>, <application>dblink</> fetches the entire
    remote query result before returning any of it to the local query
    processor.  If the query returns a large number of rows, this can result
    in transient memory bloat in the local session.  It may be better to open
    such a query as a cursor with <function>dblink_open</> and then fetch a
    manageable number of rows at a time.  Alternatively, use plain
    <function>dblink()</>, which avoids memory bloat by spooling large result
    sets to disk.
-->
<function>dblink_send_query</>と<function>dblink_get_result</>を使う場合には、<function>dblink</>はリモート側の問い合わせ結果をローカルの問い合わせ処理に渡す前にすべて取り込みます。
問い合わせが大量の行を返す場合、ローカルセッションで一時的なメモリ膨張が起こるかも知れません。
そのような問い合わせは<function>dblink_open</>でカーソルとして開き、それから一度に管理可能な行数を取り出す方が良いでしょう。
あるいは、普通の<function>dblink()</>を使って下さい。
大きな結果集合をディスクにスプールすることでメモリ膨張を回避します。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Examples</title>
-->
   <title>例</title>

<screen>
contrib_regression=# SELECT dblink_connect('dtest1', 'dbname=contrib_regression');
 dblink_connect
----------------
 OK
(1 row)

contrib_regression=# SELECT * FROM
contrib_regression-# dblink_send_query('dtest1', 'select * from foo where f1 &lt; 3') AS t1;
 t1
----
  1
(1 row)

contrib_regression=# SELECT * FROM dblink_get_result('dtest1') AS t1(f1 int, f2 text, f3 text[]);
 f1 | f2 |     f3
----+----+------------
  0 | a  | {a0,b0,c0}
  1 | b  | {a1,b1,c1}
  2 | c  | {a2,b2,c2}
(3 rows)

contrib_regression=# SELECT * FROM dblink_get_result('dtest1') AS t1(f1 int, f2 text, f3 text[]);
 f1 | f2 | f3
----+----+----
(0 rows)

contrib_regression=# SELECT * FROM
contrib_regression-# dblink_send_query('dtest1', 'select * from foo where f1 &lt; 3; select * from foo where f1 &gt; 6') AS t1;
 t1
----
  1
(1 row)

contrib_regression=# SELECT * FROM dblink_get_result('dtest1') AS t1(f1 int, f2 text, f3 text[]);
 f1 | f2 |     f3
----+----+------------
  0 | a  | {a0,b0,c0}
  1 | b  | {a1,b1,c1}
  2 | c  | {a2,b2,c2}
(3 rows)

contrib_regression=# SELECT * FROM dblink_get_result('dtest1') AS t1(f1 int, f2 text, f3 text[]);
 f1 | f2 |      f3
----+----+---------------
  7 | h  | {a7,b7,c7}
  8 | i  | {a8,b8,c8}
  9 | j  | {a9,b9,c9}
 10 | k  | {a10,b10,c10}
(4 rows)

contrib_regression=# SELECT * FROM dblink_get_result('dtest1') AS t1(f1 int, f2 text, f3 text[]);
 f1 | f2 | f3
----+----+----
(0 rows)
</screen>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-CANCEL-QUERY">
  <indexterm>
   <primary>dblink_cancel_query</primary>
  </indexterm>

  <refmeta>
   <refentrytitle>dblink_cancel_query</refentrytitle>
   <manvolnum>3</manvolnum>
  </refmeta>

  <refnamediv>
   <refname>dblink_cancel_query</refname>
<!--
   <refpurpose>cancels any active query on the named connection</refpurpose>
-->
   <refpurpose>名前付き接続上の実行中の問い合わせをすべて取り消します</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
<synopsis>
dblink_cancel_query(text connname) returns text
</synopsis>
  </refsynopsisdiv>

  <refsect1>
<!--
   <title>Description</title>
-->
   <title>説明</title>

   <para>
<!--
    <function>dblink_cancel_query</> attempts to cancel any query that
    is in progress on the named connection.  Note that this is not
    certain to succeed (since, for example, the remote query might
    already have finished).  A cancel request simply improves the
    odds that the query will fail soon.  You must still complete the
    normal query protocol, for example by calling
    <function>dblink_get_result</>.
-->
<function>dblink_cancel_query</>は名前付き接続上で進行中の問い合わせをすべて取り消そうとします。
これは成功するとは限らないことに注意してください（例えばリモート問い合わせがすでに終わっているかもしれないからです）。
取り消し要求は単に問い合わせがすぐに失敗する可能性を大きくするだけです。
例えば、<function>dblink_get_result</>を呼び出すなど、通常の問い合わせ手順を完了させる必要があります。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Arguments</title>
-->
   <title>引数</title>

   <variablelist>
    <varlistentry>
     <term><parameter>conname</parameter></term>
     <listitem>
      <para>
<!--
       Name of the connection to use.
-->
使用する接続名です。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
<!--
   <title>Return Value</title>
-->
   <title>戻り値</title>

   <para>
<!--
    Returns <literal>OK</> if the cancel request has been sent, or
    the text of an error message on failure.
-->
取り消し要求が送信された場合<literal>OK</>を、さもなくば失敗についてのエラーメッセージテキストを返します。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Examples</title>
-->
   <title>例</title>

<programlisting>
SELECT dblink_cancel_query('dtest1');
</programlisting>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-GET-PKEY">
  <indexterm>
   <primary>dblink_get_pkey</primary>
  </indexterm>

  <refmeta>
   <refentrytitle>dblink_get_pkey</refentrytitle>
   <manvolnum>3</manvolnum>
  </refmeta>

  <refnamediv>
   <refname>dblink_get_pkey</refname>
<!--
   <refpurpose>returns the positions and field names of a relation's
    primary key fields
-->
   <refpurpose>
リレーションのプライマリキーフィールドの位置とフィールド名を返します
   </refpurpose>
  </refnamediv>

  <refsynopsisdiv>
<synopsis>
dblink_get_pkey(text relname) returns setof dblink_pkey_results
</synopsis>
  </refsynopsisdiv>

  <refsect1>
<!--
   <title>Description</title>
-->
   <title>説明</title>

   <para>
<!--
    <function>dblink_get_pkey</> provides information about the primary
    key of a relation in the local database.  This is sometimes useful
    in generating queries to be sent to remote databases.
-->
<function>dblink_get_pkey</>は、ローカルデータベース内のリレーションのプライマリキーに関する情報を提供します。
これはリモートデータベースに送信する問い合わせを生成する際に役に立つことがあります。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Arguments</title>
-->
   <title>引数</title>

   <variablelist>
    <varlistentry>
     <term><parameter>relname</parameter></term>
     <listitem>
      <para>
<!--
       Name of a local relation, for example <literal>foo</> or
       <literal>myschema.mytab</>.  Include double quotes if the
       name is mixed-case or contains special characters, for
       example <literal>"FooBar"</>; without quotes, the string
       will be folded to lower case.
-->
例えば<literal>foo</>や<literal>myschema.mytab</>といった、ローカル側のリレーションの名前です。
例えば<literal>"FooBar"</>のように名前に大文字小文字が混在する場合や特殊文字が含まれる場合は二重引用符で括ってください。
引用符がないと文字列は小文字に変換されます。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
<!--
   <title>Return Value</title>
-->
   <title>戻り値</title>

   <para>
<!--
    Returns one row for each primary key field, or no rows if the relation
    has no primary key.  The result row type is defined as
-->
プライマリキー毎に1行を返します。
リレーションがプライマリキーを持たない場合は行は返されません。
結果の行型は以下のように定義されます。

<programlisting>
CREATE TYPE dblink_pkey_results AS (position int, colname text);
</programlisting>

<!--
    The <literal>position</> column simply runs from 1 to <replaceable>N</>;
    it is the number of the field within the primary key, not the number
    within the table's columns.
-->
<literal>position</>列は単に1から<replaceable>N</>を返します。
それは、主キー内にあるフィールドの数で、テーブルの列内にある数ではありません。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Examples</title>
-->
   <title>例</title>

<screen>
CREATE TABLE foobar (
    f1 int,
    f2 int,
    f3 int,
    PRIMARY KEY (f1, f2, f3)
);
CREATE TABLE

SELECT * FROM dblink_get_pkey('foobar');
 position | colname
----------+---------
        1 | f1
        2 | f2
        3 | f3
(3 rows)
</screen>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-BUILD-SQL-INSERT">
  <indexterm>
   <primary>dblink_build_sql_insert</primary>
  </indexterm>

  <refmeta>
   <refentrytitle>dblink_build_sql_insert</refentrytitle>
   <manvolnum>3</manvolnum>
  </refmeta>

  <refnamediv>
   <refname>dblink_build_sql_insert</refname>
   <refpurpose>
<!--
    builds an INSERT statement using a local tuple, replacing the
    primary key field values with alternative supplied values
-->
ローカル側のタプルを使用し、プライマリキーフィールドの値を別の提供される値に置き換えてINSERT文を構築します
   </refpurpose>
  </refnamediv>

  <refsynopsisdiv>
<synopsis>
dblink_build_sql_insert(text relname,
                        int2vector primary_key_attnums,
                        integer num_primary_key_atts,
                        text[] src_pk_att_vals_array,
                        text[] tgt_pk_att_vals_array) returns text
</synopsis>
  </refsynopsisdiv>

  <refsect1>
<!--
   <title>Description</title>
-->
   <title>説明</title>

   <para>
<!--
    <function>dblink_build_sql_insert</> can be useful in doing selective
    replication of a local table to a remote database.  It selects a row
    from the local table based on primary key, and then builds a SQL
    <command>INSERT</> command that will duplicate that row, but with
    the primary key values replaced by the values in the last argument.
    (To make an exact copy of the row, just specify the same values for
    the last two arguments.)
-->
<function>dblink_build_sql_insert</>はローカル側のテーブルの一部を選択した複製をリモートデータベースに行う場合に有用になる可能性があります。
これはプライマリキーによりローカルテーブルから行を選択し、そのプライマリキー値を最後の引数で与えた値に置き換えて、行を複製する<command>INSERT</> SQLコマンドを構築します。
（行をそのまま複製する場合は、単に最後の2つの引数に同じ値を指定してください。）
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Arguments</title>
-->
   <title>引数</title>

   <variablelist>
    <varlistentry>
     <term><parameter>relname</parameter></term>
     <listitem>
      <para>
<!--
       Name of a local relation, for example <literal>foo</> or
       <literal>myschema.mytab</>.  Include double quotes if the
       name is mixed-case or contains special characters, for
       example <literal>"FooBar"</>; without quotes, the string
       will be folded to lower case.
-->
例えば<literal>foo</>や<literal>myschema.mytab</>といったローカル側のリレーションの名前です。
例えば<literal>"FooBar"</>のように名前に大文字小文字が混在する場合や特殊文字が含まれる場合は二重引用符で括ってください。
引用符がないと文字列は小文字に変換されます。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>primary_key_attnums</parameter></term>
     <listitem>
      <para>
<!--
       Attribute numbers (1-based) of the primary key fields,
       for example <literal>1 2</>.
-->
例えば<literal>1 2</>といった、プライマリキーフィールドの属性番号（1始まり）です。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>num_primary_key_atts</parameter></term>
     <listitem>
      <para>
<!--
       The number of primary key fields.
-->
プライマリキーフィールドの個数です。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>src_pk_att_vals_array</parameter></term>
     <listitem>
      <para>
<!--
       Values of the primary key fields to be used to look up the
       local tuple.  Each field is represented in text form.
       An error is thrown if there is no local row with these
       primary key values.
-->
ローカルタプルを検索するために使用されるプライマリキーフィールドの値です。
各フィールドはテキスト形式で表されます。
これらのプライマリキーの値を持つ行がローカル側に存在しない場合はエラーが発生します。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>tgt_pk_att_vals_array</parameter></term>
     <listitem>
      <para>
<!--
       Values of the primary key fields to be placed in the resulting
       <command>INSERT</> command.  Each field is represented in text form.
-->
最終的な<command>INSERT</>コマンドにおいて置き換えられるプライマリキーフィールドの値です。
各フィールドはテキスト形式で表されます。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
<!--
   <title>Return Value</title>
-->
   <title>戻り値</title>

<!--
   <para>Returns the requested SQL statement as text.</para>
-->
   <para>要求したSQL文をテキストとして返します。</para>
  </refsect1>

  <refsect1>
<!--
   <title>Notes</title>
-->
   <title>注釈</title>

   <para>
<!--
    As of <productname>PostgreSQL</> 9.0, the attribute numbers in
    <parameter>primary_key_attnums</parameter> are interpreted as logical
    column numbers, corresponding to the column's position in
    <literal>SELECT * FROM relname</>.  Previous versions interpreted the
    numbers as physical column positions.  There is a difference if any
    column(s) to the left of the indicated column have been dropped during
    the lifetime of the table.
-->
<productname>PostgreSQL</> 9.0の段階で、<parameter>primary_key_attnums</parameter>の中の属性数は、<literal>SELECT * FROM relname</>内の列の位置に対応する、論理的列数として翻訳されます。
以前のバージョンは物理的な列の位置として数を翻訳しました。
テーブルの存続期間中に、表示された列の左側のどんな列でも削除されると差異が生じます。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Examples</title>
-->
   <title>例</title>

<screen>
SELECT dblink_build_sql_insert('foo', '1 2', 2, '{"1", "a"}', '{"1", "b''a"}');
             dblink_build_sql_insert
--------------------------------------------------
 INSERT INTO foo(f1,f2,f3) VALUES('1','b''a','1')
(1 row)
</screen>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-BUILD-SQL-DELETE">
  <indexterm>
   <primary>dblink_build_sql_delete</primary>
  </indexterm>

  <refmeta>
   <refentrytitle>dblink_build_sql_delete</refentrytitle>
   <manvolnum>3</manvolnum>
  </refmeta>

  <refnamediv>
   <refname>dblink_build_sql_delete</refname>
<!--
   <refpurpose>builds a DELETE statement using supplied values for primary
    key field values
-->
   <refpurpose>
プライマリキーフィールドの値として提供された値を使用したDELETE文を構築します
   </refpurpose>
  </refnamediv>

  <refsynopsisdiv>
<synopsis>
dblink_build_sql_delete(text relname,
                        int2vector primary_key_attnums,
                        integer num_primary_key_atts,
                        text[] tgt_pk_att_vals_array) returns text
</synopsis>
  </refsynopsisdiv>

  <refsect1>
<!--
   <title>Description</title>
-->
   <title>説明</title>

   <para>
<!--
    <function>dblink_build_sql_delete</> can be useful in doing selective
    replication of a local table to a remote database.  It builds a SQL
    <command>DELETE</> command that will delete the row with the given
    primary key values.
-->
<function>dblink_build_sql_delete</>はローカル側のテーブルの一部を選択した複製をリモートデータベースに行う場合に有用になる可能性があります。
これは指定したプライマリキーの値を持つ行を削除する<command>DELETE</> SQLコマンドを構築します。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Arguments</title>
-->
   <title>引数</title>

   <variablelist>
    <varlistentry>
     <term><parameter>relname</parameter></term>
     <listitem>
      <para>
<!--
       Name of a local relation, for example <literal>foo</> or
       <literal>myschema.mytab</>.  Include double quotes if the
       name is mixed-case or contains special characters, for
       example <literal>"FooBar"</>; without quotes, the string
       will be folded to lower case.
-->
例えば<literal>foo</>や<literal>myschema.mytab</>といったローカル側のリレーションの名前です。
例えば<literal>"FooBar"</>のように名前に大文字小文字が混在する場合や特殊文字が含まれる場合は二重引用符で括ってください。
引用符がないと文字列は小文字に変換されます。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>primary_key_attnums</parameter></term>
     <listitem>
      <para>
<!--
       Attribute numbers (1-based) of the primary key fields,
       for example <literal>1 2</>.
-->
例えば<literal>1 2</>といった、プライマリキーフィールドの属性番号（1始まり）です。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>num_primary_key_atts</parameter></term>
     <listitem>
      <para>
<!--
       The number of primary key fields.
-->
プライマリキーフィールドの個数です。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>tgt_pk_att_vals_array</parameter></term>
     <listitem>
      <para>
<!--
       Values of the primary key fields to be used in the resulting
       <command>DELETE</> command.  Each field is represented in text form.
-->
最終的な<command>DELETE</>コマンドにおいて使用されるプライマリキーフィールドの値です。
各フィールドはテキスト形式で表されます。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
<!--
   <title>Return Value</title>
-->
   <title>戻り値</title>

<!--
   <para>Returns the requested SQL statement as text.</para>
-->
   <para>
要求したSQL文をテキストとして返します。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Notes</title>
-->
   <title>注釈</title>

   <para>
<!--
    As of <productname>PostgreSQL</> 9.0, the attribute numbers in
    <parameter>primary_key_attnums</parameter> are interpreted as logical
    column numbers, corresponding to the column's position in
    <literal>SELECT * FROM relname</>.  Previous versions interpreted the
    numbers as physical column positions.  There is a difference if any
    column(s) to the left of the indicated column have been dropped during
    the lifetime of the table.
-->
<productname>PostgreSQL</> 9.0の段階で、<parameter>primary_key_attnums</parameter>の中の属性数は、<literal>SELECT * FROM relname</>内の列の位置に対応する、論理的列数として翻訳されます。
以前のバージョンは物理的な列の位置として数を翻訳しました。
テーブルの存続期間中に、表示された列の左側のどんな列でも削除されると差異が生じます。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Examples</title>
-->
   <title>例</title>

<screen>
SELECT dblink_build_sql_delete('"MyFoo"', '1 2', 2, '{"1", "b"}');
           dblink_build_sql_delete
---------------------------------------------
 DELETE FROM "MyFoo" WHERE f1='1' AND f2='b'
(1 row)
</screen>
  </refsect1>
 </refentry>

 <refentry id="CONTRIB-DBLINK-BUILD-SQL-UPDATE">
  <indexterm>
   <primary>dblink_build_sql_update</primary>
  </indexterm>

  <refmeta>
   <refentrytitle>dblink_build_sql_update</refentrytitle>
   <manvolnum>3</manvolnum>
  </refmeta>

  <refnamediv>
   <refname>dblink_build_sql_update</refname>
<!--
   <refpurpose>builds an UPDATE statement using a local tuple, replacing
    the primary key field values with alternative supplied values
   </refpurpose>
-->
   <refpurpose>プライマリキーフィールドの値として提供された値を使用したUPDATE文を構築します
   </refpurpose>
  </refnamediv>

  <refsynopsisdiv>
<synopsis>
dblink_build_sql_update(text relname,
                        int2vector primary_key_attnums,
                        integer num_primary_key_atts,
                        text[] src_pk_att_vals_array,
                        text[] tgt_pk_att_vals_array) returns text
</synopsis>
  </refsynopsisdiv>

  <refsect1>
<!--
   <title>Description</title>
-->
   <title>説明</title>

   <para>
<!--
    <function>dblink_build_sql_update</> can be useful in doing selective
    replication of a local table to a remote database.  It selects a row
    from the local table based on primary key, and then builds a SQL
    <command>UPDATE</> command that will duplicate that row, but with
    the primary key values replaced by the values in the last argument.
    (To make an exact copy of the row, just specify the same values for
    the last two arguments.)  The <command>UPDATE</> command always assigns
    all fields of the row &mdash; the main difference between this and
    <function>dblink_build_sql_insert</> is that it's assumed that
    the target row already exists in the remote table.
-->
<function>dblink_build_sql_update</>はローカル側のテーブルの一部を選択した複製をリモートデータベースに行う場合に有用になる可能性があります。
これはプライマリキーによりローカルテーブルから行を選択し、そのプライマリキー値を最後の引数で与えた値に置き換えて、行を複製する<command>UPDATE</> SQLコマンドを構築します。
（行をそのまま複製する場合は、単に最後の2つの引数に同じ値を指定してください。）
この<command>UPDATE</>コマンドは常に行のすべてのフィールドを代入します。
この関数と<function>dblink_build_sql_insert</>の主な違いは、対象の行がリモート側のテーブルにすでに存在すると仮定している点です。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Arguments</title>
-->
   <title>引数</title>

   <variablelist>
    <varlistentry>
     <term><parameter>relname</parameter></term>
     <listitem>
      <para>
<!--
       Name of a local relation, for example <literal>foo</> or
       <literal>myschema.mytab</>.  Include double quotes if the
       name is mixed-case or contains special characters, for
       example <literal>"FooBar"</>; without quotes, the string
       will be folded to lower case.
-->
例えば<literal>foo</>や<literal>myschema.mytab</>といったローカル側のリレーションの名前です。
例えば<literal>"FooBar"</>のように名前に大文字小文字が混在する場合や特殊文字が含まれる場合は二重引用符で括ってください。
引用符がないと文字列は小文字に変換されます。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>primary_key_attnums</parameter></term>
     <listitem>
      <para>
<!--
       Attribute numbers (1-based) of the primary key fields,
       for example <literal>1 2</>.
-->
例えば<literal>1 2</>といった、プライマリキーフィールドの属性番号（1始まり）です。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>num_primary_key_atts</parameter></term>
     <listitem>
      <para>
<!--
       The number of primary key fields.
-->
プライマリキーフィールドの個数です。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>src_pk_att_vals_array</parameter></term>
     <listitem>
      <para>
<!--
       Values of the primary key fields to be used to look up the
       local tuple.  Each field is represented in text form.
       An error is thrown if there is no local row with these
       primary key values.
-->
ローカルタプルを検索するために使用されるプライマリキーフィールドの値です。
各フィールドはテキスト形式で表されます。
これらのプライマリキーの値を持つ行がローカル側に存在しない場合はエラーが発生します。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>tgt_pk_att_vals_array</parameter></term>
     <listitem>
      <para>
<!--
       Values of the primary key fields to be placed in the resulting
       <command>UPDATE</> command.  Each field is represented in text form.
-->
最終的な<command>UPDATE</>コマンドにおいて置き換えられるプライマリキーフィールドの値です。
各フィールドはテキスト形式で表されます。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
<!--
   <title>Return Value</title>
-->
   <title>戻り値</title>

<!--
   <para>Returns the requested SQL statement as text.</para>
-->
   <para>要求したSQL文をテキストとして返します。</para>
  </refsect1>

  <refsect1>
<!--
   <title>Notes</title>
-->
   <title>注釈</title>

   <para>
<!--
    As of <productname>PostgreSQL</> 9.0, the attribute numbers in
    <parameter>primary_key_attnums</parameter> are interpreted as logical
    column numbers, corresponding to the column's position in
    <literal>SELECT * FROM relname</>.  Previous versions interpreted the
    numbers as physical column positions.  There is a difference if any
    column(s) to the left of the indicated column have been dropped during
    the lifetime of the table.
-->
<productname>PostgreSQL</> 9.0の段階で、<parameter>primary_key_attnums</parameter>の中の属性数は、<literal>SELECT * FROM relname</>内の列の位置に対応する、論理的列数として翻訳されます。
以前のバージョンは物理的な列の位置として数を翻訳しました。
テーブルの存続期間中に、表示された列の左側のどんな列でも削除されると差異が生じます。
   </para>
  </refsect1>

  <refsect1>
<!--
   <title>Examples</title>
-->
   <title>例</title>

<screen>
SELECT dblink_build_sql_update('foo', '1 2', 2, '{"1", "a"}', '{"1", "b"}');
                   dblink_build_sql_update
-------------------------------------------------------------
 UPDATE foo SET f1='1',f2='b',f3='1' WHERE f1='1' AND f2='b'
(1 row)
</screen>
  </refsect1>
 </refentry>

</sect1>
