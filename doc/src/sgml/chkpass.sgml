<!-- doc/src/sgml/chkpass.sgml -->

<sect1 id="chkpass" xreflabel="chkpass">
 <title>chkpass</title>

 <indexterm zone="chkpass">
  <primary>chkpass</primary>
 </indexterm>

 <para>
<!--
  This module implements a data type <type>chkpass</> that is
  designed for storing encrypted passwords.
  Each password is automatically converted to encrypted form upon entry,
  and is always stored encrypted.  To compare, simply compare against a clear
  text password and the comparison function will encrypt it before comparing.
-->
本モジュールは暗号化したパスワードを格納するために設計された<type>chkpass</>データ型を実装します。
各パスワードは入力時に自動的に暗号化形式に変換され、常に暗号化して格納されます。
比較する際は単に平文のパスワードと比較してください。
そうすると、比較関数が比較する前に平文を暗号化してくれます。
 </para>

 <para>
<!--
  There are provisions in the code to report an error if the password is
  determined to be easily crackable.  However, this is currently just
  a stub that does nothing.
-->
パスワードが簡単にクラックできると判断される場合にエラーを報告する対策がコードに含まれています。
しかし、現在は何も行わない単なるスタブです。
 </para>

 <para>
<!--
  If you precede an input string with a colon, it is assumed to be an
  already-encrypted password, and is stored without further encryption.
  This allows entry of previously-encrypted passwords.
-->
コロン付きの入力文字列を付けると、それはすでに暗号化済みのパスワードとみなされ、それ以上暗号化することなく格納されます。
これにより事前に暗号化されたパスワードを入力することができます。
 </para>

 <para>
<!--
  On output, a colon is prepended.  This makes it possible to dump and reload
  passwords without re-encrypting them.  If you want the encrypted password
  without the colon then use the <function>raw()</> function.
  This allows you to use the
  type with things like Apache's <literal>Auth_PostgreSQL</> module.
-->
出力時はコロンが先頭に付けられます。
これにより、暗号化を再度行うことなくパスワードのダンプと再ロードを行うことができます。
コロンがない暗号化パスワードが必要ならば、<function>raw()</>関数を使用してください。
これにより、Apacheの<literal>Auth_PostgreSQL</>モジュールのような作業にこの型を使用することができます。
 </para>

 <para>
<!--
  The encryption uses the standard Unix function <function>crypt()</>,
  and so it suffers
  from all the usual limitations of that function; notably that only the
  first eight characters of a password are considered.
-->
暗号化は標準Unix関数<function>crypt()</>を使用します。
このため、その関数全ての制限の影響を受けます。とりわけ、パスワードの先頭8文字のみが考慮されます。
 </para>

 <para>
<!--
  Note that the <type>chkpass</type> data type is not indexable.
-->
<type>chkpass</type>データ型のインデックス付けができないことに注意してください。
  <!--　原文コメント
  I haven't worried about making this type indexable.  I doubt that anyone
  would ever need to sort a file in order of encrypted password.
  -->
 </para>

 <para>
<!--
  Sample usage:
-->
使用例を以下に示します。
 </para>

<programlisting>
test=# create table test (p chkpass);
CREATE TABLE
test=# insert into test values ('hello');
INSERT 0 1
test=# select * from test;
       p
----------------
 :dVGkpXdOrE3ko
(1 row)

test=# select raw(p) from test;
      raw
---------------
 dVGkpXdOrE3ko
(1 row)

test=# select p = 'hello' from test;
 ?column?
----------
 t
(1 row)

test=# select p = 'goodbye' from test;
 ?column?
----------
 f
(1 row)
</programlisting>

 <sect2>
<!--
  <title>Author</title>
-->
  <title>作者</title>

  <para>
   D'Arcy J.M. Cain (<email>darcy@druid.net</email>)
  </para>
 </sect2>

</sect1>
