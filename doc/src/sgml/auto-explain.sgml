<!-- doc/src/sgml/auto-explain.sgml -->

<sect1 id="auto-explain" xreflabel="auto_explain">
 <title>auto_explain</title>

 <indexterm zone="auto-explain">
  <primary>auto_explain</primary>
 </indexterm>

 <para>
<!--
  The <filename>auto_explain</filename> module provides a means for
  logging execution plans of slow statements automatically, without
  having to run <xref linkend="sql-explain">
  by hand.  This is especially helpful for tracking down un-optimized queries
  in large applications.
-->
<filename>auto_explain</filename>モジュールは、手動で<xref linkend="sql-explain">の実行を必要とせず、自動的に遅い文の実行計画をログ記録する手段を提供します。
大きなアプリケーションにおける最適化されていない問い合わせを追跡するのに特に有用です。
 </para>

 <para>
<!--
  The module provides no SQL-accessible functions.  To use it, simply
  load it into the server.  You can load it into an individual session:
-->
このモジュールはSQLでアクセスできる関数を提供しません。
使用するには、サーバに単に読み込ませます。
ある個別のセッションに読み込ませることができます。

<programlisting>
LOAD 'auto_explain';
</programlisting>

<!--
  (You must be superuser to do that.)  More typical usage is to preload
  it into all sessions by including <literal>auto_explain</> in
  <xref linkend="guc-shared-preload-libraries"> in
  <filename>postgresql.conf</>.  Then you can track unexpectedly slow queries
  no matter when they happen.  Of course there is a price in overhead for
  that.
-->
（実行するためにはスーパーユーザでなければなりません。）
より一般的な使用方法は、<filename>postgresql.conf</>の<xref linkend="guc-shared-preload-libraries">に<literal>auto_explain</>を含めて、すべてのセッションで事前にロードしておくことです。
すると、想定外に低速な問い合わせを発生時に何も行うことなく追跡することができます。
当然ながらこのためのオーバーヘッドという代償があります。
 </para>

 <sect2>
<!--
  <title>Configuration Parameters</title>
-->
  <title>設定パラメータ</title>

 <para>
<!--
  There are several configuration parameters that control the behavior of
  <filename>auto_explain</filename>.  Note that the default behavior is
  to do nothing, so you must set at least
  <varname>auto_explain.log_min_duration</varname> if you want any results.
-->
<filename>auto_explain</filename>の動作を制御するいくつかの構成パラメータが存在します。
デフォルトの動作は何もしないことなので、なんらかの結果を望むのであれば少なくとも<varname>auto_explain.log_min_duration</varname>を設定しなければならないことに注意してください。
 </para>

  <variablelist>
   <varlistentry>
    <term>
     <varname>auto_explain.log_min_duration</varname> (<type>integer</type>)
    </term>
    <indexterm>
<!--
     <primary><varname>auto_explain.log_min_duration</> configuration parameter</primary>
-->
     <primary><varname>auto_explain.log_min_duration</>構成パラメータ</primary>
    </indexterm>
    <listitem>
     <para>
<!--
      <varname>auto_explain.log_min_duration</varname> is the minimum statement
      execution time, in milliseconds, that will cause the statement's plan to
      be logged. Setting this to zero logs all plans. Minus-one (the default)
      disables logging of plans.  For example, if you set it to
      <literal>250ms</literal> then all statements that run 250ms or longer
      will be logged. Only superusers can change this setting.
-->
<varname>auto_explain.log_min_duration</varname>は、文の実行計画がログに記録されるようになる、ミリ秒単位の最小の文実行時間です。
これをゼロにすれば、すべての計画が記録されます。
マイナス1（デフォルト）は計画の記録を無効にします。
例えば、<literal>250ms</literal>に設定すると、250ms以上実行する文すべてが記録されます。
スーパーユーザのみがこの設定を変更することができます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>auto_explain.log_analyze</varname> (<type>boolean</type>)
    </term>
    <indexterm>
<!--
     <primary><varname>auto_explain.log_analyze</> configuration parameter</primary>
-->
     <primary><varname>auto_explain.log_analyze</>設定パラメータ</primary>
    </indexterm>
    <listitem>
     <para>
<!--
      <varname>auto_explain.log_analyze</varname> causes <command>EXPLAIN ANALYZE</>
      output, rather than just <command>EXPLAIN</> output, to be printed
      when an execution plan is logged. This parameter is off by default.
      Only superusers can change this setting.
-->
<varname>auto_explain.log_analyze</varname>は、実行計画のログが取得されたときに出力されるものとして、単に<command>EXPLAIN</>出力ではなく、<command>EXPLAIN ANALYZE</>出力を行います。
このパラメータはデフォルトで無効です。
スーパユーザのみ、この設定を変更できます。
     </para>
     <note>
      <para>
<!--
       When this parameter is on, per-plan-node timing occurs for all
       statements executed, whether or not they run long enough to actually
       get logged.  This can have an extremely negative impact on performance.
-->
このパラメータが有効の場合、計画ノードごとの時間的調整は事実上ログされるまで如何に時間が掛かろうと、全ての実行文に対して引き起こります。
極端に性能上のマイナスの影響が起こり得ます。
      </para>
     </note>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>auto_explain.log_verbose</varname> (<type>boolean</type>)
    </term>
    <indexterm>
<!--
     <primary><varname>auto_explain.log_verbose</> configuration parameter</primary>
-->
     <primary><varname>auto_explain.log_verbose</>設定パラメータ</primary>
    </indexterm>
    <listitem>
     <para>
<!--
      <varname>auto_explain.log_verbose</varname> causes <command>EXPLAIN VERBOSE</>
      output, rather than just <command>EXPLAIN</> output, to be printed
      when an execution plan is logged. This parameter is off by default.
      Only superusers can change this setting.
-->
<varname>auto_explain.log_verbose</varname>は、実行計画のログが取得されたときに出力されるものとして、単に<command>EXPLAIN</>出力ではなく、<command>EXPLAIN VERBOSE</>出力を行います。
このパラメータはデフォルトで無効です。
スーパユーザのみ、この設定を変更できます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>auto_explain.log_buffers</varname> (<type>boolean</type>)
    </term>
    <indexterm>
<!--
     <primary><varname>auto_explain.log_buffers</> configuration parameter</primary>
-->
      <primary><varname>auto_explain.log_buffers</>設定パラメータ</primary>
    </indexterm>
    <listitem>
     <para>
<!--
      <varname>auto_explain.log_buffers</varname> causes <command>EXPLAIN
      (ANALYZE, BUFFERS)</> output, rather than just <command>EXPLAIN</>
      output, to be printed when an execution plan is logged. This parameter is
      off by default. Only superusers can change this setting. This
      parameter has no effect unless <varname>auto_explain.log_analyze</>
      parameter is set.
-->
<varname>auto_explain.log_buffers</varname>により、実行計画のログを記録するときに、単なる<command>EXPLAIN</>出力ではなく<command>EXPLAIN (ANALYZE, BUFFERS)</>出力で記録するようになります。
このパラメータはデフォルトで無効です。
スーパーユーザのみがこの設定を変更することができます。
<varname>auto_explain.log_analyze</>パラメータが設定されていなければ、このパラメータは効果がありません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>auto_explain.log_format</varname> (<type>enum</type>)
    </term>
    <indexterm>
<!--
     <primary><varname>auto_explain.log_format</> configuration parameter</primary>
-->
     <primary><varname>auto_explain.log_format</>設定パラメータ</primary>
    </indexterm>
    <listitem>
     <para>
<!--
      <varname>auto_explain.log_format</varname> selects the
      <command>EXPLAIN</> output format to be used.
      The allowed values are <literal>text</literal>, <literal>xml</literal>,
      <literal>json</literal>, and <literal>yaml</literal>.  The default is text.
      Only superusers can change this setting.
-->
<varname>auto_explain.log_format</varname>は使用する<command>EXPLAIN</>出力書式を選びます。
許容される値は<literal>text</literal>、<literal>xml</literal>、<literal>json</literal>、<literal>yaml</literal>です。
デフォルトはtextです。
スーパーユーザのみがこの設定を変更することができます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>auto_explain.log_timing</varname> (<type>boolean</type>)
    </term>
    <indexterm>
<!--
     <primary><varname>auto_explain.log_timing</> configuration parameter</primary>
-->
     <primary><varname>auto_explain.log_timing</>設定パラメータ</primary>
    </indexterm>
    <listitem>
     <para>
<!--
      <varname>auto_explain.log_timing</varname> causes <command>EXPLAIN
      (ANALYZE, TIMING off)</> output, rather than just <command>EXPLAIN (ANALYZE)</>
      output. The overhead of repeatedly reading the system clock can slow down the
      query significantly on some systems, so it may be useful to set this
      parameter to off when only actual row counts, and not exact times, are needed.
      This parameter is only effective when <varname>auto_explain.log_analyze</varname>
      is also enabled.  This parameter is on by default.
      Only superusers can change this setting.
-->
<varname>auto_explain.log_timing</varname>により単なる<command>EXPLAIN (ANALYZE)</>出力ではなく<command>EXPLAIN (ANALYZE, TIMING off)</>出力で記録するようになります。
システムクロックを繰り返し読み出すことによるオーバーヘッドのため、システムの中には問い合わせが非常に遅くなるものがありますので、実際の行数のみ必要で正確な時刻は必要でない場合にはこのパラメータを無効にすると役に立つかも知れません。
このパラメータは<varname>auto_explain.log_analyze</varname>も有効になっているときにのみ有効です。
デフォルトで有効です。
スーパーユーザのみがこの設定を変更することができます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>auto_explain.log_nested_statements</varname> (<type>boolean</type>)
    </term>
    <indexterm>
<!--
     <primary><varname>auto_explain.log_nested_statements</> configuration parameter</primary>
-->
     <primary><varname>auto_explain.log_nested_statements</>設定パラメータ</primary>
    </indexterm>
    <listitem>
     <para>
<!--
      <varname>auto_explain.log_nested_statements</varname> causes nested
      statements (statements executed inside a function) to be considered
      for logging.  When it is off, only top-level query plans are logged. This
      parameter is off by default. Only superusers can change this setting.
-->
<varname>auto_explain.log_nested_statements</varname>により、入れ子状の文（関数内から実行される文）を考慮して記録するようになります。
無効ならば、最上位の問い合わせ計画のみが記録されます。
このパラメータはデフォルトで無効です。
スーパーユーザのみがこの設定を変更することができます。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
<!--
   These parameters must be set in <filename>postgresql.conf</>.
   Typical usage might be:
-->
これらパラメータを<filename>postgresql.conf</>に設定しなければなりません。
典型的な使用法は以下のようになります。
  </para>

<programlisting>
# postgresql.conf
shared_preload_libraries = 'auto_explain'

auto_explain.log_min_duration = '3s'
</programlisting>
 </sect2>

 <sect2>
<!--
  <title>Example</title>
-->
  <title>例</title> 

<programlisting>
postgres=# LOAD 'auto_explain';
postgres=# SET auto_explain.log_min_duration = 0;
postgres=# SELECT count(*)
           FROM pg_class, pg_index
           WHERE oid = indrelid AND indisunique;
</programlisting>

  <para>
<!--
   This might produce log output such as:
-->
これにより、以下のようなログ出力が作成されます。
  </para>

<screen><![CDATA[
LOG:  duration: 3.651 ms  plan:
  Query Text: SELECT count(*)
              FROM pg_class, pg_index
              WHERE oid = indrelid AND indisunique;
  Aggregate  (cost=16.79..16.80 rows=1 width=0) (actual time=3.626..3.627 rows=1 loops=1)
    ->  Hash Join  (cost=4.17..16.55 rows=92 width=0) (actual time=3.349..3.594 rows=92 loops=1)
          Hash Cond: (pg_class.oid = pg_index.indrelid)
          ->  Seq Scan on pg_class  (cost=0.00..9.55 rows=255 width=4) (actual time=0.016..0.140 rows=255 loops=1)
          ->  Hash  (cost=3.02..3.02 rows=92 width=4) (actual time=3.238..3.238 rows=92 loops=1)
                Buckets: 1024  Batches: 1  Memory Usage: 4kB
                ->  Seq Scan on pg_index  (cost=0.00..3.02 rows=92 width=4) (actual time=0.008..3.187 rows=92 loops=1)
                      Filter: indisunique
]]></screen>
 </sect2>

 <sect2>
<!--
  <title>Author</title>
-->
  <title>作者</title>

  <para>
<!--
   Takahiro Itagaki <email>itagaki.takahiro@oss.ntt.co.jp</email>
-->
   板垣 貴裕 <email>itagaki.takahiro.at.oss.ntt.co.jp</email>
  </para>
 </sect2>

</sect1>
