<!-- doc/src/sgml/planstats.sgml -->

<chapter id="planner-stats-details">
<!--
 <title>How the Planner Uses Statistics</title>
-->
 <title>プランナが統計情報をどのように使用するか</title>

  <para>
<!--
   This chapter builds on the material covered in <xref
   linkend="using-explain"> and <xref linkend="planner-stats"> to show some
   additional details about how the planner uses the
   system statistics to estimate the number of rows each part of a query might
   return. This is a significant part of the planning process,
   providing much of the raw material for cost calculation.
-->
本章は、<xref linkend="using-explain">と<xref linkend="planner-stats">で扱われている題材を基にしていて、問い合わせの各段階において返される行数を推定するために、プランナがシステムの統計情報をどのように使用するかについて更なる詳細をいくつか説明します。
これは計画作成処理において重要な部分で、コスト計算用の多くの情報を提供します。
  </para>

  <para>
<!--
   The intent of this chapter is not to document the code in detail,
   but to present an overview of how it works.
   This will perhaps ease the learning curve for someone who subsequently
   wishes to read the code.
-->
本章の目的はコードを詳しく文書化することではありません。
どのように動作するのかに関する概要を表すことが目的です。
これによりおそらく、後にコードを参照するユーザの習得速度が向上するでしょう。
  </para>

 <sect1 id="row-estimation-examples">
<!--
  <title>Row Estimation Examples</title>
-->
  <title>行推定の例</title>

  <indexterm zone="row-estimation-examples">
<!--
   <primary>row estimation</primary>
   <secondary>planner</secondary>
-->
   <primary>行推定</primary>
   <secondary>プランナ</secondary>
  </indexterm>

  <para>
<!--
   The examples shown below use tables in the <productname>PostgreSQL</>
   regression test database.
   The outputs shown are taken from version 8.3.
   The behavior of earlier (or later) versions might vary.
   Note also that since <command>ANALYZE</> uses random sampling
   while producing statistics, the results will change slightly after
   any new <command>ANALYZE</>.
-->
以下の例は<productname>PostgreSQL</>リグレッション試験データベース内のテーブルを使用します。
表示される出力はバージョン8.3で取得しました。
以前の（または以降の）バージョンとは動作が変わっているかもしれません。
また、<command>ANALYZE</>は統計情報を生成する時にランダムなサンプリングを行いますので、結果は<command>ANALYZE</>を新しく行った後に多少変わることに注意してください。
  </para>

  <para>
<!--
   Let's start with a very simple query:
-->
非常に簡単な問い合わせから始めましょう。

<programlisting>
EXPLAIN SELECT * FROM tenk1;

                         QUERY PLAN
-------------------------------------------------------------
 Seq Scan on tenk1  (cost=0.00..458.00 rows=10000 width=244)
</programlisting>

<!--
   How the planner determines the cardinality of <structname>tenk1</structname>
   is covered in <xref linkend="planner-stats">, but is repeated here for
   completeness. The number of pages and rows is looked up in
   <structname>pg_class</structname>:
-->
プランナがどのように<classname>tenk1</classname>の濃度を決定するかについては<xref linkend="planner-stats">で説明しました。
しかし、ここで完全になるように繰り返し説明します。
ページ数および行数は<classname>pg_class</classname>から検索されます。

<programlisting>
SELECT relpages, reltuples FROM pg_class WHERE relname = 'tenk1';

 relpages | reltuples
----------+-----------
      358 |     10000
</programlisting>

<!--
    These numbers are current as of the last <command>VACUUM</> or
    <command>ANALYZE</> on the table.  The planner then fetches the
    actual current number of pages in the table (this is a cheap operation,
    not requiring a table scan).  If that is different from
    <structfield>relpages</structfield> then
    <structfield>reltuples</structfield> is scaled accordingly to
    arrive at a current number-of-rows estimate.  In this case the value of
    <structfield>relpages</structfield> is up-to-date so the rows estimate is
    the same as <structfield>reltuples</structfield>.
-->
これらの値は最後にそのテーブルを<command>VACUUM</>または<command>ANALYZE</>を行った時点のものです。
プランナはその後、テーブル内の実際のページ数を取り出します（これはテーブルスキャンを行わない安価な操作です）。
<structfield>relpages</structfield>と異なる場合、<structfield>reltuples</structfield>は現在の推定行数に達するまで増大されます。
この場合、<structfield>relpages</structfield>の値は最新のものですので、推定行は<structfield>reltuples</structfield>と同じです。
  </para>

  <para>
<!--
   Let's move on to an example with a range condition in its
   <literal>WHERE</literal> clause:
-->
次に<literal>WHERE</literal>句に範囲条件を持つ例に進みましょう。

<programlisting>
EXPLAIN SELECT * FROM tenk1 WHERE unique1 &lt; 1000;

                                   QUERY PLAN
--------------------------------------------------------------------------------
 Bitmap Heap Scan on tenk1  (cost=24.06..394.64 rows=1007 width=244)
   Recheck Cond: (unique1 &lt; 1000)
   -&gt;  Bitmap Index Scan on tenk1_unique1  (cost=0.00..23.80 rows=1007 width=0)
         Index Cond: (unique1 &lt; 1000)
</programlisting>

<!--
   The planner examines the <literal>WHERE</literal> clause condition
   and looks up the selectivity function for the operator
   <literal>&lt;</literal> in <structname>pg_operator</structname>.
   This is held in the column <structfield>oprrest</structfield>,
   and the entry in this case is <function>scalarltsel</function>.
   The <function>scalarltsel</function> function retrieves the histogram for
   <structfield>unique1</structfield> from
   <structname>pg_statistics</structname>.  For manual queries it is more
   convenient to look in the simpler <structname>pg_stats</structname>
   view:
-->
プランナは<literal>WHERE</literal>句の条件を検査し、<structname>pg_operator</structname>内の<literal>&lt;</literal>演算子用の選択度関数を検索します。
これは<structfield>oprrest</structfield>列に保持されます。
今回の例ではこの項は<function>scalarltsel</function>です。
<function>scalarltsel</function>関数は、<structname>pg_statistics</structname>から<structfield>unique1</structfield>の度数分布を取り出します。
手作業で問い合わせる場合は、より単純な<structname>pg_stats</structname>ビューを検索した方が簡単です。

<programlisting>
SELECT histogram_bounds FROM pg_stats
WHERE tablename='tenk1' AND attname='unique1';

                   histogram_bounds
------------------------------------------------------
 {0,993,1997,3050,4040,5036,5957,7057,8029,9016,9995}
</programlisting>

<!--
   Next the fraction of the histogram occupied by <quote>&lt; 1000</quote>
   is worked out. This is the selectivity. The histogram divides the range
   into equal frequency buckets, so all we have to do is locate the bucket
   that our value is in and count <emphasis>part</emphasis> of it and
   <emphasis>all</emphasis> of the ones before. The value 1000 is clearly in
   the second bucket (993-1997).  Assuming a linear distribution of
   values inside each bucket, we can calculate the selectivity as:
-->
次に、<quote>&lt; 1000</quote>で占められる度数分布率を取り出します。
これが選択度です。
この度数分布は、範囲を等頻度のバケットに分割します。
ですので、行わなければならないことは、値が入るバケットを見つけ、その<emphasis>部分</emphasis>と、その前にあるバケット<emphasis>全体</emphasis>を数えることだけです。
1000という値は明らかに2番目のバケット（993 - 1997）にあります。
従って、値が各バケットの中で線形に分布していると仮定すると、選択度を以下のように計算することができます。

<programlisting>
selectivity = (1 + (1000 - bucket[2].min)/(bucket[2].max - bucket[2].min))/num_buckets
            = (1 + (1000 - 993)/(1997 - 993))/10
            = 0.100697
</programlisting>

<!--
   that is, one whole bucket plus a linear fraction of the second, divided by
   the number of buckets. The estimated number of rows can now be calculated as
   the product of the selectivity and the cardinality of
   <structname>tenk1</structname>:
-->
つまり、1つのバケット全体に、2番目のバケットとの線形比率を加えたものを、バケット数で割ったものとなります。
ここで、行の推定値は、選択度と<structname>tenk1</structname>の濃度を掛け合わせたものとして計算されます。

<programlisting>
rows = rel_cardinality * selectivity
     = 10000 * 0.100697
     = 1007  (rounding off)
</programlisting>
  </para>

  <para>
<!--
   Next let's consider an example with an equality condition in its
   <literal>WHERE</literal> clause:
-->
次に、<literal>WHERE</literal>句に等価条件を持つ例を検討してみましょう。

<programlisting>
EXPLAIN SELECT * FROM tenk1 WHERE stringu1 = 'CRAAAA';

                        QUERY PLAN
----------------------------------------------------------
 Seq Scan on tenk1  (cost=0.00..483.00 rows=30 width=244)
   Filter: (stringu1 = 'CRAAAA'::name)
</programlisting>

<!--
   Again the planner examines the <literal>WHERE</literal> clause condition
   and looks up the selectivity function for <literal>=</literal>, which is
   <function>eqsel</function>.  For equality estimation the histogram is
   not useful; instead the list of <firstterm>most
   common values</> (<acronym>MCV</acronym>s) is used to determine the
   selectivity. Let's have a look at the MCVs, with some additional columns
   that will be useful later:
-->
繰り返しますが、プランナは<literal>WHERE</literal>句の条件を検査し、<literal>=</literal>用の選択度関数、この場合は<function>eqsel</function>を検索します。
等価性の推定では、度数分布は役に立ちません。
代わりに、選択度の決定には<firstterm>最頻値</>（<acronym>MCV</acronym>）のリストが使用されます。
MCVを見てみましょう。
後で有用になる列がいくつかあります。

<programlisting>
SELECT null_frac, n_distinct, most_common_vals, most_common_freqs FROM pg_stats
WHERE tablename='tenk1' AND attname='stringu1';

null_frac         | 0
n_distinct        | 676
most_common_vals  | {EJAAAA,BBAAAA,CRAAAA,FCAAAA,FEAAAA,GSAAAA,JOAAAA,MCAAAA,NAAAAA,WGAAAA}
most_common_freqs | {0.00333333,0.003,0.003,0.003,0.003,0.003,0.003,0.003,0.003,0.003}

</programlisting>

<!--
   Since <literal>CRAAAA</> appears in the list of MCVs, the selectivity is
   merely the corresponding entry in the list of most common frequencies
   (<acronym>MCF</acronym>s):
-->
<literal>CRAAAA</>がMCVのリスト内にありますので、選択度は単に最頻度（<acronym>MCF</acronym>）のリスト内の対応する項目になります。

<programlisting>
selectivity = mcf[3]
            = 0.003
</programlisting>

<!--
   As before, the estimated number of rows is just the product of this with the
   cardinality of <structname>tenk1</structname>:
-->
前と同様、推定される行数は単に前回同様、この値と<structname>tenk1</structname>の濃度との積です。

<programlisting>
rows = 10000 * 0.003
     = 30
</programlisting>
  </para>

  <para>
<!--
   Now consider the same query, but with a constant that is not in the
   <acronym>MCV</acronym> list:
-->
ここで、同じ問い合わせを見てみます。
ただし、今回は定数が<acronym>MCV</acronym>内にありません。

<programlisting>
EXPLAIN SELECT * FROM tenk1 WHERE stringu1 = 'xxx';

                        QUERY PLAN
----------------------------------------------------------
 Seq Scan on tenk1  (cost=0.00..483.00 rows=15 width=244)
   Filter: (stringu1 = 'xxx'::name)
</programlisting>

<!--
   This is quite a different problem: how to estimate the selectivity when the
   value is <emphasis>not</emphasis> in the <acronym>MCV</acronym> list.
   The approach is to use the fact that the value is not in the list,
   combined with the knowledge of the frequencies for all of the
   <acronym>MCV</acronym>s:
-->
値が<acronym>MCV</acronym>の一覧に<emphasis>ない</emphasis>場合、選択度をどのように推定するかは大きく異なります。
値が一覧にない場合に使用される方法は、<acronym>MCV</acronym>すべての頻度に関する知識を組み合わせたものです。

<programlisting>
selectivity = (1 - sum(mvf))/(num_distinct - num_mcv)
            = (1 - (0.00333333 + 0.003 + 0.003 + 0.003 + 0.003 + 0.003 +
                    0.003 + 0.003 + 0.003 + 0.003))/(676 - 10)
            = 0.0014559
</programlisting>

<!--
   That is, add up all the frequencies for the <acronym>MCV</acronym>s and
   subtract them from one, then
   divide by the number of <emphasis>other</emphasis> distinct values.
   This amounts to assuming that the fraction of the column that is not any
   of the MCVs is evenly distributed among all the other distinct values.
   Notice that there are no null values so we don't have to worry about those
   (otherwise we'd subtract the null fraction from the numerator as well).
   The estimated number of rows is then calculated as usual:
-->
つまり、<acronym>MCV</acronym>の頻度をすべて足し合わせたものを1から差し引き、そして、<emphasis>この他の</emphasis>個別値の数で除算します。
これは、MCV以外の列の割合は、この他の個別値すべてに渡って一様に分布していることを前提としていることになります。
NULL値が存在しないため、これを考慮する必要がないことに注意してください。
（さもなくば、分子から同様にNULLの割合を差し引くことになります。）
推定行数は以下のように普通に計算されます。

<programlisting>
rows = 10000 * 0.0014559
     = 15  (rounding off)
</programlisting>
  </para>

  <para>
<!--
   The previous example with <literal>unique1 &lt; 1000</> was an
   oversimplification of what <function>scalarltsel</function> really does;
   now that we have seen an example of the use of MCVs, we can fill in some
   more detail.  The example was correct as far as it went, because since
   <structfield>unique1</> is a unique column it has no MCVs (obviously, no
   value is any more common than any other value).  For a non-unique
   column, there will normally be both a histogram and an MCV list, and
   <emphasis>the histogram does not include the portion of the column
   population represented by the MCVs</>.  We do things this way because
   it allows more precise estimation.  In this situation
   <function>scalarltsel</function> directly applies the condition (e.g.,
   <quote>&lt; 1000</>) to each value of the MCV list, and adds up the
   frequencies of the MCVs for which the condition is true.  This gives
   an exact estimate of the selectivity within the portion of the table
   that is MCVs.  The histogram is then used in the same way as above
   to estimate the selectivity in the portion of the table that is not
   MCVs, and then the two numbers are combined to estimate the overall
   selectivity.  For example, consider
-->
前述の<literal>unique1 &lt; 1000</>を使用した例は<function>scalarltsel</function>が本当は何を行うかについて、単純化しすぎたものでした。
ここまでで、MCVを使用した例を見てきましたので、多少詳細に補てんすることができます。
<structfield>unique1</>は一意な列であるため、MCVが存在しません（ある値が他の値と同じとなることがないことは明確です）ので、例は計算自体は正確なものでした。
一意ではない列では、通常度数分布とMCVリストの両方が存在します。
そして、<emphasis>度数分布は、MCVで表される列母集団の位置を含みません。</>
より正確な推定を行うことができるため、この方法を行います。
この状況では、<function>scalarltsel</function>は直接条件（例えば<quote>&lt; 1000</>）をMCVリストの各値に適用し、条件を満たすMCVの頻度を足し合わせます。
これがMCVのテーブル部分における正確な推定選択度です。
その後度数分布が上と同様に使われ、MCV以外のテーブル部分における選択度を推定します。
そしてこの2つの値を組み合わせて、全体の選択度を推定します。
例えば、以下を検討します。

<programlisting>
EXPLAIN SELECT * FROM tenk1 WHERE stringu1 &lt; 'IAAAAA';

                         QUERY PLAN
------------------------------------------------------------
 Seq Scan on tenk1  (cost=0.00..483.00 rows=3077 width=244)
   Filter: (stringu1 &lt; 'IAAAAA'::name)
</programlisting>

<!--
   We already saw the MCV information for <structfield>stringu1</>,
   and here is its histogram:
-->
すでに<structfield>stringu1</>のMCV情報は確認していますので、ここでは度数分布を見てみます。

<programlisting>
SELECT histogram_bounds FROM pg_stats
WHERE tablename='tenk1' AND attname='stringu1';

                                histogram_bounds
--------------------------------------------------------------------------------
 {AAAAAA,CQAAAA,FRAAAA,IBAAAA,KRAAAA,NFAAAA,PSAAAA,SGAAAA,VAAAAA,XLAAAA,ZZAAAA}
</programlisting>

<!--
   Checking the MCV list, we find that the condition <literal>stringu1 &lt;
   'IAAAAA'</> is satisfied by the first six entries and not the last four,
   so the selectivity within the MCV part of the population is
-->
MCVリストを検査すると、<literal>stringu1 &lt; 'IAAAAA'</>条件は先頭の6項目で満たされ、最後の4項目で満たされないことがわかります。
ですので、母集団のMCV部分における選択度は以下のようになります。

<programlisting>
selectivity = sum(relevant mvfs)
            = 0.00333333 + 0.003 + 0.003 + 0.003 + 0.003 + 0.003
            = 0.01833333
</programlisting>

<!--
   Summing all the MCFs also tells us that the total fraction of the
   population represented by MCVs is 0.03033333, and therefore the
   fraction represented by the histogram is 0.96966667 (again, there
   are no nulls, else we'd have to exclude them here).  We can see
   that the value <literal>IAAAAA</> falls nearly at the end of the
   third histogram bucket.  Using some rather cheesy assumptions
   about the frequency of different characters, the planner arrives
   at the estimate 0.298387 for the portion of the histogram population
   that is less than <literal>IAAAAA</>.  We then combine the estimates
   for the MCV and non-MCV populations:
-->
MCFの総和はまた、MCVで表される母集団の合計割合が0.03033333であり、したがって度数分布で表される割合が0.96966667であることがわかります。
（繰り返しますが、NULLは存在しません。もし存在する場合はここで除外しなければなりません。）
<literal>IAAAAA</>という値は3番目のバケットの終端近辺になることを確認することができます。
異なる文字の頻度について多少安っぽい仮定を使用すると、プランナは<literal>IAAAAA</>より小さい母集団の度数分布の部分の推定値は0.298387になります。
そしてMCVと非MCV母集団についての推定値を組み合わせます。

<programlisting>
selectivity = mcv_selectivity + histogram_selectivity * histogram_fraction
            = 0.01833333 + 0.298387 * 0.96966667
            = 0.307669

rows        = 10000 * 0.307669
            = 3077  (rounding off)
</programlisting>

<!--
   In this particular example, the correction from the MCV list is fairly
   small, because the column distribution is actually quite flat (the
   statistics showing these particular values as being more common than
   others are mostly due to sampling error).  In a more typical case where
   some values are significantly more common than others, this complicated
   process gives a useful improvement in accuracy because the selectivity
   for the most common values is found exactly.
-->
列の分布がかなり平坦ですので、この特定の例におけるMCVリストによる訂正はかなり小さなものです。
（これらの特定の値が他より頻出するものと示す統計情報はほとんどサンプリングエラーによります。）
より一般的な、一部の値が他より非常に多く頻出する場合では、最頻値に対する選択度が正確に検出されますので、この複雑な処理により精度が改良されます。
  </para>

  <para>
<!--
   Now let's consider a case with more than one
   condition in the <literal>WHERE</literal> clause:
-->
次に<literal>WHERE</literal>句に複数の条件を持つ場合を検討しましょう。

<programlisting>
EXPLAIN SELECT * FROM tenk1 WHERE unique1 &lt; 1000 AND stringu1 = 'xxx';

                                   QUERY PLAN
--------------------------------------------------------------------------------
 Bitmap Heap Scan on tenk1  (cost=23.80..396.91 rows=1 width=244)
   Recheck Cond: (unique1 &lt; 1000)
   Filter: (stringu1 = 'xxx'::name)
   -&gt;  Bitmap Index Scan on tenk1_unique1  (cost=0.00..23.80 rows=1007 width=0)
         Index Cond: (unique1 &lt; 1000)
</programlisting>

<!--
   The planner assumes that the two conditions are independent, so that
   the individual selectivities of the clauses can be multiplied together:
-->
プランナは2つの条件が独立していると仮定します。
このため、個々の句の選択度が掛け合わされます。

<programlisting>
selectivity = selectivity(unique1 &lt; 1000) * selectivity(stringu1 = 'xxx')
            = 0.100697 * 0.0014559
            = 0.0001466

rows        = 10000 * 0.0001466
            = 1  (rounding off)
</programlisting>

<!--
   Notice that the number of rows estimated to be returned from the bitmap
   index scan reflects only the condition used with the index; this is
   important since it affects the cost estimate for the subsequent heap
   fetches.
-->
ビットマップインデックススキャンにより返されるものと推定される行数は、インデックスで使用される条件のみを反映することに注意してください。
後続のヒープ取り出しのコスト推定に影響しますので、これは重要です。
  </para>

  <para>
<!--
   Finally we will examine a query that involves a join:
-->
最後に、結合を含む問い合わせを見てみましょう。

<programlisting>
EXPLAIN SELECT * FROM tenk1 t1, tenk2 t2
WHERE t1.unique1 &lt; 50 AND t1.unique2 = t2.unique2;

                                      QUERY PLAN
--------------------------------------------------------------------------------------
 Nested Loop  (cost=4.64..456.23 rows=50 width=488)
   -&gt;  Bitmap Heap Scan on tenk1 t1  (cost=4.64..142.17 rows=50 width=244)
         Recheck Cond: (unique1 &lt; 50)
         -&gt;  Bitmap Index Scan on tenk1_unique1  (cost=0.00..4.63 rows=50 width=0)
               Index Cond: (unique1 &lt; 50)
   -&gt;  Index Scan using tenk2_unique2 on tenk2 t2  (cost=0.00..6.27 rows=1 width=244)
         Index Cond: (unique2 = t1.unique2)
</programlisting>

<!--
   The restriction on <structname>tenk1</structname>,
   <literal>unique1 &lt; 50</literal>,
   is evaluated before the nested-loop join.
   This is handled analogously to the previous range example.  This time the
   value 50 falls into the first bucket of the
   <structfield>unique1</structfield> histogram:
-->
<structname>tenk1</structname> <quote>unique1 &lt; 50</quote>に関する制限が、入れ子状ループ結合の前に評価されます。
これは、前の範囲に関する例と同様に扱われます。
しかし、今回の値50は<structfield>unique1</structfield>度数分布の最初のバケットにありますので、以下のようになります。

<programlisting>
selectivity = (0 + (50 - bucket[1].min)/(bucket[1].max - bucket[1].min))/num_buckets
            = (0 + (50 - 0)/(993 - 0))/10
            = 0.005035

rows        = 10000 * 0.005035
            = 50  (rounding off)
</programlisting>

<!--
   The restriction for the join is <literal>t2.unique2 = t1.unique2</>.
   The operator is just
   our familiar <literal>=</literal>, however the selectivity function is
   obtained from the <structfield>oprjoin</structfield> column of
   <structname>pg_operator</structname>, and is <function>eqjoinsel</function>.
   <function>eqjoinsel</function> looks up the statistical information for both
   <structname>tenk2</structname> and <structname>tenk1</structname>:
-->
結合の制限は<literal>t2.unique2 = t1.unique2</>です。
演算子はよく使用する単なる<literal>=</literal>ですが、選択度関数は<structname>pg_operator</structname>の<structfield>oprjoin</structfield>列から入手され、<function>eqjoinsel</function>となります。
<function>eqjoinsel</function>は<structname>tenk2</structname>および<structname>tenk1</structname>の両方の統計情報を検索します。

<programlisting>
SELECT tablename, null_frac,n_distinct, most_common_vals FROM pg_stats
WHERE tablename IN ('tenk1', 'tenk2') AND attname='unique2';

tablename  | null_frac | n_distinct | most_common_vals
-----------+-----------+------------+------------------
 tenk1     |         0 |         -1 |
 tenk2     |         0 |         -1 |
</programlisting>

<!--
   In this case there is no <acronym>MCV</acronym> information for
   <structfield>unique2</structfield> because all the values appear to be
   unique, so we use an algorithm that relies only on the number of
   distinct values for both relations together with their null fractions:
-->
今回の場合、すべての値が一意であるため、<structfield>unique2</structfield>に関する<acronym>MCV</acronym>情報がありません。
ですので、両リレーションの個別値数とNULL値の部分のみに依存したアルゴリズムを使用することができます。

<programlisting>
selectivity = (1 - null_frac1) * (1 - null_frac2) * min(1/num_distinct1, 1/num_distinct2)
            = (1 - 0) * (1 - 0) / max(10000, 10000)
            = 0.0001
</programlisting>

<!--
   This is, subtract the null fraction from one for each of the relations,
   and divide by the maximum of the numbers of distinct values.
   The number of rows
   that the join is likely to emit is calculated as the cardinality of the
   Cartesian product of the two inputs, multiplied by the
   selectivity:
-->
これは、各リレーションにおいて、1からNULL部分を差し引き、個別値数の最大値で割った値です。
この結合が生成するはずの行数は、2つの入力のデカルト積の濃度に、この選択度を掛けたものとして計算されます。

<programlisting>
rows = (outer_cardinality * inner_cardinality) * selectivity
     = (50 * 10000) * 0.0001
     = 50
</programlisting>
  </para>

  <para>
<!--
   Had there been MCV lists for the two columns,
   <function>eqjoinsel</function> would have used direct comparison of the MCV
   lists to determine the join selectivity within the part of the column
   populations represented by the MCVs.  The estimate for the remainder of the
   populations follows the same approach shown here.
-->
2つの列に対するMCVリストがありますので、<function>eqjoinsel</function>はMCVで表される列母集団部分の結合選択度を決めるために、MCVリストを直接比較します。
残りの母集団に対する推定はここで示した同じ手法に従います。
  </para>

  <para>
<!--
   Notice that we showed <literal>inner_cardinality</> as 10000, that is,
   the unmodified size of <structname>tenk2</>.  It might appear from
   inspection of the <command>EXPLAIN</> output that the estimate of
   join rows comes from 50 * 1, that is, the number of outer rows times
   the estimated number of rows obtained by each inner index scan on
   <structname>tenk2</>.  But this is not the case: the join relation size
   is estimated before any particular join plan has been considered.  If
   everything is working well then the two ways of estimating the join
   size will produce about the same answer, but due to round-off error and
   other factors they sometimes diverge significantly.
-->
<literal>inner_cardinality</>を10000、つまり<structname>tenk2</>の変更がないサイズと示していることに注意してください。
<command>EXPLAIN</>の出力を検査すると、結合行の推定が50 * 1、つまり、外側の行数と<structname>tenk2</>上の内側のインデックススキャン毎に得られる推定行数を掛けた数から来ていると思うかもしれません。
しかし、実際はそうではありません。
結合リレーションサイズは、具体的な結合計画が検討される前に推定されます。
もしすべてがうまくいけば、結合サイズを推定する2つの方法は同じ答えを導きます。
しかし、四捨五入誤差などの要因により多少異なる場合があります。
  </para>

  <para>
<!--
   For those interested in further details, estimation of the size of
   a table (before any <literal>WHERE</> clauses) is done in
   <filename>src/backend/optimizer/util/plancat.c</filename>. The generic
   logic for clause selectivities is in
   <filename>src/backend/optimizer/path/clausesel.c</filename>.  The
   operator-specific selectivity functions are mostly found
   in <filename>src/backend/utils/adt/selfuncs.c</filename>.
-->
詳細に興味を持った方向けに、テーブル（すべての<literal>WHERE</>句の前にあるもの）のサイズ推定は<filename>src/backend/optimizer/util/plancat.c</filename>で行われます。
句の選択度に関する一般的なロジックについては<filename>src/backend/optimizer/path/clausesel.c</filename>にあります。
演算子固有の選択度関数についてはたいてい<filename>src/backend/utils/adt/selfuncs.c</filename>内にあります。
  </para>

 </sect1>

</chapter>
