<!-- doc/src/sgml/bgworker.sgml -->

<chapter id="bgworker">
 <title>Background Worker Processes</title>

 <indexterm zone="bgworker">
  <primary>Background workers</primary>
 </indexterm>

 <para>
<!--
  PostgreSQL can be extended to run user-supplied code in separate processes.
  Such processes are started, stopped and monitored by <command>postgres</command>,
  which permits them to have a lifetime closely linked to the server's status.
  These processes have the option to attach to <productname>PostgreSQL</>'s
  shared memory area and to connect to databases internally; they can also run
  multiple transactions serially, just like a regular client-connected server
  process.  Also, by linking to <application>libpq</> they can connect to the
  server and behave like a regular client application.
-->
PostgreSQLは別々のプロセスでユーザ提供のコードが実行されるように、拡張することができます。
これらのプロセスは<command>postgres</command>によって起動、終了、監視され、サーバの状況に密接に関係している生存期間を持たせます。
これらのプロセスは<productname>PostgreSQL</>の共有メモリ領域に割り当てられたり、内部的にデータベースに接続するオプションを持っています。これらのプロセスはまた、まさにクライアントが接続された実際のサーバプロセスのように別々に複数のトランザクションを実行することができます。また、<application>libpq</>と連携することによって、これらはサーバに接続可能となり、実際のクライアントアプリケーションのように振る舞うことが出来ます。


 </para>

 <warning>
  <para>
<!--
   There are considerable robustness and security risks in using background
   worker processes because, being written in the <literal>C</> language,
   they have unrestricted access to data.  Administrators wishing to enable
   modules that include background worker process should exercise extreme
   caution.  Only carefully audited modules should be permitted to run
   background worker processes.
-->
バックグラウンドワーカーを使うにあたっては、堅牢性とセキュリティリスクを考慮しなくてはなりません。なぜならば、<literal>C</>言語で書かれており、データへのアクセスが制限されていないためです。バックグラウンドワーカープロセスを有効にしたいと思っている管理者は厳重に注意して実践すべきです。注意深く検査されたモジュールだけが、バックグラウンドワーカープロセスの実行を許されるべきです。
  </para>
 </warning>

 <para>
<!--
  Only modules listed in <varname>shared_preload_libraries</> can run
  background workers.  A module wishing to run a background worker needs
  to register it by calling
  <function>RegisterBackgroundWorker(<type>BackgroundWorker *worker</type>)</function>
  from its <function>_PG_init()</>.
  The structure <structname>BackgroundWorker</structname> is defined thus:
-->
<varname>shared_preload_libraries</>に記されたモジュールのみバックグラウンドワーカーを実行できます。バックグラウンドを実行したいモジュールは<function>_PG_init()</>から<function>RegisterBackgroundWorker(<type>BackgroundWorker *worker</type>)</function>を呼び出すことによって、登録する必要があります。
その構造、<structname>BackgroundWorker</structname>は以下のように定義されます。

<programlisting>
typedef void (*bgworker_main_type)(void *main_arg);
typedef struct BackgroundWorker
{
    char        bgw_name[BGW_MAXLEN];
    int         bgw_flags;
    BgWorkerStartTime bgw_start_time;
<!--    int         bgw_restart_time;       /* in seconds, or BGW_NEVER_RESTART */ -->
    int         bgw_restart_time;       /* 秒単位、もしくは、BGW_NEVER_RESTART */
    bgworker_main_type bgw_main;
    Datum       bgw_main_arg;
} BackgroundWorker;
</programlisting>
  </para>

  <para>
<!--
   <structfield>bgw_name</> is a string to be used in log messages, process
   listings and similar contexts.
-->
<structfield>bgw_name</>は、ログメッセージ、プロセス一覧、類似した機能で使用される文字列です。

  </para>

  <para>
<!--
   <structfield>bgw_flags</> is a bitwise-or'd bitmask indicating the
   capabilities that the module wants.  Possible values are
   <literal>BGWORKER_SHMEM_ACCESS</literal> (requesting shared memory access)
   and <literal>BGWORKER_BACKEND_DATABASE_CONNECTION</literal> (requesting the
   ability to establish a database connection, through which it can later run
   transactions and queries). A background worker using
   <literal>BGWORKER_BACKEND_DATABASE_CONNECTION</literal> to connect to
   a database must also attach shared memory using
   <literal>BGWORKER_SHMEM_ACCESS</literal>, or worker start-up will fail.
-->
<structfield>bgw_flags</>は、モジュールが要求する機能を示すビット値もしくはビットマスクです。可能な値は<literal>BGWORKER_SHMEM_ACCESS</literal> (共有メモリへのアクセスを要求します)と<literal>BGWORKER_BACKEND_DATABASE_CONNECTION</literal>(データベース接続を確立し、その後、トランザクションやクエリの実行ができます)です。データベースに接続するために<literal>BGWORKER_BACKEND_DATABASE_CONNECTION</literal>を使っているバックグラウンドワーカーもまた、<literal>BGWORKER_SHMEM_ACCESS</literal>を使って共有メモリに接続します、もしくはワーカーの起動に失敗します。
  </para>

  <para>
<!--
   <structfield>bgw_start_time</structfield> is the server state during which
   <command>postgres</> should start the process; it can be one of
   <literal>BgWorkerStart_PostmasterStart</> (start as soon as
   <command>postgres</> itself has finished its own initialization; processes
   requesting this are not eligible for database connections),
   <literal>BgWorkerStart_ConsistentState</> (start as soon as a consistent state
   has been reached in a hot standby, allowing processes to connect to
   databases and run read-only queries), and
   <literal>BgWorkerStart_RecoveryFinished</> (start as soon as the system has
   entered normal read-write state).  Note the last two values are equivalent
   in a server that's not a hot standby.  Note that this setting only indicates
   when the processes are to be started; they do not stop when a different state
   is reached.
-->
<structfield>bgw_start_time</structfield>は、<command>postgres</>がプロセスを起動すべきときのサーバの状態です。その状態は、<literal>BgWorkerStart_PostmasterStart</> (<command>postgres</>自身が初期化を終えるとすぐに起動します。これを要求するプロセスはデータベース接続に望ましいものではありません。)、<literal>BgWorkerStart_ConsistentState</> (ホットスタンバイにおいて一貫性のある状態に到達すると、つまり、プロセスがデータベースに接続し、参照のみのクエリを実行するのを許可する状態になると起動します。)、<literal>BgWorkerStart_RecoveryFinished</> (システムが参照/更新クエリを実行すると起動します。)のうちの一つです。この設定はいつプロセスが起動されるかを示すだけであることに注意してください。これらのプロセスは、違う状態になったときに停止するわけではありません。
  </para>

  <para>
<!--
   <structfield>bgw_restart_time</structfield> is the interval, in seconds, that
   <command>postgres</command> should wait before restarting the process, in
   case it crashes.  It can be any positive value,
   or <literal>BGW_NEVER_RESTART</literal>, indicating not to restart the
   process in case of a crash.
-->
<structfield>bgw_restart_time</structfield>は、プロセスがクラッシュした場合に<command>postgres</command>がそのプロセスを再起動するために待つべき間隔を秒単位で指定するものです。あらゆる正の数、もしくはクラッシュした場合に再起動させないことを示す<literal>BGW_NEVER_RESTART</literal>を指定できます。
  </para>

  <para>
<!--
   <structfield>bgw_main</structfield> is a pointer to the function to run when
   the process is started.  This function must take a single argument of type
   <type>void *</> and return <type>void</>.
   <structfield>bgw_main_arg</structfield> will be passed to it as its only
   argument.  Note that the global variable <literal>MyBgworkerEntry</literal>
   points to a copy of the <structname>BackgroundWorker</structname> structure
   passed at registration time.
-->
<structfield>bgw_main</structfield>は、プロセスが起動されたときに実行される関数へのポインタである。この関数は<type>void *</>型の引数を一つとり、<type>void</>を返さなければなりません。
<structfield>bgw_main_arg</structfield>はその唯一の引数として、渡されます。グローバル変数である<literal>MyBgworkerEntry</literal>は、登録時に渡される<structname>BackgroundWorker</structname>構造体のコピーを指すことに注意してください。
  </para>

  <para>
<!--
   Once running, the process can connect to a database by calling
   <function>BackgroundWorkerInitializeConnection(<parameter>char *dbname</parameter>, <parameter>char *username</parameter>)</function>.
   This allows the process to run transactions and queries using the
   <literal>SPI</literal> interface.  If <varname>dbname</> is NULL,
   the session is not connected to any particular database, but shared catalogs
   can be accessed.  If <varname>username</> is NULL, the process will run as
   the superuser created during <command>initdb</>.
   BackgroundWorkerInitializeConnection can only be called once per background
   process, it is not possible to switch databases.
-->
ひとたび実行すると、このプロセスは<function>BackgroundWorkerInitializeConnection(<parameter>char *dbname</parameter>, <parameter>char *username</parameter>)</function>を呼び出すことによって、データベースへ接続できます。
これはプロセスに<literal>SPI</literal>を使用してのトランザクションとクエリの実行を許します。もし、<varname>dbname</> がNULLであった場合、そのセッションは特定のデータベースに接続しません。しかし、共有カタログにはアクセスできます。もし、<varname>username</>がNULLの場合、そのプロセスは<command>initdb</>時に作成されたスーパーユーザーとして実行されます。
BackgroundWorkerInitializeConnectionは、バックグラウンドワーカーごとに一度のみ呼ぶことができ、これはデータベースを切り替えることができません。
  </para>

  <para>
<!--
   Signals are initially blocked when control reaches the
   <structfield>bgw_main</> function, and must be unblocked by it; this is to
   allow the process to customize its signal handlers, if necessary.
   Signals can be unblocked in the new process by calling
   <function>BackgroundWorkerUnblockSignals</> and blocked by calling
   <function>BackgroundWorkerBlockSignals</>.
-->
制御が<structfield>bgw_main</>関数に達したとき、シグナルはまずブロックされます。このブロックは解除されなければなりません。このことは、必要があれば、プロセスにそのシグナルハンドラを変更することができることを意味します。シグナルは新しいプロセスで<function>BackgroundWorkerUnblockSignals</>を呼び出すことにより、解除でき、<function>BackgroundWorkerBlockSignals</>を呼び出すことでブロックできます。
  </para>

  <para>
<!--
   Background workers are expected to be continuously running; if they exit
   cleanly, <command>postgres</> will restart them immediately.  Consider doing
   interruptible sleep when they have nothing to do; this can be achieved by
   calling <function>WaitLatch()</function>.  Make sure the
   <literal>WL_POSTMASTER_DEATH</> flag is set when calling that function, and
   verify the return code for a prompt exit in the emergency case that
   <command>postgres</> itself has terminated.
-->
バックグラウンドワーカーは継続的に実行されていることが期待されています。もしバックグラウンドワーカーが正常に終了した場合、<command>postgres</>はそれらをすぐに再実行します。
バックグラウンドワーカーが何もすることがないときは、割り込み可能な休止状態にすることを考慮しないといけません。これは<function>WaitLatch()</function>を呼び出すことによって可能になります。
この関数を呼んだときに、<literal>WL_POSTMASTER_DEATH</>フラグが設定され、<command>postgres</>自身が終了する緊急事態には、リターンコードを確認するようにしてください。
  </para>

  <para>
<!--
   The <filename>worker_spi</> contrib module contains a working example,
   which demonstrates some useful techniques.
-->
バックグラウンドワーカーの例として、<filename>worker_spi</>というオプションモジュールがあります。これはいくつかの有用な技術を示します。
  </para>
</chapter>
