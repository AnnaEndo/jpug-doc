<!-- doc/src/sgml/postgres-fdw.sgml -->

<sect1 id="postgres-fdw" xreflabel="postgres_fdw">
 <title>postgres_fdw</title>

 <indexterm zone="postgres-fdw">
  <primary>postgres_fdw</primary>
 </indexterm>

 <para>
<!--
  The <filename>postgres_fdw</> module provides the foreign-data wrapper
  <literal>postgres_fdw</literal>, which can be used to access data
  stored in external <productname>PostgreSQL</productname> servers.
-->
<filename>postgres_fdw</>モジュールは、外部の<productname>PostgreSQL</productname>サーバに格納されたデータをアクセスするために使用する、<literal>postgres_fdw</literal>外部データラッパを提供します。
 </para>

 <para>
<!--
  The functionality provided by this module overlaps substantially
  with the functionality of the older <xref linkend="dblink"> module.
  But <filename>postgres_fdw</> provides more transparent and
  standards-compliant syntax for accessing remote tables, and can give
  better performance in many cases.
-->
実質上、本モジュールの提供する機能は以前の<xref linkend="dblink">モジュールが提供する機能と重複していますが、<filename>postgres_fdw</>はリモートのテーブルにアクセスするためにより透過的で標準に準拠した構文を利用できるほか、多くの場合においてより良い性能を得る事ができます。
 </para>

 <para>
<!--
  To prepare for remote access using <filename>postgres_fdw</>:
-->
<filename>postgres_fdw</>を使用したリモートアクセスを準備するには:
  <orderedlist spacing="compact">
   <listitem>
    <para>
<!--
     Install the  <filename>postgres_fdw</> extension using <xref
     linkend="sql-createextension">.
-->
<xref linkend="sql-createextension">を使用して<filename>postgres_fdw</>拡張をインストールしてください。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     Create a foreign server object, using <xref linkend="sql-createserver">,
     to represent each remote database you want to connect to.
     Specify connection information, except <literal>user</literal> and
     <literal>password</literal>, as options of the server object.
-->
<xref linkend="sql-createserver">を使用して、接続しようとする各リモートデータベースを定義する外部サーバオブジェクトを作成してください。
<literal>user</literal>および<literal>password</literal>を除く接続パラメータを、外部サーバオブジェクトのオプションとして指定します。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     Create a user mapping, using <xref linkend="sql-createusermapping">, for
     each database user you want to allow to access each foreign server.
     Specify the remote user name and password to use as
     <literal>user</literal> and <literal>password</literal> options of the
     user mapping.
-->
<xref linkend="sql-createusermapping">を使用して、外部サーバへのアクセスを許可するデータベースユーザごとにユーザマッピングを作成します。
ユーザマッピングの<literal>user</literal>および<literal>password</literal>オプションを使用してリモートユーザのためのユーザ名とパスワードを指定します。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     Create a foreign table, using <xref linkend="sql-createforeigntable">,
     for each remote table you want to access.  The columns of the foreign
     table must match the referenced remote table.  You can, however, use
     table and/or column names different from the remote table's, if you
     specify the correct remote names as options of the foreign table object.
-->
<xref linkend="sql-createforeigntable">を使用して、アクセスしたいリモートテーブルごとに外部テーブルを作成します。
外部テーブルのカラム定義は被参照側のリモートテーブルに一致していなければなりません。
しかしながら、外部テーブルのオプションとして正しいリモートの名前を外部テーブルのオプションに指定すれば、テーブルおよびカラム名はリモートのものと異なった名前を付ける事ができます。
    </para>
   </listitem>
  </orderedlist>
 </para>

 <para>
<!--
  Now you need only <command>SELECT</> from a foreign table to access
  the data stored in its underlying remote table.  You can also modify
  the remote table using <command>INSERT</>, <command>UPDATE</>, or
  <command>DELETE</>.  (Of course, the remote user you have specified
  in your user mapping must have privileges to do these things.)
-->
今のところ、リモートテーブルに格納されているデータにアクセスするには少なくとも外部テーブルに対する<command>SELECT</>権限が必要です。
また、<command>INSERT</>や<command>UPDATE</>、<command>DELETE</>を使用してリモートテーブルを操作する事もできます。
（もちろん、ユーザマッピングで指定されたリモートユーザは、これらの操作を実行する権限を有している必要があります）
 </para>

 <para>
<!--
  It is generally recommended that the columns of a foreign table be declared
  with exactly the same data types, and collations if applicable, as the
  referenced columns of the remote table.  Although <filename>postgres_fdw</>
  is currently rather forgiving about performing data type conversions at
  need, surprising semantic anomalies may arise when types or collations do
  not match, due to the remote server interpreting <literal>WHERE</> clauses
  slightly differently from the local server.
-->
一般的な推奨事項として、可能であれば外部テーブルのカラムを、被参照側のリモートテーブル側のカラムと全く同一のデータ型および照合順序によって定義してください。
<filename>postgres_fdw</>は必要に応じてデータ型の変換を行いますが、リモートサーバがローカルサーバとは少々違った<literal>WHERE</>句の解釈を行うため、データ型や照合順序が一致していないと、時には予期しない結果を得る事があるかもしれません。
 </para>

 <para>
<!--
  Note that a foreign table can be declared with fewer columns, or with a
  different column order, than its underlying remote table has.  Matching
  of columns to the remote table is by name, not position.
-->
リモートテーブルより少ないカラム数で、あるいは異なった順序であっても外部テーブルを定義できる事に留意してください。
リモートテーブル側のカラムとの対応付けは、その位置ではなく、名前によって行われます。
 </para>

 <sect2>
<!--
  <title>FDW Options of postgres_fdw</title>
-->
  <title>postgres_fdwの外部データラッパオプション</title>

  <sect3>
<!--
   <title>Connection Options</title>
-->
   <title>接続オプション</title>

   <para>
<!--
    A foreign server using the <filename>postgres_fdw</> foreign data wrapper
    can have the same options that <application>libpq</> accepts in
    connection strings, as described in <xref linkend="libpq-paramkeywords">,
    except that these options are not allowed:
-->
<filename>postgres_fdw</>外部データラッパを使用する外部サーバは、以下に記すものを除き、<xref linkend="libpq-paramkeywords">に記載されている<application>libpq</>が接続文字列としてサポートするものと同一のオプションを使用する事ができます。

    <itemizedlist spacing="compact">
     <listitem>
      <para>
<!--
       <literal>user</literal> and <literal>password</literal> (specify these
       for a user mapping, instead)
-->
       <literal>user</literal> および <literal>password</literal>
       （これらは代わりにユーザマッピングのオプションとして指定します）
      </para>
     </listitem>
     <listitem>
      <para>
<!--
       <literal>client_encoding</> (this is automatically set from the local
       server encoding)
-->
       <literal>client_encoding</>
       （これはローカルサーバのエンコーディングが自動的にセットされます）
      </para>
     </listitem>
     <listitem>
      <para>
<!--
       <literal>fallback_application_name</> (always set to
       <literal>postgres_fdw</>)
-->
       <literal>fallback_application_name</>
       （自動的に<literal>postgres_fdw</>とセットされます）
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <para>
<!--
    Only superusers may connect to foreign servers without password
    authentication, so always specify the <literal>password</literal> option
    for user mappings belonging to non-superusers.
-->
特権ユーザのみが外部サーバに対してパスワードなしの認証で接続できます。
したがって、非特権ユーザのユーザマッピングには<literal>password</literal>を必ず指定するようにして下さい。
   </para>
  </sect3>

  <sect3>
<!--
   <title>Object Name Options</title>
-->
   <title>オブジェクト名オプション</title>

   <para>
<!--
    These options can be used to control the names used in SQL statements
    sent to the remote <productname>PostgreSQL</productname> server.  These
    options are needed when a foreign table is created with names different
    from the underlying remote table's names.
-->
これらのオプションによりリモートの<productname>PostgreSQL</productname>サーバに送出されるSQL文で使用される名前を制御する事ができます。
外部テーブルがリモートテーブルとは異なった名前で定義されている場合、これらのオプションは必須です。
   </para>

   <variablelist>

    <varlistentry>
     <term><literal>schema_name</literal></term>
     <listitem>
      <para>
<!--
       This option, which can be specified for a foreign table, gives the
       schema name to use for the foreign table on the remote server.  If this
       option is omitted, the name of the foreign table's schema is used.

       (訳注) to use for the foreign table on... は remote table の間違い。
-->
外部テーブルに対して指定できるこのオプションは、リモートサーバ上のリモートテーブルのスキーマ名を与えます。
省略された場合、外部テーブルのスキーマ名が使用されます。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>table_name</literal></term>
     <listitem>
      <para>
<!--
       This option, which can be specified for a foreign table, gives the
       table name to use for the foreign table on the remote server.  If this
       option is omitted, the foreign table's name is used.
-->
外部テーブルに対して指定できるこのオプションは、リモートサーバ上のリモートテーブル名を与えます。
省略された場合、外部テーブルのテーブル名が使用されます。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>column_name</literal></term>
     <listitem>
      <para>
<!--
       This option, which can be specified for a column of a foreign table,
       gives the column name to use for the column on the remote server.
       If this option is omitted, the column's name is used.
-->
外部テーブルのカラムに対して指定できるこのオプションは、リモートサーバ上のカラム名を与えます。
省略された場合、外部テーブルのカラム名が使用されます。
      </para>
     </listitem>
    </varlistentry>

   </variablelist>

  </sect3>

  <sect3>
<!--
   <title>Cost Estimation Options</title>
-->
   <title>コスト推定オプション</title>

   <para>
<!--
    <filename>postgres_fdw</> retrieves remote data by executing queries
    against remote servers, so ideally the estimated cost of scanning a
    foreign table should be whatever it costs to be done on the remote
    server, plus some overhead for communication.  The most reliable way to
    get such an estimate is to ask the remote server and then add something
    for overhead &mdash; but for simple queries, it may not be worth the cost
    of an additional remote query to get a cost estimate.
    So <filename>postgres_fdw</> provides the following options to control
    how cost estimation is done:
-->
<filename>postgres_fdw</>はリモートサーバに対するクエリを実行しリモートのデータを受信します。したがって、理想的には外部テーブルをスキャンする推定コストは、それをリモートサーバで実行するコストと通信オーバーヘッドの和となります。
この推定を行うための最も信頼できる方法は、リモートサーバに問い合わせを行い、その結果にオーバーヘッド分を加算する事ですが、小さいクエリではコスト推定を得るための追加的な問合せに要するコストに見合わないかもしれません。
そこで、どのようにコスト推定を行うかを制御するため、<filename>postgres_fdw</>は以下のようなオプションを提供します。
   </para>

   <variablelist>

    <varlistentry>
     <term><literal>use_remote_estimate</literal></term>
     <listitem>
      <para>
<!--
       This option, which can be specified for a foreign table or a foreign
       server, controls whether <filename>postgres_fdw</> issues remote
       <command>EXPLAIN</command> commands to obtain cost estimates.
       A setting for a foreign table overrides any setting for its server,
       but only for that table.
       The default is <literal>false</literal>.
-->
外部テーブルまたは外部サーバに指定できるこのオプションは、コスト推定を得るために<filename>postgres_fdw</>がリモートの<command>EXPLAIN</command>コマンドを発行するかどうかを制御します。
外部テーブルに対する設定は、関連付けられた外部サーバに対する設定を上書きしますが、その効果は当該外部テーブルに限定されます。
デフォルト値は<literal>false</literal>です。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>fdw_startup_cost</literal></term>
     <listitem>
      <para>
<!--
       This option, which can be specified for a foreign server, is a numeric
       value that is added to the estimated startup cost of any foreign-table
       scan on that server.  This represents the additional overhead of
       establishing a connection, parsing and planning the query on the
       remote side, etc.
       The default value is <literal>100</literal>.
-->
外部テーブルまたは外部サーバに指定できるこのオプションは、当該外部サーバに関連付けられた全ての外部テーブルスキャンの推定開始コストに加算される数値です。
これは、接続の確立、リモート側でのクエリのパース・最適化など、追加的なオーバーヘッドを表現します。
デフォルト値は<literal>100</literal>です。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>fdw_tuple_cost</literal></term>
     <listitem>
      <para>
<!--
       This option, which can be specified for a foreign server, is a numeric
       value that is used as extra cost per-tuple for foreign-table
       scans on that server.  This represents the additional overhead of
       data transfer between servers.  You might increase or decrease this
       number to reflect higher or lower network delay to the remote server.
       The default value is <literal>0.01</literal>.
-->
外部サーバに指定できるこのオプションは、このサーバでの外部テーブルのスキャンにおいて、各タプル毎に発生する追加的なコストとして使用される数値です。
これは、サーバ間のデータ転送における追加的なオーバーヘッドを表現し、リモートサーバへのネットワーク遅延の高低を反映するためにこの数値を増減することができます。
デフォルト値は<literal>0.01</literal>です。
      </para>
     </listitem>
    </varlistentry>

   </variablelist>

   <para>
<!--
    When <literal>use_remote_estimate</literal> is true,
    <filename>postgres_fdw</> obtains row count and cost estimates from the
    remote server and then adds <literal>fdw_startup_cost</literal> and
    <literal>fdw_tuple_cost</literal> to the cost estimates.  When
    <literal>use_remote_estimate</literal> is false,
    <filename>postgres_fdw</> performs local row count and cost estimation
    and then adds <literal>fdw_startup_cost</literal> and
    <literal>fdw_tuple_cost</literal> to the cost estimates.  This local
    estimation is unlikely to be very accurate unless local copies of the
    remote table's statistics are available.  Running
    <xref linkend="sql-analyze"> on the foreign table is the way to update
    the local statistics; this will perform a scan of the remote table and
    then calculate and store statistics just as though the table were local.
    Keeping local statistics can be a useful way to reduce per-query planning
    overhead for a remote table &mdash; but if the remote table is
    frequently updated, the local statistics will soon be obsolete.
-->
<literal>use_remote_estimate</literal>が<literal>true</literal>の時、<filename>postgres_fdw</>はリモートサーバから行数とコスト推定値を取得し、それを<literal>fdw_startup_cost</literal>と<literal>fdw_tuple_cost</literal>に加算します。
一方、<literal>use_remote_estimate</literal>が<literal>false</literal>の時、<filename>postgres_fdw</>はローカルの行数とコスト推定値を取得し<literal>fdw_startup_cost</literal>と<literal>fdw_tuple_cost</literal>をコスト推定値に加算します。
このローカルな推定は、リモートテーブルの統計情報のローカルコピーが利用可能でないと、正確である見込みはほとんどありません。
ローカルな統計情報を更新するには外部テーブルに対する<xref linkend="sql-analyze">を実行します。これはリモートテーブルに対するスキャンを実行し、あたかもローカルなテーブルであるかのように統計情報の計算と保存を行います。
ローカルな統計情報を保存する事で、クエリの度にリモートテーブルの実行計画を作成するオーバヘッドを削減する事ができます。
しかしながら、リモートテーブルの更新頻度が高ければローカルの統計情報はすぐに実態を反映しなくなるでしょう。
   </para>

  </sect3>

  <sect3>
<!--
   <title>Updatability Options</title>
-->
   <title>更新機能オプション</title>

   <para>
<!--
    By default all foreign tables using <filename>postgres_fdw</> are assumed
    to be updatable.  This may be overridden using the following option:
-->
デフォルトでは<filename>postgres_fdw</>を使用する全ての外部テーブルは更新可能であると想定されます。以下のオプションにより、この挙動を上書きする事ができます。
   </para>

   <variablelist>

    <varlistentry>
     <term><literal>updatable</literal></term>
     <listitem>
      <para>
<!--
       This option controls whether <filename>postgres_fdw</> allows foreign
       tables to be modified using <command>INSERT</>, <command>UPDATE</> and
       <command>DELETE</> commands.  It can be specified for a foreign table
       or a foreign server.  A table-level option overrides a server-level
       option.
       The default is <literal>true</>.
-->
このオプションは、<filename>postgres_fdw</>が<command>INSERT</>、<command>UPDATE</>あるいは<command>DELETE</>コマンドを使用して外部テーブルを操作する事を許可するかどうかを規定します。
外部テーブルで指定されたオプションは、外部サーバにおいて指定されたオプションを上書きします。
デフォルト値は<literal>true</>です。
      </para>

      <para>
<!--
       Of course, if the remote table is not in fact updatable, an error
       would occur anyway.  Use of this option primarily allows the error to
       be thrown locally without querying the remote server.  Note however
       that the <literal>information_schema</> views will report a
       <filename>postgres_fdw</> foreign table to be updatable (or not)
       according to the setting of this option, without any check of the
       remote server.
-->
もちろん、リモートテーブルが実際には更新可能ではなかった場合、いずれにしてもエラーが発生するでしょう。このオプションを使用することで、リモートサーバへの問合せを行う事なくローカルでエラーを発生させることができます。
また、<literal>information_schema</>ビューは、このオプションの値に従って<filename>postgres_fdw</>管理下の外部テーブルを更新可能（あるいは不可能）であるとレポートする事に留意してください。
リモートサーバ側のチェックは一切行われません。
      </para>
     </listitem>
    </varlistentry>

   </variablelist>
  </sect3>
 </sect2>

 <sect2>
<!--
  <title>Connection Management</title>
-->
  <title>接続管理</title>

  <para>
<!--
   <filename>postgres_fdw</filename> establishes a connection to a
   foreign server during the first query that uses a foreign table
   associated with the foreign server.  This connection is kept and
   re-used for subsequent queries in the same session.  However, if
   multiple user identities (user mappings) are used to access the foreign
   server, a connection is established for each user mapping.
-->
<filename>postgres_fdw</filename>は、外部サーバに関連付けられた外部テーブルを参照するクエリを最初に実行する際に、外部サーバへの接続を確立します。
この接続は保持され、同じセッションで以降の問合せのために再利用されます。
しかし、外部サーバへのアクセスに対して複数のユーザ識別子（ユーザマッピング）が使用される場合には、接続はユーザマッピング毎に確立される事になります。
  </para>
 </sect2>

 <sect2>
<!--
  <title>Transaction Management</title>
-->
  <title>トランザクション管理</title>

  <para>
<!--
   During a query that references any remote tables on a foreign server,
   <filename>postgres_fdw</filename> opens a transaction on the
   remote server if one is not already open corresponding to the current
   local transaction.  The remote transaction is committed or aborted when
   the local transaction commits or aborts.  Savepoints are similarly
   managed by creating corresponding remote savepoints.
-->
外部サーバ上のリモートテーブルを参照する際に、まだトランザクションが開始されていなければ<filename>postgres_fdw</filename>はリモートサーバ上でトランザクションを開始します。
ローカルのトランザクションがコミット、あるいはアボートした時、リモートのトランザクションも同様にコミット、あるいはアボートします。
セーブポイントも同様に管理され、リモート側に関連付けられたセーブポイントが作成されます。
  </para>

  <para>
<!--
   The remote transaction uses <literal>SERIALIZABLE</>
   isolation level when the local transaction has <literal>SERIALIZABLE</>
   isolation level; otherwise it uses <literal>REPEATABLE READ</>
   isolation level.  This choice ensures that if a query performs multiple
   table scans on the remote server, it will get snapshot-consistent results
   for all the scans.  A consequence is that successive queries within a
   single transaction will see the same data from the remote server, even if
   concurrent updates are occurring on the remote server due to other
   activities.  That behavior would be expected anyway if the local
   transaction uses <literal>SERIALIZABLE</> or <literal>REPEATABLE READ</>
   isolation level, but it might be surprising for a <literal>READ
   COMMITTED</> local transaction.  A future
   <productname>PostgreSQL</productname> release might modify these rules.
-->
ローカルトランザクションが<literal>SERIALIZABLE</>隔離レベルを用いている時、リモートトランザクションも<literal>SERIALIZABLE</>隔離レベルを使用します。
それ以外の場合には<literal>REPEATABLE READ</>隔離レベルを使用します。
これは、あるクエリが複数のテーブルスキャンをリモート側で行う際に、確実に全てのスキャンにおいて一貫したスナップショットで結果を取り出すためです。
その結果、別の要求によってリモートサーバ側で競合する更新が発生したとしても、あるトランザクション内の問い合わせはリモートサーバからの一貫したデータを参照する事となります。
ローカルのトランザクションが<literal>SERIALIZABLE</>あるいは<literal>REPEATABLE READ</>隔離レベルを用いている場合、この動作は期待通りのものでしょう。
一方、ローカルのトランザクションが<literal>READ COMMITTED</>隔離レベルを使用している場合には、予想外の動作かもしれません。
将来の<productname>PostgreSQL</productname>リリースではこれらのルールに変更が加えられるかもしれません。
  </para>
 </sect2>

 <sect2>
<!--
  <title>Remote Query Optimization</title>
-->
  <title>リモート問合せの最適化</title>

  <para>
<!--
   <filename>postgres_fdw</> attempts to optimize remote queries to reduce
   the amount of data transferred from foreign servers.  This is done by
   sending query <literal>WHERE</> clauses to the remote server for
   execution, and by not retrieving table columns that are not needed for
   the current query.  To reduce the risk of misexecution of queries,
   <literal>WHERE</> clauses are not sent to the remote server unless they use
   only built-in data types, operators, and functions.  Operators and
   functions in the clauses must be <literal>IMMUTABLE</> as well.
-->
外部サーバからのデータ転送量を削減するため、<filename>postgres_fdw</>はリモート問合せを最適化しようと試みます。
これは問い合わせの<literal>WHERE</>句をリモートサーバに送出する事、およびクエリで必要とされていないカラムを取得しない事により行われます。
問い合わせの誤作動のリスクを下げるため、ビルトインのデータ型、演算子、関数だけを用いたものでない限り、リモートサーバに<literal>WHERE</>句は送出されません。また、<literal>WHERE</>句で使われる演算子と関数は<literal>IMMUTABLE</>でなければなりません。
  </para>

  <para>
<!--
   The query that is actually sent to the remote server for execution can
   be examined using <command>EXPLAIN VERBOSE</>.
-->
リモートサーバでの実行のために実際に送出される問い合わせは<command>EXPLAIN VERBOSE</>を用いて調べる事ができます。
  </para>
 </sect2>

 <sect2>
<!--
  <title>Cross-Version Compatibility</title>
-->
  <title>バージョン間互換性</title>

  <para>
<!--
   <filename>postgres_fdw</> can be used with remote servers dating back
   to <productname>PostgreSQL</> 8.3.  Read-only capability is available
   back to 8.1.  A limitation however is that <filename>postgres_fdw</>
   generally assumes that immutable built-in functions and operators are
   safe to send to the remote server for execution, if they appear in a
   <literal>WHERE</> clause for a foreign table.  Thus, a built-in
   function that was added since the remote server's release might be sent
   to it for execution, resulting in <quote>function does not exist</> or
   a similar error.  This type of failure can be worked around by
   rewriting the query, for example by embedding the foreign table
   reference in a sub-<literal>SELECT</> with <literal>OFFSET 0</> as an
   optimization fence, and placing the problematic function or operator
   outside the sub-<literal>SELECT</>.
-->
<filename>postgres_fdw</>のリモートサーバには<productname>PostgreSQL</> 8.3以降のバージョンを使用する事ができます。
読み取り専用であれば、8.1以降のバージョンまで可能です。
一方、<filename>postgres_fdw</>は<literal>IMMUTABLE</>属性を持ったビルトインの演算子と関数が外部テーブルの<literal>WHERE</>句に含まれる場合、リモート側で実行しても安全であると仮定します。そのため、リモートサーバのリリース後に追加された関数が実行のために送出されるかもしれず、結果として<quote>関数が見つかりません</>あるいは類するエラーを発生させる事になります。
この種の問題は問い合わせの書き換えによって対処する事ができます。
例えば、最適化を妨げるため、外部テーブルへの参照を<literal>OFFSET 0</>を付けて副問合せに埋め込み、問題のある関数や演算子を副問合せの外に配置するなどの方法があります。
  </para>
 </sect2>

 <sect2>
<!--
  <title>Examples</title>
-->
  <title>例</title>

  <para>
<!--
   Here is an example of creating a foreign table with
   <literal>postgres_fdw</>. First install the extension:
-->
これは<literal>postgres_fdw</>で外部テーブルを作成する例です。
まず、拡張をインストールします。
  </para>

<programlisting>
CREATE EXTENSION postgres_fdw;
</programlisting>

  <para>
<!--
   Then create a foreign server using <xref linkend="sql-createserver">.
   In this example we wish to connect to a <productname>PostgreSQL</> server
   on host <literal>192.83.123.89</literal> listening on
   port <literal>5432</literal>.  The database to which the connection is made
   is named <literal>foreign_db</literal> on the remote server:
-->
次に、<xref linkend="sql-createserver">を使って外部サーバを作成します。
この例では、ホスト<literal>192.83.123.89</literal>でポート<literal>5432</literal>を監視している<productname>PostgreSQL</>サーバに接続します。
接続されるデータベースはリモートサーバ上で<literal>foreign_db</literal>という名前です。

<programlisting>
CREATE SERVER foreign_server
        FOREIGN DATA WRAPPER postgres_fdw
        OPTIONS (host '192.83.123.89', port '5432', dbname 'foreign_db');
</programlisting>
  </para>

  <para>
<!--
   A user mapping, defined with <xref linkend="sql-createusermapping">, is
   needed as well to identify the role that will be used on the remote
   server:
-->
リモートサーバで使われるロールを特定するためにユーザマッピングも必要です。ユーザマッピングは<xref linkend="sql-createusermapping">で定義されます。

<programlisting>
CREATE USER MAPPING FOR local_user
        SERVER foreign_server
        OPTIONS (user 'foreign_user', password 'password');
</programlisting>
  </para>

  <para>
<!--
   Now it is possible to create a foreign table with
   <xref linkend="sql-createforeigntable">.  In this example we
   wish to access the table named <structname>some_schema.some_table</>
   on the remote server.  The local name for it will
   be <structname>foreign_table</>:
-->
これで<xref linkend="sql-createforeigntable">により外部テーブルが作成できるようになりました。
この例では、リモートサーバの<structname>some_schema.some_table</>という名前のテーブルにアクセスします。
対応するローカルの名前は<structname>foreign_table</>です。

<programlisting>
CREATE FOREIGN TABLE foreign_table (
        id serial NOT NULL,
        data text
)
        SERVER foreign_server
        OPTIONS (schema_name 'some_schema', table_name 'some_table');
</programlisting>

<!--
   It's essential that the data types and other properties of the columns
   declared in <command>CREATE FOREIGN TABLE</> match the actual remote table.
   Column names must match as well, unless you attach <literal>column_name</>
   options to the individual columns to show how they are named in the remote
   table.
-->
<command>CREATE FOREIGN TABLE</>で宣言した列のデータ型やその他の属性は、実際のリモートテーブルと一致していることが必須です。
リモートテーブルでどのような名前なのかを個々の列に対して<literal>column_name</>オプションで指定しない限り、列名も一致していなければなりません。
  </para>
 </sect2>

 <sect2>
<!--
  <title>Author</title>
-->
  <title>作者</title>
  <para>
<!--
   Shigeru Hanada <email>shigeru.hanada@gmail.com</email>
-->
花田 茂 <email>shigeru.hanada@gmail.com</email>
  </para>
 </sect2>

</sect1>
